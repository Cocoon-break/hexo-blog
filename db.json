{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/ali_pay.jpg","path":"images/ali_pay.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":1,"renderable":1},{"_id":"source/images/wechat_pay.jpg","path":"images/wechat_pay.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"source/images/screenShot/iterm2_color.jpg","path":"images/screenShot/iterm2_color.jpg","modified":1,"renderable":0},{"_id":"source/images/screenShot/iterm2_keymap.jpg","path":"images/screenShot/iterm2_keymap.jpg","modified":1,"renderable":0},{"_id":"source/images/screenShot/iterm2_tmux_keymap.jpg","path":"images/screenShot/iterm2_tmux_keymap.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"5a92d9558588b86f978c593ca23c2588906877d1","modified":1496382612000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1494323694000},{"_id":"themes/yilia/.DS_Store","hash":"9e0a2944c5aafc816026948b21b836a20661bbc9","modified":1494831168000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1494323694000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1494323694000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1494323694000},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1494323694000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1494323694000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1494323694000},{"_id":"themes/yilia/_config.yml","hash":"d2b7cfa660cf682dd5057c72924082caed281683","modified":1495897052000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1494323694000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1494323694000},{"_id":"source/_posts/Mac下打造流畅的终端使用环境.md","hash":"0f2dc9154967cf88cc97ede13c454abba4fa1608","modified":1496198896000},{"_id":"source/_posts/iterm,tmux,vim的常用快捷键.md","hash":"36494cd785d6cf56f4493374ed400a024d0d3a86","modified":1496387122000},{"_id":"source/_posts/Linux下打RPM包.md","hash":"f6ee73e8ac31e1efbd13add1c22cc8e8b21eea3e","modified":1495897293000},{"_id":"source/_posts/ffmpeg简易介绍.md","hash":"458f0d28f84f755c3d2012c5dbacc79d24f779bf","modified":1495897714000},{"_id":"source/_posts/shell 脚本中读取参数值.md","hash":"c540bd36fa48bacfae11b46b4e3d2101b3e84c9f","modified":1495897307000},{"_id":"source/_posts/supervisor 是基于python的进程管理工具.md","hash":"37551c5194286c7ef12b718fa9194ee0fbd2b68d","modified":1495897325000},{"_id":"source/images/ali_pay.jpg","hash":"e148168a1ecd2047cfc4477271e0b3a2bbb95db9","modified":1494831538000},{"_id":"source/images/avatar.jpg","hash":"419755f44dfcd73ed13ae43d9d74adb0b6ef4e4d","modified":1494322683000},{"_id":"source/images/.DS_Store","hash":"34fb03d76d7bc214244bc07ba34d628914a1cf7a","modified":1495875022000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1494323694000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1494323694000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1494323674000},{"_id":"themes/yilia/.git/index","hash":"a37c17fcd5181c69dde7d51b7a575e150376cbdf","modified":1494828292000},{"_id":"themes/yilia/.git/packed-refs","hash":"a8140137954dec646b34af234b44895c240f8f38","modified":1494323694000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1494323694000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1494323694000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1494323694000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1494323694000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1494323694000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1494323694000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1494323694000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1494323694000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1494323694000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1494323694000},{"_id":"themes/yilia/layout/.DS_Store","hash":"10ebbd14baa4908d0f1e52bb9c58048af8a88be4","modified":1494828315000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494323694000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494323694000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1494323694000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1494323694000},{"_id":"themes/yilia/source/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1494323694000},{"_id":"themes/yilia/source/.DS_Store","hash":"027b69422bb9ac46d2fac54136ff2d6abee4eef5","modified":1494831173000},{"_id":"themes/yilia/source/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1494323694000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1494323694000},{"_id":"themes/yilia/source-src/.DS_Store","hash":"e678a4ab5fd95182046869b13917edf9f778975c","modified":1494835932000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1494323694000},{"_id":"source/images/wechat_pay.jpg","hash":"e768a1e2f698a974c7a74b4ebd76888256355f0d","modified":1494831538000},{"_id":"themes/yilia/source/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1494323694000},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1494323694000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1494323674000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1494323674000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"7dd6deb0a28a8963071916454799c014a3da9a00","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"7547bc40b533d9db62f430c43dc0e595c9caa5b6","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"a9628ab50d0174d49988f4a24541c640e1e7b686","modified":1494828408000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1494323694000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1494323694000},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1494323694000},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1494323694000},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1494323694000},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1494323694000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1494323694000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1494323694000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1494323694000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1494323694000},{"_id":"themes/yilia/source/img/avatar.jpg","hash":"419755f44dfcd73ed13ae43d9d74adb0b6ef4e4d","modified":1494324568000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1494323694000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1494323694000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1494323694000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1494323694000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1494323694000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1494323694000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1494323694000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1494323694000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1494323694000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1494323694000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1494323694000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1494323694000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1494323694000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"a40400734c6509b9ac6e393a6681ccd8bafed5eb","modified":1494323694000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1494323694000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1494323694000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"ac8c3312182519e33d0f729d157deb36e5f42894","modified":1494323694000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1494323694000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1494323694000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1494323694000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1494323694000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1494323694000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1494323694000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1494323694000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1494323694000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1494323694000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1494323694000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9591a0f61236a56b2a15a541f572bcfd93823a0f","modified":1494323694000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1494323694000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1494323694000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1494323694000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1494323694000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1494323694000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1494323694000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1494323694000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1494323694000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"6160c13783a7f31dab4fdcc6b752b3a368586d67","modified":1494323694000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"891805485d22f9cbd7a1042d98f7953414f4c0fd","modified":1494323694000},{"_id":"themes/yilia/.git/objects/pack/pack-34ce1806cd91d51f5b1d1f827d0021b0fcdfc362.idx","hash":"98ba278b2bd2a0baf4c76325542a2c9922d7cd45","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"1ba1d4a4663eae37b1a2b75c47dfdff4fb3cbf52","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"7851d961ae172f521ba71e255fdc60f4ca0b45ed","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1494323694000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1494323694000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1494323694000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1494323694000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1494323694000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1494323694000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1494323694000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1494323694000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1494323694000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1494323694000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1494323694000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1494323694000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1494323694000},{"_id":"source/images/screenShot/iterm2_color.jpg","hash":"62a8abd33d8dbebdcc9ab53f6c4975311e3c3f41","modified":1495875048000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"7dd6deb0a28a8963071916454799c014a3da9a00","modified":1494323694000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1494323694000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"7dd6deb0a28a8963071916454799c014a3da9a00","modified":1494323694000},{"_id":"source/images/screenShot/iterm2_keymap.jpg","hash":"d0325aac666446894a687567edb5b4b5e14bad18","modified":1496384594000},{"_id":"source/images/screenShot/iterm2_tmux_keymap.jpg","hash":"91a1ba4c89e8dd9c8036962268333b508c9264eb","modified":1496386335000},{"_id":"themes/yilia/.git/objects/pack/pack-34ce1806cd91d51f5b1d1f827d0021b0fcdfc362.pack","hash":"023b4f59fd0e9f9fe92edb89711489870a07d85a","modified":1494323694000},{"_id":"public/content.json","hash":"bfe34dfe93b1017dcbc356683335281c5f687aec","modified":1496387145372},{"_id":"public/2017/06/02/iterm,tmux,vim的常用快捷键/index.html","hash":"26fcd9904dcf022c088e52c0be8fe9f3e95ba548","modified":1496387145565},{"_id":"public/2017/05/27/Mac下打造流畅的终端使用环境/index.html","hash":"686dc3aab812cb8a3b72e60707c58fbbc68c6859","modified":1496387145565},{"_id":"public/2017/05/25/shell 脚本中读取参数值/index.html","hash":"c5a10b994ed08495b4705f5d3d0dbf90a4bf2090","modified":1496387145565},{"_id":"public/2017/05/22/ffmpeg简易介绍/index.html","hash":"96cf5c6d9d1d2c0f868d11b862ddf657a6a795ea","modified":1496387145566},{"_id":"public/2017/05/15/Linux下打RPM包/index.html","hash":"484ec4464e70f22af0a5358b3b034eae19f8254f","modified":1496387145566},{"_id":"public/2017/04/28/supervisor 是基于python的进程管理工具/index.html","hash":"cf46d901970194ccfff8415af119fe658c5240b1","modified":1496387145566},{"_id":"public/archives/index.html","hash":"399496f8753c42771d7be2a4df48c6f32d80f98d","modified":1496387145566},{"_id":"public/archives/page/2/index.html","hash":"6166409ebc64bae71c0610fc365cdc8b962c1369","modified":1496387145566},{"_id":"public/archives/2017/index.html","hash":"a48c22eca5ab25a1f0c677c074ffa2745b955a9a","modified":1496387145566},{"_id":"public/archives/2017/page/2/index.html","hash":"341d88886e5c9cb396c03e15427817bcdb622643","modified":1496387145566},{"_id":"public/archives/2017/04/index.html","hash":"205564a515b99b71fcef3806360c274cab6d546f","modified":1496387145566},{"_id":"public/archives/2017/05/index.html","hash":"7f41a5877999cbaaa446107deeb92a1f1a61e389","modified":1496387145566},{"_id":"public/archives/2017/06/index.html","hash":"c5aaa81fa2b1e9c4dfe618c50596201fc7ba0193","modified":1496387145566},{"_id":"public/index.html","hash":"9bfcf4c103e6f269389e069741d4fd5adc3917e1","modified":1496387145566},{"_id":"public/page/2/index.html","hash":"2a7af2089374147d63e06cf940df34f92f6e7bd0","modified":1496387145566},{"_id":"public/tags/技巧/index.html","hash":"78967b7ee1bfd197febfc1c3724427343bd16cb4","modified":1496387145566},{"_id":"public/tags/Linux/index.html","hash":"6e0cc87ca017fbdc9afffd95b5d6e15d611dad64","modified":1496387145567},{"_id":"public/images/ali_pay.jpg","hash":"e148168a1ecd2047cfc4477271e0b3a2bbb95db9","modified":1496387145571},{"_id":"public/images/avatar.jpg","hash":"419755f44dfcd73ed13ae43d9d74adb0b6ef4e4d","modified":1496387145571},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1496387145571},{"_id":"public/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496387145571},{"_id":"public/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496387145571},{"_id":"public/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496387145571},{"_id":"public/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1496387145571},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496387145571},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1496387145571},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1496387145571},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496387145571},{"_id":"public/img/avatar.jpg","hash":"419755f44dfcd73ed13ae43d9d74adb0b6ef4e4d","modified":1496387145571},{"_id":"public/images/wechat_pay.jpg","hash":"e768a1e2f698a974c7a74b4ebd76888256355f0d","modified":1496387145574},{"_id":"public/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1496387145580},{"_id":"public/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1496387145580},{"_id":"public/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1496387145580},{"_id":"public/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1496387145580},{"_id":"public/images/screenShot/iterm2_color.jpg","hash":"62a8abd33d8dbebdcc9ab53f6c4975311e3c3f41","modified":1496387145585},{"_id":"public/images/screenShot/iterm2_keymap.jpg","hash":"d0325aac666446894a687567edb5b4b5e14bad18","modified":1496387145590},{"_id":"public/images/screenShot/iterm2_tmux_keymap.jpg","hash":"91a1ba4c89e8dd9c8036962268333b508c9264eb","modified":1496387145594}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Mac下打造流畅的终端使用环境","date":"2017-05-27T09:02:12.000Z","_content":"\n作为程序员Mac上自带的终端是远远满足不了我们的，这时我们就要自己手动搭一个我们顺手的终端环境。下面我们就来搭建iterm2+ oh my zsh + tmux  的终端工具\n\n## ITerm2 安装\n\n1. 上Iterm2的官网下载iterm2,[iterm2下载](http://www.iterm2.com/)\n\n2. 下载完成之后，发现iterm2 自带的配色我不太喜欢，安装完成之后进行item2的配色，这个纯属看个人喜好了。\n\n   - 要进行配色，我们当然得要有配色的方案啦！什么你要自己配一个，嗯...... 这也是可以的，不过有很多现成的方案你要不要啊。github 上有超多的配色方案，我们先把这个库给clone下来。\n\n     ```sh\n     git clone git@github.com:mbadolato/iTerm2-Color-Schemes.git\n     ```\n\n     要是你没有git，那我觉得你没太必要继续下去了。当然你还想继续的话，你就上GitHub手动download 下来。\n\n     <!-- more -->\n\n   - 好了配色方案是有了接下来我们就是进行配色了,这个也是比较简单，打开iterm2的偏好设置，找到Profiles下的Colors，选中import，这里选择刚才git 克隆下来文件中的schemes文件夹下的文件，这些文件就是各种各样的配色方案，这就看个人喜好了哈，这样你的iterm2配色方案就完成了\n\n     ![](https://cocoon-break.github.io/images/screenShot/iterm2_color.jpg)\n\n\n\n\n\n\n## Mac下shell介绍\n\nShell 是LInux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后在把结果返回给用户或应用程序。\n\n\n\nLinux/Unix 提供了很多种shell，常用的shell有这么几种，sh、bash、csh等。想知道系统有几种shell，可以通过以下命令查看。\n\n```sh\ncat /etc/shells\n```\n\n\n\n在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh，目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh，这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」\n\n\n\n### 安装使用on-my-zsh\n\n1. 通过git 把oh-my-zsh 下载下来\n\n   ```sh\n   git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n   ```\n\n2. 添加配置文件并设置为默认的shell\n\n   ```sh\n   cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n   chsh -s /bin/zsh\n   ```\n\n   **注:** .zshrc 就相当于.bashrc了以后配置环境就在.zshrc中配置就行\n\n3. 配置oh-my-zsh 的主题\n\n   oh-my-zsh 提供了很多的主题，可以选择自己喜欢的风格。具体的主题效果可以参考[主题预览](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)，选好主题了，接下来就是配置了。编辑~/.zshrc 文件\n\n   ```sh\n   vim ~/.zshrc\n   #编辑主题，af-magic是我机器上的主题风格，具体可以设置为刚才主题预览中的\n   ZSH_THEME=\"af-magic\"\n   ```\n\n4. oh-my-zsh 就配置完了。这里只是简单的介绍oh-my-zsh。oh-my-zsh  功能还是很丰富的，更多oh-my-zsh请移步[oh-my-zsh GitHub地址](https://github.com/robbyrussell/oh-my-zsh)\n\n## 安装tmux\n\nTmux 是一个工具，用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 Tmux 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。\n\n1. 先安装Homebrew，这个是Mac平台的包管理器。用来安装一些开发工具还是很方便。Mac系统自带了ruby的环境，我们通过ruby来安装Homebrew\n\n   ```sh\n   /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n   ```\n\n2. 通过homebrew 安装tmux\n\n   ```sh\n   brew install tmux\n   ```\n\n3. 就是这么简单tmux就装完了\n\n\n\n下一篇会讲具体的使用方法，包括iterm快捷键，tmux的使用","source":"_posts/Mac下打造流畅的终端使用环境.md","raw":"---\ntitle: Mac下打造流畅的终端使用环境\ndate: 2017-05-27 17:02:12\ntags: 技巧\n---\n\n作为程序员Mac上自带的终端是远远满足不了我们的，这时我们就要自己手动搭一个我们顺手的终端环境。下面我们就来搭建iterm2+ oh my zsh + tmux  的终端工具\n\n## ITerm2 安装\n\n1. 上Iterm2的官网下载iterm2,[iterm2下载](http://www.iterm2.com/)\n\n2. 下载完成之后，发现iterm2 自带的配色我不太喜欢，安装完成之后进行item2的配色，这个纯属看个人喜好了。\n\n   - 要进行配色，我们当然得要有配色的方案啦！什么你要自己配一个，嗯...... 这也是可以的，不过有很多现成的方案你要不要啊。github 上有超多的配色方案，我们先把这个库给clone下来。\n\n     ```sh\n     git clone git@github.com:mbadolato/iTerm2-Color-Schemes.git\n     ```\n\n     要是你没有git，那我觉得你没太必要继续下去了。当然你还想继续的话，你就上GitHub手动download 下来。\n\n     <!-- more -->\n\n   - 好了配色方案是有了接下来我们就是进行配色了,这个也是比较简单，打开iterm2的偏好设置，找到Profiles下的Colors，选中import，这里选择刚才git 克隆下来文件中的schemes文件夹下的文件，这些文件就是各种各样的配色方案，这就看个人喜好了哈，这样你的iterm2配色方案就完成了\n\n     ![](https://cocoon-break.github.io/images/screenShot/iterm2_color.jpg)\n\n\n\n\n\n\n## Mac下shell介绍\n\nShell 是LInux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后在把结果返回给用户或应用程序。\n\n\n\nLinux/Unix 提供了很多种shell，常用的shell有这么几种，sh、bash、csh等。想知道系统有几种shell，可以通过以下命令查看。\n\n```sh\ncat /etc/shells\n```\n\n\n\n在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh，目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh，这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」\n\n\n\n### 安装使用on-my-zsh\n\n1. 通过git 把oh-my-zsh 下载下来\n\n   ```sh\n   git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n   ```\n\n2. 添加配置文件并设置为默认的shell\n\n   ```sh\n   cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n   chsh -s /bin/zsh\n   ```\n\n   **注:** .zshrc 就相当于.bashrc了以后配置环境就在.zshrc中配置就行\n\n3. 配置oh-my-zsh 的主题\n\n   oh-my-zsh 提供了很多的主题，可以选择自己喜欢的风格。具体的主题效果可以参考[主题预览](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)，选好主题了，接下来就是配置了。编辑~/.zshrc 文件\n\n   ```sh\n   vim ~/.zshrc\n   #编辑主题，af-magic是我机器上的主题风格，具体可以设置为刚才主题预览中的\n   ZSH_THEME=\"af-magic\"\n   ```\n\n4. oh-my-zsh 就配置完了。这里只是简单的介绍oh-my-zsh。oh-my-zsh  功能还是很丰富的，更多oh-my-zsh请移步[oh-my-zsh GitHub地址](https://github.com/robbyrussell/oh-my-zsh)\n\n## 安装tmux\n\nTmux 是一个工具，用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 Tmux 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。\n\n1. 先安装Homebrew，这个是Mac平台的包管理器。用来安装一些开发工具还是很方便。Mac系统自带了ruby的环境，我们通过ruby来安装Homebrew\n\n   ```sh\n   /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n   ```\n\n2. 通过homebrew 安装tmux\n\n   ```sh\n   brew install tmux\n   ```\n\n3. 就是这么简单tmux就装完了\n\n\n\n下一篇会讲具体的使用方法，包括iterm快捷键，tmux的使用","slug":"Mac下打造流畅的终端使用环境","published":1,"updated":"2017-05-31T02:48:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fi9qlj0000lcc0usr9suky","content":"<p>作为程序员Mac上自带的终端是远远满足不了我们的，这时我们就要自己手动搭一个我们顺手的终端环境。下面我们就来搭建iterm2+ oh my zsh + tmux  的终端工具</p>\n<h2 id=\"ITerm2-安装\"><a href=\"#ITerm2-安装\" class=\"headerlink\" title=\"ITerm2 安装\"></a>ITerm2 安装</h2><ol>\n<li><p>上Iterm2的官网下载iterm2,<a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"external\">iterm2下载</a></p>\n</li>\n<li><p>下载完成之后，发现iterm2 自带的配色我不太喜欢，安装完成之后进行item2的配色，这个纯属看个人喜好了。</p>\n<ul>\n<li><p>要进行配色，我们当然得要有配色的方案啦！什么你要自己配一个，嗯…… 这也是可以的，不过有很多现成的方案你要不要啊。github 上有超多的配色方案，我们先把这个库给clone下来。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:mbadolato/iTerm2-Color-Schemes.git</div></pre></td></tr></table></figure>\n<p>要是你没有git，那我觉得你没太必要继续下去了。当然你还想继续的话，你就上GitHub手动download 下来。</p>\n<a id=\"more\"></a>\n</li>\n<li><p>好了配色方案是有了接下来我们就是进行配色了,这个也是比较简单，打开iterm2的偏好设置，找到Profiles下的Colors，选中import，这里选择刚才git 克隆下来文件中的schemes文件夹下的文件，这些文件就是各种各样的配色方案，这就看个人喜好了哈，这样你的iterm2配色方案就完成了</p>\n<p><img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_color.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Mac下shell介绍\"><a href=\"#Mac下shell介绍\" class=\"headerlink\" title=\"Mac下shell介绍\"></a>Mac下shell介绍</h2><p>Shell 是LInux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后在把结果返回给用户或应用程序。</p>\n<p>Linux/Unix 提供了很多种shell，常用的shell有这么几种，sh、bash、csh等。想知道系统有几种shell，可以通过以下命令查看。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/shells</div></pre></td></tr></table></figure>\n<p>在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh，目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh，这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」</p>\n<h3 id=\"安装使用on-my-zsh\"><a href=\"#安装使用on-my-zsh\" class=\"headerlink\" title=\"安装使用on-my-zsh\"></a>安装使用on-my-zsh</h3><ol>\n<li><p>通过git 把oh-my-zsh 下载下来</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加配置文件并设置为默认的shell</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div><div class=\"line\">chsh <span class=\"_\">-s</span> /bin/zsh</div></pre></td></tr></table></figure>\n<p><strong>注:</strong> .zshrc 就相当于.bashrc了以后配置环境就在.zshrc中配置就行</p>\n</li>\n<li><p>配置oh-my-zsh 的主题</p>\n<p>oh-my-zsh 提供了很多的主题，可以选择自己喜欢的风格。具体的主题效果可以参考<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"external\">主题预览</a>，选好主题了，接下来就是配置了。编辑~/.zshrc 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.zshrc</div><div class=\"line\"><span class=\"comment\">#编辑主题，af-magic是我机器上的主题风格，具体可以设置为刚才主题预览中的</span></div><div class=\"line\">ZSH_THEME=<span class=\"string\">\"af-magic\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>oh-my-zsh 就配置完了。这里只是简单的介绍oh-my-zsh。oh-my-zsh  功能还是很丰富的，更多oh-my-zsh请移步<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh GitHub地址</a></p>\n</li>\n</ol>\n<h2 id=\"安装tmux\"><a href=\"#安装tmux\" class=\"headerlink\" title=\"安装tmux\"></a>安装tmux</h2><p>Tmux 是一个工具，用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 Tmux 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。</p>\n<ol>\n<li><p>先安装Homebrew，这个是Mac平台的包管理器。用来安装一些开发工具还是很方便。Mac系统自带了ruby的环境，我们通过ruby来安装Homebrew</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>通过homebrew 安装tmux</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install tmux</div></pre></td></tr></table></figure>\n</li>\n<li><p>就是这么简单tmux就装完了</p>\n</li>\n</ol>\n<p>下一篇会讲具体的使用方法，包括iterm快捷键，tmux的使用</p>\n","site":{"data":{}},"excerpt":"<p>作为程序员Mac上自带的终端是远远满足不了我们的，这时我们就要自己手动搭一个我们顺手的终端环境。下面我们就来搭建iterm2+ oh my zsh + tmux  的终端工具</p>\n<h2 id=\"ITerm2-安装\"><a href=\"#ITerm2-安装\" class=\"headerlink\" title=\"ITerm2 安装\"></a>ITerm2 安装</h2><ol>\n<li><p>上Iterm2的官网下载iterm2,<a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"external\">iterm2下载</a></p>\n</li>\n<li><p>下载完成之后，发现iterm2 自带的配色我不太喜欢，安装完成之后进行item2的配色，这个纯属看个人喜好了。</p>\n<ul>\n<li><p>要进行配色，我们当然得要有配色的方案啦！什么你要自己配一个，嗯…… 这也是可以的，不过有很多现成的方案你要不要啊。github 上有超多的配色方案，我们先把这个库给clone下来。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:mbadolato/iTerm2-Color-Schemes.git</div></pre></td></tr></table></figure>\n<p>要是你没有git，那我觉得你没太必要继续下去了。当然你还想继续的话，你就上GitHub手动download 下来。</p>","more":"</li>\n<li><p>好了配色方案是有了接下来我们就是进行配色了,这个也是比较简单，打开iterm2的偏好设置，找到Profiles下的Colors，选中import，这里选择刚才git 克隆下来文件中的schemes文件夹下的文件，这些文件就是各种各样的配色方案，这就看个人喜好了哈，这样你的iterm2配色方案就完成了</p>\n<p><img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_color.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Mac下shell介绍\"><a href=\"#Mac下shell介绍\" class=\"headerlink\" title=\"Mac下shell介绍\"></a>Mac下shell介绍</h2><p>Shell 是LInux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后在把结果返回给用户或应用程序。</p>\n<p>Linux/Unix 提供了很多种shell，常用的shell有这么几种，sh、bash、csh等。想知道系统有几种shell，可以通过以下命令查看。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/shells</div></pre></td></tr></table></figure>\n<p>在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh，目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh，这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」</p>\n<h3 id=\"安装使用on-my-zsh\"><a href=\"#安装使用on-my-zsh\" class=\"headerlink\" title=\"安装使用on-my-zsh\"></a>安装使用on-my-zsh</h3><ol>\n<li><p>通过git 把oh-my-zsh 下载下来</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加配置文件并设置为默认的shell</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div><div class=\"line\">chsh <span class=\"_\">-s</span> /bin/zsh</div></pre></td></tr></table></figure>\n<p><strong>注:</strong> .zshrc 就相当于.bashrc了以后配置环境就在.zshrc中配置就行</p>\n</li>\n<li><p>配置oh-my-zsh 的主题</p>\n<p>oh-my-zsh 提供了很多的主题，可以选择自己喜欢的风格。具体的主题效果可以参考<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"external\">主题预览</a>，选好主题了，接下来就是配置了。编辑~/.zshrc 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.zshrc</div><div class=\"line\"><span class=\"comment\">#编辑主题，af-magic是我机器上的主题风格，具体可以设置为刚才主题预览中的</span></div><div class=\"line\">ZSH_THEME=<span class=\"string\">\"af-magic\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>oh-my-zsh 就配置完了。这里只是简单的介绍oh-my-zsh。oh-my-zsh  功能还是很丰富的，更多oh-my-zsh请移步<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh GitHub地址</a></p>\n</li>\n</ol>\n<h2 id=\"安装tmux\"><a href=\"#安装tmux\" class=\"headerlink\" title=\"安装tmux\"></a>安装tmux</h2><p>Tmux 是一个工具，用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 Tmux 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。</p>\n<ol>\n<li><p>先安装Homebrew，这个是Mac平台的包管理器。用来安装一些开发工具还是很方便。Mac系统自带了ruby的环境，我们通过ruby来安装Homebrew</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>通过homebrew 安装tmux</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install tmux</div></pre></td></tr></table></figure>\n</li>\n<li><p>就是这么简单tmux就装完了</p>\n</li>\n</ol>\n<p>下一篇会讲具体的使用方法，包括iterm快捷键，tmux的使用</p>"},{"title":"iterm,tmux,vim 的常用快捷键","date":"2017-06-02T05:52:12.000Z","_content":"\n上一篇博客我们搭建了Mac下流畅的终端使用环境，这篇博客我们讲一些常用的快捷键来提高开发效率。废话不多说我们开始吧\n\n\n\n## iterm2 快捷\n\n通常我们在使用时，一个窗口总是感觉不够用，这时我们就需要多窗口，或者一个窗口需要多个屏。打开Iterm2，我们按下`command + t`，来新建窗口，通过`commmand + w`来关闭当前窗口，如果我们想要切换不同的窗口时，我们可以通过`command + 方向键` 或者`command +  数字`来切换窗口。`command + q` 退出应用程序\n\n**注：** `command + t`或者`command + w`或者`command +q` 在很多应用都是通用的,比如在chrom 上，这几个快捷键，分别表示新建tab页，关闭tab页，推出chrom。但是chrom 切换tab是使用`command + option +方向键` 这个就和iterm2有区别了。\n\n\n\n在链接远程服务器时，我需要在同一窗口，查看不同服务器的状态，或者其他的一些信息。多窗口去查看就太麻烦 了。iterm 的分屏就能满足你的需要了。iterm2在分屏时，可以进行横向分屏和纵向分屏。纵向分屏使用`command + d`横向分屏使用`command + shift +d`，关闭当前分屏的快捷键也是使用`command + w`，切换各个分屏使用的是`command + option + 方向键`，以下是效果图\n\n<!-- more -->\n\n![](https://cocoon-break.github.io/images/screenShot/iterm2_keymap.jpg)\n\n\n\n接下来就是在输入的时候，我们需要快速回到行首使用`ctrl + a`，快速回到行末使用`ctrl + e`，输入失误就需要删除错误了，`ctrl + u`是将当前行清空，使用 `ctrl + w`,删除光标之前的单词，使用 `ctrl + h`删除光标之前所有字符，使用`ctrl + k` 删除光标之后的所有字符。\n\n\n\n总结下 ：\n\n- 窗口和屏相关\n  - 新建窗口：command + t\n  - 关闭窗口或者分屏：command + w\n  - 切换标签：command +  左右方向键\n  - 切换全屏：command + enter\n  - 水平分屏：command + shift + d \n  - 垂直分屏：command + d \n  - 切换分屏：command + option + 方向键\n- 编辑相关\n  - 清除当前行：ctrl + u\n  - 删除光标之前的字符：ctrl + h\n  - 删除光标之前的单词：ctrl + w\n  - 删除光标到文本末尾：ctrl + k\n  - 到行首： ctrl + a\n  - 到行末：ctrl + e\n\n\n\n## tmux 快捷键\n\n 打开iterm2 输入`tmux` 就进入了tmux的交互模式了，tmux 也有窗口和屏的概念这里就不再说明了。直接进入主题，快捷键的使用。\n\n在使用任何功能时我们都得先按下`ctrl + b` 然后**松开**，接着按下其他的键，比如我要新建一个窗口，先按下`ctrl + b`  然后在按下`c`,  这就完成了窗口的新建。\n\n- 快捷键都是先按下`ctrl + b`然后在按一下键\n  - c\t\t新建窗口\n  - &             关闭当前窗口\n  - p              切换至上一个窗口\n  - n              切换至下一个窗口\n  - %              将当前窗口纵向分屏\n  - \"                将当前窗口横向分屏\n  - 方向键      在多个分屏中切换\n  - d                脱离当前tmux，在输入tmux attach 就能重新进入\n\n这里只将一些基础的快捷键，更多快捷键和配置，请自行谷歌，百度，以下为tmux  分屏之后的效果图\n\n![](https://cocoon-break.github.io/images/screenShot/iterm2_tmux_keymap.jpg)\n\n\n\n## vim 快捷键\n\nvim 的功能很强大，这里也不会深入讲解介绍，只是收集了一些快捷键，以便提供一些效率。\n\n- 查找\n  - 从光标处向下搜索：/ + 要查找的词\n  - 从光标处向上搜索：? + 要查找的词\n  - 快速回到页首：{\n  - 去页尾：}\n  - 回行首：shift + ^\n  - 回行末：shift + $\n- 编辑\n  - 删除光标出的字母：x\n  - 删除光标所在行：dd\n  - 删除单词包括空格：dw\n  - 回撤上一次编辑：u \n  - 取消撤回功能(对u功取消)：control + r\n  - 复制光标所在行：yy\n  - 复制n(数字)行：nyy\n  - 复制单词：yw\n  - 复制n个单词：nyw\n  - 复制光标所在位置到行末：y$\n  - 复制光标所在位置到行首：y^\n  - 粘贴：p\n\n更多vim 操作快捷键：[vim快捷键](http://www.lcode.cc/2017/04/10/vim-shortcut-key.html)\n\n这篇博客只是收集和介绍一些基础简单的快捷键，并没有很深入的去使用iterm2 ，tmux，vim，这些功能都很强大，想继续深入的同学可以去查查资料。","source":"_posts/iterm,tmux,vim的常用快捷键.md","raw":"---\ntitle: iterm,tmux,vim 的常用快捷键\ndate: 2017-06-02 13:52:12\ntags: 技巧\n---\n\n上一篇博客我们搭建了Mac下流畅的终端使用环境，这篇博客我们讲一些常用的快捷键来提高开发效率。废话不多说我们开始吧\n\n\n\n## iterm2 快捷\n\n通常我们在使用时，一个窗口总是感觉不够用，这时我们就需要多窗口，或者一个窗口需要多个屏。打开Iterm2，我们按下`command + t`，来新建窗口，通过`commmand + w`来关闭当前窗口，如果我们想要切换不同的窗口时，我们可以通过`command + 方向键` 或者`command +  数字`来切换窗口。`command + q` 退出应用程序\n\n**注：** `command + t`或者`command + w`或者`command +q` 在很多应用都是通用的,比如在chrom 上，这几个快捷键，分别表示新建tab页，关闭tab页，推出chrom。但是chrom 切换tab是使用`command + option +方向键` 这个就和iterm2有区别了。\n\n\n\n在链接远程服务器时，我需要在同一窗口，查看不同服务器的状态，或者其他的一些信息。多窗口去查看就太麻烦 了。iterm 的分屏就能满足你的需要了。iterm2在分屏时，可以进行横向分屏和纵向分屏。纵向分屏使用`command + d`横向分屏使用`command + shift +d`，关闭当前分屏的快捷键也是使用`command + w`，切换各个分屏使用的是`command + option + 方向键`，以下是效果图\n\n<!-- more -->\n\n![](https://cocoon-break.github.io/images/screenShot/iterm2_keymap.jpg)\n\n\n\n接下来就是在输入的时候，我们需要快速回到行首使用`ctrl + a`，快速回到行末使用`ctrl + e`，输入失误就需要删除错误了，`ctrl + u`是将当前行清空，使用 `ctrl + w`,删除光标之前的单词，使用 `ctrl + h`删除光标之前所有字符，使用`ctrl + k` 删除光标之后的所有字符。\n\n\n\n总结下 ：\n\n- 窗口和屏相关\n  - 新建窗口：command + t\n  - 关闭窗口或者分屏：command + w\n  - 切换标签：command +  左右方向键\n  - 切换全屏：command + enter\n  - 水平分屏：command + shift + d \n  - 垂直分屏：command + d \n  - 切换分屏：command + option + 方向键\n- 编辑相关\n  - 清除当前行：ctrl + u\n  - 删除光标之前的字符：ctrl + h\n  - 删除光标之前的单词：ctrl + w\n  - 删除光标到文本末尾：ctrl + k\n  - 到行首： ctrl + a\n  - 到行末：ctrl + e\n\n\n\n## tmux 快捷键\n\n 打开iterm2 输入`tmux` 就进入了tmux的交互模式了，tmux 也有窗口和屏的概念这里就不再说明了。直接进入主题，快捷键的使用。\n\n在使用任何功能时我们都得先按下`ctrl + b` 然后**松开**，接着按下其他的键，比如我要新建一个窗口，先按下`ctrl + b`  然后在按下`c`,  这就完成了窗口的新建。\n\n- 快捷键都是先按下`ctrl + b`然后在按一下键\n  - c\t\t新建窗口\n  - &             关闭当前窗口\n  - p              切换至上一个窗口\n  - n              切换至下一个窗口\n  - %              将当前窗口纵向分屏\n  - \"                将当前窗口横向分屏\n  - 方向键      在多个分屏中切换\n  - d                脱离当前tmux，在输入tmux attach 就能重新进入\n\n这里只将一些基础的快捷键，更多快捷键和配置，请自行谷歌，百度，以下为tmux  分屏之后的效果图\n\n![](https://cocoon-break.github.io/images/screenShot/iterm2_tmux_keymap.jpg)\n\n\n\n## vim 快捷键\n\nvim 的功能很强大，这里也不会深入讲解介绍，只是收集了一些快捷键，以便提供一些效率。\n\n- 查找\n  - 从光标处向下搜索：/ + 要查找的词\n  - 从光标处向上搜索：? + 要查找的词\n  - 快速回到页首：{\n  - 去页尾：}\n  - 回行首：shift + ^\n  - 回行末：shift + $\n- 编辑\n  - 删除光标出的字母：x\n  - 删除光标所在行：dd\n  - 删除单词包括空格：dw\n  - 回撤上一次编辑：u \n  - 取消撤回功能(对u功取消)：control + r\n  - 复制光标所在行：yy\n  - 复制n(数字)行：nyy\n  - 复制单词：yw\n  - 复制n个单词：nyw\n  - 复制光标所在位置到行末：y$\n  - 复制光标所在位置到行首：y^\n  - 粘贴：p\n\n更多vim 操作快捷键：[vim快捷键](http://www.lcode.cc/2017/04/10/vim-shortcut-key.html)\n\n这篇博客只是收集和介绍一些基础简单的快捷键，并没有很深入的去使用iterm2 ，tmux，vim，这些功能都很强大，想继续深入的同学可以去查查资料。","slug":"iterm,tmux,vim的常用快捷键","published":1,"updated":"2017-06-02T07:05:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fi9qlo0001lcc0l0v1uy7q","content":"<p>上一篇博客我们搭建了Mac下流畅的终端使用环境，这篇博客我们讲一些常用的快捷键来提高开发效率。废话不多说我们开始吧</p>\n<h2 id=\"iterm2-快捷\"><a href=\"#iterm2-快捷\" class=\"headerlink\" title=\"iterm2 快捷\"></a>iterm2 快捷</h2><p>通常我们在使用时，一个窗口总是感觉不够用，这时我们就需要多窗口，或者一个窗口需要多个屏。打开Iterm2，我们按下<code>command + t</code>，来新建窗口，通过<code>commmand + w</code>来关闭当前窗口，如果我们想要切换不同的窗口时，我们可以通过<code>command + 方向键</code> 或者<code>command +  数字</code>来切换窗口。<code>command + q</code> 退出应用程序</p>\n<p><strong>注：</strong> <code>command + t</code>或者<code>command + w</code>或者<code>command +q</code> 在很多应用都是通用的,比如在chrom 上，这几个快捷键，分别表示新建tab页，关闭tab页，推出chrom。但是chrom 切换tab是使用<code>command + option +方向键</code> 这个就和iterm2有区别了。</p>\n<p>在链接远程服务器时，我需要在同一窗口，查看不同服务器的状态，或者其他的一些信息。多窗口去查看就太麻烦 了。iterm 的分屏就能满足你的需要了。iterm2在分屏时，可以进行横向分屏和纵向分屏。纵向分屏使用<code>command + d</code>横向分屏使用<code>command + shift +d</code>，关闭当前分屏的快捷键也是使用<code>command + w</code>，切换各个分屏使用的是<code>command + option + 方向键</code>，以下是效果图</p>\n<a id=\"more\"></a>\n<p><img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_keymap.jpg\" alt=\"\"></p>\n<p>接下来就是在输入的时候，我们需要快速回到行首使用<code>ctrl + a</code>，快速回到行末使用<code>ctrl + e</code>，输入失误就需要删除错误了，<code>ctrl + u</code>是将当前行清空，使用 <code>ctrl + w</code>,删除光标之前的单词，使用 <code>ctrl + h</code>删除光标之前所有字符，使用<code>ctrl + k</code> 删除光标之后的所有字符。</p>\n<p>总结下 ：</p>\n<ul>\n<li>窗口和屏相关<ul>\n<li>新建窗口：command + t</li>\n<li>关闭窗口或者分屏：command + w</li>\n<li>切换标签：command +  左右方向键</li>\n<li>切换全屏：command + enter</li>\n<li>水平分屏：command + shift + d </li>\n<li>垂直分屏：command + d </li>\n<li>切换分屏：command + option + 方向键</li>\n</ul>\n</li>\n<li>编辑相关<ul>\n<li>清除当前行：ctrl + u</li>\n<li>删除光标之前的字符：ctrl + h</li>\n<li>删除光标之前的单词：ctrl + w</li>\n<li>删除光标到文本末尾：ctrl + k</li>\n<li>到行首： ctrl + a</li>\n<li>到行末：ctrl + e</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tmux-快捷键\"><a href=\"#tmux-快捷键\" class=\"headerlink\" title=\"tmux 快捷键\"></a>tmux 快捷键</h2><p> 打开iterm2 输入<code>tmux</code> 就进入了tmux的交互模式了，tmux 也有窗口和屏的概念这里就不再说明了。直接进入主题，快捷键的使用。</p>\n<p>在使用任何功能时我们都得先按下<code>ctrl + b</code> 然后<strong>松开</strong>，接着按下其他的键，比如我要新建一个窗口，先按下<code>ctrl + b</code>  然后在按下<code>c</code>,  这就完成了窗口的新建。</p>\n<ul>\n<li>快捷键都是先按下<code>ctrl + b</code>然后在按一下键<ul>\n<li>c        新建窗口</li>\n<li>&amp;             关闭当前窗口</li>\n<li>p              切换至上一个窗口</li>\n<li>n              切换至下一个窗口</li>\n<li>%              将当前窗口纵向分屏</li>\n<li>“                将当前窗口横向分屏</li>\n<li>方向键      在多个分屏中切换</li>\n<li>d                脱离当前tmux，在输入tmux attach 就能重新进入</li>\n</ul>\n</li>\n</ul>\n<p>这里只将一些基础的快捷键，更多快捷键和配置，请自行谷歌，百度，以下为tmux  分屏之后的效果图</p>\n<p><img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_tmux_keymap.jpg\" alt=\"\"></p>\n<h2 id=\"vim-快捷键\"><a href=\"#vim-快捷键\" class=\"headerlink\" title=\"vim 快捷键\"></a>vim 快捷键</h2><p>vim 的功能很强大，这里也不会深入讲解介绍，只是收集了一些快捷键，以便提供一些效率。</p>\n<ul>\n<li>查找<ul>\n<li>从光标处向下搜索：/ + 要查找的词</li>\n<li>从光标处向上搜索：? + 要查找的词</li>\n<li>快速回到页首：{</li>\n<li>去页尾：}</li>\n<li>回行首：shift + ^</li>\n<li>回行末：shift + $</li>\n</ul>\n</li>\n<li>编辑<ul>\n<li>删除光标出的字母：x</li>\n<li>删除光标所在行：dd</li>\n<li>删除单词包括空格：dw</li>\n<li>回撤上一次编辑：u </li>\n<li>取消撤回功能(对u功取消)：control + r</li>\n<li>复制光标所在行：yy</li>\n<li>复制n(数字)行：nyy</li>\n<li>复制单词：yw</li>\n<li>复制n个单词：nyw</li>\n<li>复制光标所在位置到行末：y$</li>\n<li>复制光标所在位置到行首：y^</li>\n<li>粘贴：p</li>\n</ul>\n</li>\n</ul>\n<p>更多vim 操作快捷键：<a href=\"http://www.lcode.cc/2017/04/10/vim-shortcut-key.html\" target=\"_blank\" rel=\"external\">vim快捷键</a></p>\n<p>这篇博客只是收集和介绍一些基础简单的快捷键，并没有很深入的去使用iterm2 ，tmux，vim，这些功能都很强大，想继续深入的同学可以去查查资料。</p>\n","site":{"data":{}},"excerpt":"<p>上一篇博客我们搭建了Mac下流畅的终端使用环境，这篇博客我们讲一些常用的快捷键来提高开发效率。废话不多说我们开始吧</p>\n<h2 id=\"iterm2-快捷\"><a href=\"#iterm2-快捷\" class=\"headerlink\" title=\"iterm2 快捷\"></a>iterm2 快捷</h2><p>通常我们在使用时，一个窗口总是感觉不够用，这时我们就需要多窗口，或者一个窗口需要多个屏。打开Iterm2，我们按下<code>command + t</code>，来新建窗口，通过<code>commmand + w</code>来关闭当前窗口，如果我们想要切换不同的窗口时，我们可以通过<code>command + 方向键</code> 或者<code>command +  数字</code>来切换窗口。<code>command + q</code> 退出应用程序</p>\n<p><strong>注：</strong> <code>command + t</code>或者<code>command + w</code>或者<code>command +q</code> 在很多应用都是通用的,比如在chrom 上，这几个快捷键，分别表示新建tab页，关闭tab页，推出chrom。但是chrom 切换tab是使用<code>command + option +方向键</code> 这个就和iterm2有区别了。</p>\n<p>在链接远程服务器时，我需要在同一窗口，查看不同服务器的状态，或者其他的一些信息。多窗口去查看就太麻烦 了。iterm 的分屏就能满足你的需要了。iterm2在分屏时，可以进行横向分屏和纵向分屏。纵向分屏使用<code>command + d</code>横向分屏使用<code>command + shift +d</code>，关闭当前分屏的快捷键也是使用<code>command + w</code>，切换各个分屏使用的是<code>command + option + 方向键</code>，以下是效果图</p>","more":"<p><img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_keymap.jpg\" alt=\"\"></p>\n<p>接下来就是在输入的时候，我们需要快速回到行首使用<code>ctrl + a</code>，快速回到行末使用<code>ctrl + e</code>，输入失误就需要删除错误了，<code>ctrl + u</code>是将当前行清空，使用 <code>ctrl + w</code>,删除光标之前的单词，使用 <code>ctrl + h</code>删除光标之前所有字符，使用<code>ctrl + k</code> 删除光标之后的所有字符。</p>\n<p>总结下 ：</p>\n<ul>\n<li>窗口和屏相关<ul>\n<li>新建窗口：command + t</li>\n<li>关闭窗口或者分屏：command + w</li>\n<li>切换标签：command +  左右方向键</li>\n<li>切换全屏：command + enter</li>\n<li>水平分屏：command + shift + d </li>\n<li>垂直分屏：command + d </li>\n<li>切换分屏：command + option + 方向键</li>\n</ul>\n</li>\n<li>编辑相关<ul>\n<li>清除当前行：ctrl + u</li>\n<li>删除光标之前的字符：ctrl + h</li>\n<li>删除光标之前的单词：ctrl + w</li>\n<li>删除光标到文本末尾：ctrl + k</li>\n<li>到行首： ctrl + a</li>\n<li>到行末：ctrl + e</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tmux-快捷键\"><a href=\"#tmux-快捷键\" class=\"headerlink\" title=\"tmux 快捷键\"></a>tmux 快捷键</h2><p> 打开iterm2 输入<code>tmux</code> 就进入了tmux的交互模式了，tmux 也有窗口和屏的概念这里就不再说明了。直接进入主题，快捷键的使用。</p>\n<p>在使用任何功能时我们都得先按下<code>ctrl + b</code> 然后<strong>松开</strong>，接着按下其他的键，比如我要新建一个窗口，先按下<code>ctrl + b</code>  然后在按下<code>c</code>,  这就完成了窗口的新建。</p>\n<ul>\n<li>快捷键都是先按下<code>ctrl + b</code>然后在按一下键<ul>\n<li>c        新建窗口</li>\n<li>&amp;             关闭当前窗口</li>\n<li>p              切换至上一个窗口</li>\n<li>n              切换至下一个窗口</li>\n<li>%              将当前窗口纵向分屏</li>\n<li>“                将当前窗口横向分屏</li>\n<li>方向键      在多个分屏中切换</li>\n<li>d                脱离当前tmux，在输入tmux attach 就能重新进入</li>\n</ul>\n</li>\n</ul>\n<p>这里只将一些基础的快捷键，更多快捷键和配置，请自行谷歌，百度，以下为tmux  分屏之后的效果图</p>\n<p><img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_tmux_keymap.jpg\" alt=\"\"></p>\n<h2 id=\"vim-快捷键\"><a href=\"#vim-快捷键\" class=\"headerlink\" title=\"vim 快捷键\"></a>vim 快捷键</h2><p>vim 的功能很强大，这里也不会深入讲解介绍，只是收集了一些快捷键，以便提供一些效率。</p>\n<ul>\n<li>查找<ul>\n<li>从光标处向下搜索：/ + 要查找的词</li>\n<li>从光标处向上搜索：? + 要查找的词</li>\n<li>快速回到页首：{</li>\n<li>去页尾：}</li>\n<li>回行首：shift + ^</li>\n<li>回行末：shift + $</li>\n</ul>\n</li>\n<li>编辑<ul>\n<li>删除光标出的字母：x</li>\n<li>删除光标所在行：dd</li>\n<li>删除单词包括空格：dw</li>\n<li>回撤上一次编辑：u </li>\n<li>取消撤回功能(对u功取消)：control + r</li>\n<li>复制光标所在行：yy</li>\n<li>复制n(数字)行：nyy</li>\n<li>复制单词：yw</li>\n<li>复制n个单词：nyw</li>\n<li>复制光标所在位置到行末：y$</li>\n<li>复制光标所在位置到行首：y^</li>\n<li>粘贴：p</li>\n</ul>\n</li>\n</ul>\n<p>更多vim 操作快捷键：<a href=\"http://www.lcode.cc/2017/04/10/vim-shortcut-key.html\" target=\"_blank\" rel=\"external\">vim快捷键</a></p>\n<p>这篇博客只是收集和介绍一些基础简单的快捷键，并没有很深入的去使用iterm2 ，tmux，vim，这些功能都很强大，想继续深入的同学可以去查查资料。</p>"},{"title":"Linux下打RPM包","date":"2017-05-15T06:34:12.000Z","_content":"\n\n\n## 工具准备\n\n1. 安装rpmtools工具\n\n   ```sh\n   yum install rpmdevtools\n   ```\n\n2. 创建文件夹\n\n   ```sh\n   mkdir -pv ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}\n   ```\n\n## 配置文件及源码准备\n\n1. spec脚本文件创建，在SPECS文件夹下创建一个.spec文件 如h5-megvii.spec\n\n   ```sh\n   Name:           h5-megvii\n   License:        copyright\n   Version:        1.0\n   Release:        1%{?dist}\n   Summary:        HTML FaceID Server\n   AutoReqProv:    no\n\n   Group:          Megvii\n   URL:            http://www.megvii.com\n   Source:         %{name}-%{version}.tar.gz\n   BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root\n\n   %description\n   The rpm version of html-megvii package\n\n   %prep\n   %setup -q\n\n   %build\n   %install\n   rm -rf $RPM_BUILD_ROOT\n   mkdir -p $RPM_BUILD_ROOT\n   cp -a * $RPM_BUILD_ROOT\n\n   %clean\n   rm -rf $RPM_BUILD_ROOT\n\n   %files\n   %defattr(-,root,root,-)\n   /opt/megvii\n   ```\n\n   <!-- more -->\n\n   spec脚本中各个配置项说明\n\n   ```sh\n   Name: 软件包的名称，后面可使用%{name}的方式引用\n   License: 软件授权方式\n   Version: 软件的实际版本号,后面可使用%{version}引用\n   Release: 发布序列号,标明第几次打包，后面可使用%{release}引用\n   Summary: 软件包的内容概要\n   AutoReqProv: 此域用于指示RPM是否自动查找软件所需的共享库与其提供的共享库\n\n   Group: 软件分组\n   URL: 软件的主页\n   Source: 源代码包，可以带多个用Source1、Source2等源，后面也可以用%{source1}、%{source2}引用\n   BuildRoot: 这个是安装或编译时使用的“虚拟目录”,一般定义为:%{_tmppath}/%{name}-%{version}-%{release}-root\n\n   %description 软件的详细说明\n\n   %prep 预处理脚本\n   %setup 把源码包解压并放好,将SOURCES下的tar.gz 文件解压至BUILD文件夹下\n\n   %build 开始构建包\n   %install 开始把软件安装到虚拟的根目录中\n\n   %clean 清理临时文件\n\n   %files 定义那些文件或目录会放入rpm中,files下的文件，必须是tar包解压开存在的文件\n   %defattr (-,root,root) 指定包装文件的属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755\n   ```\n\n   **注1:**\tSOURCES下的tar.gz包的文件名必须和SPECS下 xxx.specs  文件中的Source 保持一致。\n\n   **注2:**\tSOURCES下的tar.gz包**解压开的文件夹**名称也应为SPECS下 xxx.specs  文件中的Source 对应的名称(无须tar.gz)。\n\n   **注3:**\t%files标签下的文件路径必须存在，如/opt/megvii ,在tar.gz 解压开的文件路径是存在的\n\n2. 添加源码文件\n\n   ```sh\n   tar czvf h5-megvii-1.0.tar.gz h5-megvii-1.0\n   cp h5-megvii-1.0.tar.gz rpmbuild/SOURCES/\n   ```\n\n## 执行打包命令\n\n```sh\nrpmbuild --nodeps -ba rpmbuild/SPECS/h5-megvii.spec\n```\n\n打完包之后的rpm包文件位置在`rpmbuild/RPMS`文件夹中","source":"_posts/Linux下打RPM包.md","raw":"---\ntitle: Linux下打RPM包\ndate: 2017-05-15 14:34:12\ntags: Linux\n---\n\n\n\n## 工具准备\n\n1. 安装rpmtools工具\n\n   ```sh\n   yum install rpmdevtools\n   ```\n\n2. 创建文件夹\n\n   ```sh\n   mkdir -pv ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}\n   ```\n\n## 配置文件及源码准备\n\n1. spec脚本文件创建，在SPECS文件夹下创建一个.spec文件 如h5-megvii.spec\n\n   ```sh\n   Name:           h5-megvii\n   License:        copyright\n   Version:        1.0\n   Release:        1%{?dist}\n   Summary:        HTML FaceID Server\n   AutoReqProv:    no\n\n   Group:          Megvii\n   URL:            http://www.megvii.com\n   Source:         %{name}-%{version}.tar.gz\n   BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root\n\n   %description\n   The rpm version of html-megvii package\n\n   %prep\n   %setup -q\n\n   %build\n   %install\n   rm -rf $RPM_BUILD_ROOT\n   mkdir -p $RPM_BUILD_ROOT\n   cp -a * $RPM_BUILD_ROOT\n\n   %clean\n   rm -rf $RPM_BUILD_ROOT\n\n   %files\n   %defattr(-,root,root,-)\n   /opt/megvii\n   ```\n\n   <!-- more -->\n\n   spec脚本中各个配置项说明\n\n   ```sh\n   Name: 软件包的名称，后面可使用%{name}的方式引用\n   License: 软件授权方式\n   Version: 软件的实际版本号,后面可使用%{version}引用\n   Release: 发布序列号,标明第几次打包，后面可使用%{release}引用\n   Summary: 软件包的内容概要\n   AutoReqProv: 此域用于指示RPM是否自动查找软件所需的共享库与其提供的共享库\n\n   Group: 软件分组\n   URL: 软件的主页\n   Source: 源代码包，可以带多个用Source1、Source2等源，后面也可以用%{source1}、%{source2}引用\n   BuildRoot: 这个是安装或编译时使用的“虚拟目录”,一般定义为:%{_tmppath}/%{name}-%{version}-%{release}-root\n\n   %description 软件的详细说明\n\n   %prep 预处理脚本\n   %setup 把源码包解压并放好,将SOURCES下的tar.gz 文件解压至BUILD文件夹下\n\n   %build 开始构建包\n   %install 开始把软件安装到虚拟的根目录中\n\n   %clean 清理临时文件\n\n   %files 定义那些文件或目录会放入rpm中,files下的文件，必须是tar包解压开存在的文件\n   %defattr (-,root,root) 指定包装文件的属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755\n   ```\n\n   **注1:**\tSOURCES下的tar.gz包的文件名必须和SPECS下 xxx.specs  文件中的Source 保持一致。\n\n   **注2:**\tSOURCES下的tar.gz包**解压开的文件夹**名称也应为SPECS下 xxx.specs  文件中的Source 对应的名称(无须tar.gz)。\n\n   **注3:**\t%files标签下的文件路径必须存在，如/opt/megvii ,在tar.gz 解压开的文件路径是存在的\n\n2. 添加源码文件\n\n   ```sh\n   tar czvf h5-megvii-1.0.tar.gz h5-megvii-1.0\n   cp h5-megvii-1.0.tar.gz rpmbuild/SOURCES/\n   ```\n\n## 执行打包命令\n\n```sh\nrpmbuild --nodeps -ba rpmbuild/SPECS/h5-megvii.spec\n```\n\n打完包之后的rpm包文件位置在`rpmbuild/RPMS`文件夹中","slug":"Linux下打RPM包","published":1,"updated":"2017-05-27T15:01:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fi9qlt0003lcc0bnr0cgoh","content":"<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><ol>\n<li><p>安装rpmtools工具</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install rpmdevtools</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建文件夹</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -pv ~/rpmbuild/&#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"配置文件及源码准备\"><a href=\"#配置文件及源码准备\" class=\"headerlink\" title=\"配置文件及源码准备\"></a>配置文件及源码准备</h2><ol>\n<li><p>spec脚本文件创建，在SPECS文件夹下创建一个.spec文件 如h5-megvii.spec</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">Name:           h5-megvii</div><div class=\"line\">License:        copyright</div><div class=\"line\">Version:        1.0</div><div class=\"line\">Release:        1%&#123;?dist&#125;</div><div class=\"line\">Summary:        HTML FaceID Server</div><div class=\"line\">AutoReqProv:    no</div><div class=\"line\"></div><div class=\"line\">Group:          Megvii</div><div class=\"line\">URL:            http://www.megvii.com</div><div class=\"line\">Source:         %&#123;name&#125;-%&#123;version&#125;.tar.gz</div><div class=\"line\">BuildRoot:      %&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-root</div><div class=\"line\"></div><div class=\"line\">%description</div><div class=\"line\">The rpm version of html-megvii package</div><div class=\"line\"></div><div class=\"line\">%prep</div><div class=\"line\">%setup -q</div><div class=\"line\"></div><div class=\"line\">%build</div><div class=\"line\">%install</div><div class=\"line\">rm -rf <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\">mkdir -p <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\">cp <span class=\"_\">-a</span> * <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\"></div><div class=\"line\">%clean</div><div class=\"line\">rm -rf <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\"></div><div class=\"line\">%files</div><div class=\"line\">%defattr(-,root,root,-)</div><div class=\"line\">/opt/megvii</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>spec脚本中各个配置项说明</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">Name: 软件包的名称，后面可使用%&#123;name&#125;的方式引用</div><div class=\"line\">License: 软件授权方式</div><div class=\"line\">Version: 软件的实际版本号,后面可使用%&#123;version&#125;引用</div><div class=\"line\">Release: 发布序列号,标明第几次打包，后面可使用%&#123;release&#125;引用</div><div class=\"line\">Summary: 软件包的内容概要</div><div class=\"line\">AutoReqProv: 此域用于指示RPM是否自动查找软件所需的共享库与其提供的共享库</div><div class=\"line\"></div><div class=\"line\">Group: 软件分组</div><div class=\"line\">URL: 软件的主页</div><div class=\"line\">Source: 源代码包，可以带多个用Source1、Source2等源，后面也可以用%&#123;<span class=\"built_in\">source</span>1&#125;、%&#123;<span class=\"built_in\">source</span>2&#125;引用</div><div class=\"line\">BuildRoot: 这个是安装或编译时使用的“虚拟目录”,一般定义为:%&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-root</div><div class=\"line\"></div><div class=\"line\">%description 软件的详细说明</div><div class=\"line\"></div><div class=\"line\">%prep 预处理脚本</div><div class=\"line\">%setup 把源码包解压并放好,将SOURCES下的tar.gz 文件解压至BUILD文件夹下</div><div class=\"line\"></div><div class=\"line\">%build 开始构建包</div><div class=\"line\">%install 开始把软件安装到虚拟的根目录中</div><div class=\"line\"></div><div class=\"line\">%clean 清理临时文件</div><div class=\"line\"></div><div class=\"line\">%files 定义那些文件或目录会放入rpm中,files下的文件，必须是tar包解压开存在的文件</div><div class=\"line\">%defattr (-,root,root) 指定包装文件的属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755</div></pre></td></tr></table></figure>\n<p><strong>注1:</strong>    SOURCES下的tar.gz包的文件名必须和SPECS下 xxx.specs  文件中的Source 保持一致。</p>\n<p><strong>注2:</strong>    SOURCES下的tar.gz包<strong>解压开的文件夹</strong>名称也应为SPECS下 xxx.specs  文件中的Source 对应的名称(无须tar.gz)。</p>\n<p><strong>注3:</strong>    %files标签下的文件路径必须存在，如/opt/megvii ,在tar.gz 解压开的文件路径是存在的</p>\n</li>\n<li><p>添加源码文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar czvf h5-megvii-1.0.tar.gz h5-megvii-1.0</div><div class=\"line\">cp h5-megvii-1.0.tar.gz rpmbuild/SOURCES/</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"执行打包命令\"><a href=\"#执行打包命令\" class=\"headerlink\" title=\"执行打包命令\"></a>执行打包命令</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpmbuild --nodeps -ba rpmbuild/SPECS/h5-megvii.spec</div></pre></td></tr></table></figure>\n<p>打完包之后的rpm包文件位置在<code>rpmbuild/RPMS</code>文件夹中</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2><ol>\n<li><p>安装rpmtools工具</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install rpmdevtools</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建文件夹</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -pv ~/rpmbuild/&#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"配置文件及源码准备\"><a href=\"#配置文件及源码准备\" class=\"headerlink\" title=\"配置文件及源码准备\"></a>配置文件及源码准备</h2><ol>\n<li><p>spec脚本文件创建，在SPECS文件夹下创建一个.spec文件 如h5-megvii.spec</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">Name:           h5-megvii</div><div class=\"line\">License:        copyright</div><div class=\"line\">Version:        1.0</div><div class=\"line\">Release:        1%&#123;?dist&#125;</div><div class=\"line\">Summary:        HTML FaceID Server</div><div class=\"line\">AutoReqProv:    no</div><div class=\"line\"></div><div class=\"line\">Group:          Megvii</div><div class=\"line\">URL:            http://www.megvii.com</div><div class=\"line\">Source:         %&#123;name&#125;-%&#123;version&#125;.tar.gz</div><div class=\"line\">BuildRoot:      %&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-root</div><div class=\"line\"></div><div class=\"line\">%description</div><div class=\"line\">The rpm version of html-megvii package</div><div class=\"line\"></div><div class=\"line\">%prep</div><div class=\"line\">%setup -q</div><div class=\"line\"></div><div class=\"line\">%build</div><div class=\"line\">%install</div><div class=\"line\">rm -rf <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\">mkdir -p <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\">cp <span class=\"_\">-a</span> * <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\"></div><div class=\"line\">%clean</div><div class=\"line\">rm -rf <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\"></div><div class=\"line\">%files</div><div class=\"line\">%defattr(-,root,root,-)</div><div class=\"line\">/opt/megvii</div></pre></td></tr></table></figure>","more":"<p>spec脚本中各个配置项说明</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">Name: 软件包的名称，后面可使用%&#123;name&#125;的方式引用</div><div class=\"line\">License: 软件授权方式</div><div class=\"line\">Version: 软件的实际版本号,后面可使用%&#123;version&#125;引用</div><div class=\"line\">Release: 发布序列号,标明第几次打包，后面可使用%&#123;release&#125;引用</div><div class=\"line\">Summary: 软件包的内容概要</div><div class=\"line\">AutoReqProv: 此域用于指示RPM是否自动查找软件所需的共享库与其提供的共享库</div><div class=\"line\"></div><div class=\"line\">Group: 软件分组</div><div class=\"line\">URL: 软件的主页</div><div class=\"line\">Source: 源代码包，可以带多个用Source1、Source2等源，后面也可以用%&#123;<span class=\"built_in\">source</span>1&#125;、%&#123;<span class=\"built_in\">source</span>2&#125;引用</div><div class=\"line\">BuildRoot: 这个是安装或编译时使用的“虚拟目录”,一般定义为:%&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-root</div><div class=\"line\"></div><div class=\"line\">%description 软件的详细说明</div><div class=\"line\"></div><div class=\"line\">%prep 预处理脚本</div><div class=\"line\">%setup 把源码包解压并放好,将SOURCES下的tar.gz 文件解压至BUILD文件夹下</div><div class=\"line\"></div><div class=\"line\">%build 开始构建包</div><div class=\"line\">%install 开始把软件安装到虚拟的根目录中</div><div class=\"line\"></div><div class=\"line\">%clean 清理临时文件</div><div class=\"line\"></div><div class=\"line\">%files 定义那些文件或目录会放入rpm中,files下的文件，必须是tar包解压开存在的文件</div><div class=\"line\">%defattr (-,root,root) 指定包装文件的属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755</div></pre></td></tr></table></figure>\n<p><strong>注1:</strong>    SOURCES下的tar.gz包的文件名必须和SPECS下 xxx.specs  文件中的Source 保持一致。</p>\n<p><strong>注2:</strong>    SOURCES下的tar.gz包<strong>解压开的文件夹</strong>名称也应为SPECS下 xxx.specs  文件中的Source 对应的名称(无须tar.gz)。</p>\n<p><strong>注3:</strong>    %files标签下的文件路径必须存在，如/opt/megvii ,在tar.gz 解压开的文件路径是存在的</p>\n</li>\n<li><p>添加源码文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar czvf h5-megvii-1.0.tar.gz h5-megvii-1.0</div><div class=\"line\">cp h5-megvii-1.0.tar.gz rpmbuild/SOURCES/</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"执行打包命令\"><a href=\"#执行打包命令\" class=\"headerlink\" title=\"执行打包命令\"></a>执行打包命令</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpmbuild --nodeps -ba rpmbuild/SPECS/h5-megvii.spec</div></pre></td></tr></table></figure>\n<p>打完包之后的rpm包文件位置在<code>rpmbuild/RPMS</code>文件夹中</p>"},{"title":"ffmpeg简易介绍","date":"2017-05-22T06:34:12.000Z","_content":"\n## 媒体文件结构\n\n一个媒体文件并不像许多人想象的那样，是将媒体内容编码起来直接作为文件的。实际上，它通常是由多个不同种类的媒体流（ Stream ）组成，再以特定的封装格式封装起来的。\n\n比较常见的媒体流就是视频流跟音频流了，顾名思义，视频流存储的就是视频信息，音频流存储的就是音频信息。一个视频流或者音频流的内容，就是以特定的编码格式所存储的视频或音频信息。\n\n**一个文件的里面的媒体流所采用的编码格式跟这个文件的后缀名并没有完全的必然联系。** **文件的后缀名通常就代表这个文件的封装格式。**\n\n## ffmpeg 安装\n\n自行下载使用系统安装对应的安装包[官网下载](https://ffmpeg.org/download.html)\n\n以下使用的平台都为Mac系统下\n\n<!-- more -->\n\n## 开始使用\n\n1. 打开终端，查看ffmpeg帮助文档，简要了解ffmpeg的使用\n\n   ```ssh\n   ffmpeg -help\n   ```\n\n   ```ssh\n   ffmpeg version 3.3 Copyright (c) 2000-2017 the FFmpeg developers\n     built with Apple LLVM version 8.1.0 (clang-802.0.41)\n     configuration: --prefix=/usr/local/Cellar/ffmpeg/3.3 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-libmp3lame --enable-libx264 --enable-libxvid --enable-opencl --disable-lzma --enable-vda\n     libavutil      55. 58.100 / 55. 58.100\n     libavcodec     57. 89.100 / 57. 89.100\n     libavformat    57. 71.100 / 57. 71.100\n     libavdevice    57.  6.100 / 57.  6.100\n     libavfilter     6. 82.100 /  6. 82.100\n     libavresample   3.  5.  0 /  3.  5.  0\n     libswscale      4.  6.100 /  4.  6.100\n     libswresample   2.  7.100 /  2.  7.100\n     libpostproc    54.  5.100 / 54.  5.100\n   Hyper fast Audio and Video encoder\n   usage: ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}...\n   ```\n\n   重点是关注 usage: ffmpeg [options][[infile options] -i infile]... {[outfile options] outfile}… 这句是说ffmpeg 的主要用法\n\n   ​\n\n2. 查看ffmpeg 支持的格式\n\n   查看封装格式，包括音频，视频等封装格式\n\n   ```ssh\n   ffmpeg -formats\n   ```\n\n   查看编解码器包括音频，视频等封装格式\n\n   ```ssh\n   ffmpeg -codecs\n   ```\n\n3. 进行格式转换\n\n   ```ssh\n   ffmpeg -i a.mp4 b.mkv\n   ```\n\n   这里是将mp4格式的视频转换成mkv格式。\n\n   **注：** 查看默认编码格式，以下的Matroska也就是指 mkv\n\n   ```code\n   ffmpeg -help muxer=Matroska\n\n   #以下为摘要信息，从中可以看出默认的视频编码为h264,音频编码为ac3,字幕流编码为ass，部分格式视频不支持字幕流\n   Muxer matroska [Matroska]:\n       Common extensions: mkv.\n       Mime type: video/x-matroska.\n       Default video codec: h264.\n       Default audio codec: ac3.\n       Default subtitle codec: ass.\n   ```\n\n4. 指定编码器进行转换\n\n   ```sh\n   ffmpeg -i a.mp4 -c:v hevc -c:a aac b.mkv\n   ```\n\n   **注：** `-c:v` 可以用`-vcodec`替换，当它们的值为copy时，就表示编码格式不进行转换\n\n5. 在转换时可以进行的调整\n\n   在 `ffmpeg -help` 时可以看到有一些和音频，视频，字幕相关的选项\n\n   ```ssh\n   Video options:\n   -vframes number     set the number of video frames to output\n   -r rate             set frame rate (Hz value, fraction or abbreviation)\n   -s size             set frame size (WxH or abbreviation)\n   -aspect aspect      set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)\n   -bits_per_raw_sample number  set the number of bits per raw sample\n   -vn                 disable video\n   -vcodec codec       force video codec ('copy' to copy stream)\n   -timecode hh:mm:ss[:;.]ff  set initial TimeCode value.\n   -pass n             select the pass number (1 to 3)\n   -vf filter_graph    set video filters\n   -ab bitrate         audio bitrate (please use -b:a)\n   -b bitrate          video bitrate (please use -b:v)\n   -dn                 disable data\n\n   Audio options:\n   -aframes number     set the number of audio frames to output\n   -aq quality         set audio quality (codec-specific)\n   -ar rate            set audio sampling rate (in Hz)\n   -ac channels        set number of audio channels\n   -an                 disable audio\n   -acodec codec       force audio codec ('copy' to copy stream)\n   -vol volume         change audio volume (256=normal)\n   -af filter_graph    set audio filters\n\n   Subtitle options:\n   -s size             set frame size (WxH or abbreviation)\n   -sn                 disable subtitle\n   -scodec codec       force subtitle codec ('copy' to copy stream)\n   -stag fourcc/tag    force subtitle tag/fourcc\n   -fix_sub_duration   fix subtitles duration\n   -canvas_size size   set canvas size (WxH or abbreviation)\n   -spre preset        set the subtitle options to the indicated preset\n   ```\n\n   当然还有对整个文件进行调整的参数\n\n   ```ssh\n   Per-file main options:\n   -f fmt              force format\n   -c codec            codec name\n   -codec codec        codec name\n   -pre preset         preset name\n   -map_metadata outfile[,metadata]:infile[,metadata]  set metadata information of outfile from infile\n   -t duration         record or transcode \"duration\" seconds of audio/video\n   -to time_stop       record or transcode stop time\n   -fs limit_size      set the limit file size in bytes\n   -ss time_off        set the start time offset\n   -sseof time_off     set the start time offset relative to EOF\n   -seek_timestamp     enable/disable seeking by timestamp with -ss\n   -timestamp time     set the recording timestamp ('now' to set the current time)\n   -metadata string=string  add metadata\n   -program title=string:st=number...  add program with specified streams\n   -target type        specify target file type (\"vcd\", \"svcd\", \"dvd\", \"dv\" or \"dv50\" with optional prefixes \"pal-\", \"ntsc-\" or \"film-\")\n   -apad               audio pad\n   -frames number      set the number of frames to output\n   -filter filter_graph  set stream filtergraph\n   -filter_script filename  read stream filtergraph description from a file\n   -reinit_filter      reinit filtergraph on input parameter changes\n   -discard            discard\n   -disposition        disposition\n   ```\n\n   [文章参考](https://github.com/FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh) \n\n   ​\n\n\n","source":"_posts/ffmpeg简易介绍.md","raw":"---\ntitle: ffmpeg简易介绍\ndate: 2017-05-22 14:34:12\ntags: \n\n---\n\n## 媒体文件结构\n\n一个媒体文件并不像许多人想象的那样，是将媒体内容编码起来直接作为文件的。实际上，它通常是由多个不同种类的媒体流（ Stream ）组成，再以特定的封装格式封装起来的。\n\n比较常见的媒体流就是视频流跟音频流了，顾名思义，视频流存储的就是视频信息，音频流存储的就是音频信息。一个视频流或者音频流的内容，就是以特定的编码格式所存储的视频或音频信息。\n\n**一个文件的里面的媒体流所采用的编码格式跟这个文件的后缀名并没有完全的必然联系。** **文件的后缀名通常就代表这个文件的封装格式。**\n\n## ffmpeg 安装\n\n自行下载使用系统安装对应的安装包[官网下载](https://ffmpeg.org/download.html)\n\n以下使用的平台都为Mac系统下\n\n<!-- more -->\n\n## 开始使用\n\n1. 打开终端，查看ffmpeg帮助文档，简要了解ffmpeg的使用\n\n   ```ssh\n   ffmpeg -help\n   ```\n\n   ```ssh\n   ffmpeg version 3.3 Copyright (c) 2000-2017 the FFmpeg developers\n     built with Apple LLVM version 8.1.0 (clang-802.0.41)\n     configuration: --prefix=/usr/local/Cellar/ffmpeg/3.3 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-libmp3lame --enable-libx264 --enable-libxvid --enable-opencl --disable-lzma --enable-vda\n     libavutil      55. 58.100 / 55. 58.100\n     libavcodec     57. 89.100 / 57. 89.100\n     libavformat    57. 71.100 / 57. 71.100\n     libavdevice    57.  6.100 / 57.  6.100\n     libavfilter     6. 82.100 /  6. 82.100\n     libavresample   3.  5.  0 /  3.  5.  0\n     libswscale      4.  6.100 /  4.  6.100\n     libswresample   2.  7.100 /  2.  7.100\n     libpostproc    54.  5.100 / 54.  5.100\n   Hyper fast Audio and Video encoder\n   usage: ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}...\n   ```\n\n   重点是关注 usage: ffmpeg [options][[infile options] -i infile]... {[outfile options] outfile}… 这句是说ffmpeg 的主要用法\n\n   ​\n\n2. 查看ffmpeg 支持的格式\n\n   查看封装格式，包括音频，视频等封装格式\n\n   ```ssh\n   ffmpeg -formats\n   ```\n\n   查看编解码器包括音频，视频等封装格式\n\n   ```ssh\n   ffmpeg -codecs\n   ```\n\n3. 进行格式转换\n\n   ```ssh\n   ffmpeg -i a.mp4 b.mkv\n   ```\n\n   这里是将mp4格式的视频转换成mkv格式。\n\n   **注：** 查看默认编码格式，以下的Matroska也就是指 mkv\n\n   ```code\n   ffmpeg -help muxer=Matroska\n\n   #以下为摘要信息，从中可以看出默认的视频编码为h264,音频编码为ac3,字幕流编码为ass，部分格式视频不支持字幕流\n   Muxer matroska [Matroska]:\n       Common extensions: mkv.\n       Mime type: video/x-matroska.\n       Default video codec: h264.\n       Default audio codec: ac3.\n       Default subtitle codec: ass.\n   ```\n\n4. 指定编码器进行转换\n\n   ```sh\n   ffmpeg -i a.mp4 -c:v hevc -c:a aac b.mkv\n   ```\n\n   **注：** `-c:v` 可以用`-vcodec`替换，当它们的值为copy时，就表示编码格式不进行转换\n\n5. 在转换时可以进行的调整\n\n   在 `ffmpeg -help` 时可以看到有一些和音频，视频，字幕相关的选项\n\n   ```ssh\n   Video options:\n   -vframes number     set the number of video frames to output\n   -r rate             set frame rate (Hz value, fraction or abbreviation)\n   -s size             set frame size (WxH or abbreviation)\n   -aspect aspect      set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)\n   -bits_per_raw_sample number  set the number of bits per raw sample\n   -vn                 disable video\n   -vcodec codec       force video codec ('copy' to copy stream)\n   -timecode hh:mm:ss[:;.]ff  set initial TimeCode value.\n   -pass n             select the pass number (1 to 3)\n   -vf filter_graph    set video filters\n   -ab bitrate         audio bitrate (please use -b:a)\n   -b bitrate          video bitrate (please use -b:v)\n   -dn                 disable data\n\n   Audio options:\n   -aframes number     set the number of audio frames to output\n   -aq quality         set audio quality (codec-specific)\n   -ar rate            set audio sampling rate (in Hz)\n   -ac channels        set number of audio channels\n   -an                 disable audio\n   -acodec codec       force audio codec ('copy' to copy stream)\n   -vol volume         change audio volume (256=normal)\n   -af filter_graph    set audio filters\n\n   Subtitle options:\n   -s size             set frame size (WxH or abbreviation)\n   -sn                 disable subtitle\n   -scodec codec       force subtitle codec ('copy' to copy stream)\n   -stag fourcc/tag    force subtitle tag/fourcc\n   -fix_sub_duration   fix subtitles duration\n   -canvas_size size   set canvas size (WxH or abbreviation)\n   -spre preset        set the subtitle options to the indicated preset\n   ```\n\n   当然还有对整个文件进行调整的参数\n\n   ```ssh\n   Per-file main options:\n   -f fmt              force format\n   -c codec            codec name\n   -codec codec        codec name\n   -pre preset         preset name\n   -map_metadata outfile[,metadata]:infile[,metadata]  set metadata information of outfile from infile\n   -t duration         record or transcode \"duration\" seconds of audio/video\n   -to time_stop       record or transcode stop time\n   -fs limit_size      set the limit file size in bytes\n   -ss time_off        set the start time offset\n   -sseof time_off     set the start time offset relative to EOF\n   -seek_timestamp     enable/disable seeking by timestamp with -ss\n   -timestamp time     set the recording timestamp ('now' to set the current time)\n   -metadata string=string  add metadata\n   -program title=string:st=number...  add program with specified streams\n   -target type        specify target file type (\"vcd\", \"svcd\", \"dvd\", \"dv\" or \"dv50\" with optional prefixes \"pal-\", \"ntsc-\" or \"film-\")\n   -apad               audio pad\n   -frames number      set the number of frames to output\n   -filter filter_graph  set stream filtergraph\n   -filter_script filename  read stream filtergraph description from a file\n   -reinit_filter      reinit filtergraph on input parameter changes\n   -discard            discard\n   -disposition        disposition\n   ```\n\n   [文章参考](https://github.com/FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh) \n\n   ​\n\n\n","slug":"ffmpeg简易介绍","published":1,"updated":"2017-05-27T15:08:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fi9qlv0004lcc0en8knq7l","content":"<h2 id=\"媒体文件结构\"><a href=\"#媒体文件结构\" class=\"headerlink\" title=\"媒体文件结构\"></a>媒体文件结构</h2><p>一个媒体文件并不像许多人想象的那样，是将媒体内容编码起来直接作为文件的。实际上，它通常是由多个不同种类的媒体流（ Stream ）组成，再以特定的封装格式封装起来的。</p>\n<p>比较常见的媒体流就是视频流跟音频流了，顾名思义，视频流存储的就是视频信息，音频流存储的就是音频信息。一个视频流或者音频流的内容，就是以特定的编码格式所存储的视频或音频信息。</p>\n<p><strong>一个文件的里面的媒体流所采用的编码格式跟这个文件的后缀名并没有完全的必然联系。</strong> <strong>文件的后缀名通常就代表这个文件的封装格式。</strong></p>\n<h2 id=\"ffmpeg-安装\"><a href=\"#ffmpeg-安装\" class=\"headerlink\" title=\"ffmpeg 安装\"></a>ffmpeg 安装</h2><p>自行下载使用系统安装对应的安装包<a href=\"https://ffmpeg.org/download.html\" target=\"_blank\" rel=\"external\">官网下载</a></p>\n<p>以下使用的平台都为Mac系统下</p>\n<a id=\"more\"></a>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><ol>\n<li><p>打开终端，查看ffmpeg帮助文档，简要了解ffmpeg的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -help</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg version 3.3 Copyright (c) 2000-2017 the FFmpeg developers</div><div class=\"line\">  built with Apple LLVM version 8.1.0 (clang-802.0.41)</div><div class=\"line\">  configuration: --prefix=/usr/local/Cellar/ffmpeg/3.3 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-libmp3lame --enable-libx264 --enable-libxvid --enable-opencl --disable-lzma --enable-vda</div><div class=\"line\">  libavutil      55. 58.100 / 55. 58.100</div><div class=\"line\">  libavcodec     57. 89.100 / 57. 89.100</div><div class=\"line\">  libavformat    57. 71.100 / 57. 71.100</div><div class=\"line\">  libavdevice    57.  6.100 / 57.  6.100</div><div class=\"line\">  libavfilter     6. 82.100 /  6. 82.100</div><div class=\"line\">  libavresample   3.  5.  0 /  3.  5.  0</div><div class=\"line\">  libswscale      4.  6.100 /  4.  6.100</div><div class=\"line\">  libswresample   2.  7.100 /  2.  7.100</div><div class=\"line\">  libpostproc    54.  5.100 / 54.  5.100</div><div class=\"line\">Hyper fast Audio and Video encoder</div><div class=\"line\">usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</div></pre></td></tr></table></figure>\n<p>重点是关注 usage: ffmpeg [options][[infile options] -i infile]… {[outfile options] outfile}… 这句是说ffmpeg 的主要用法</p>\n<p>​</p>\n</li>\n<li><p>查看ffmpeg 支持的格式</p>\n<p>查看封装格式，包括音频，视频等封装格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -formats</div></pre></td></tr></table></figure>\n<p>查看编解码器包括音频，视频等封装格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -codecs</div></pre></td></tr></table></figure>\n</li>\n<li><p>进行格式转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -i a.mp4 b.mkv</div></pre></td></tr></table></figure>\n<p>这里是将mp4格式的视频转换成mkv格式。</p>\n<p><strong>注：</strong> 查看默认编码格式，以下的Matroska也就是指 mkv</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -help muxer=Matroska</div><div class=\"line\"></div><div class=\"line\">#以下为摘要信息，从中可以看出默认的视频编码为h264,音频编码为ac3,字幕流编码为ass，部分格式视频不支持字幕流</div><div class=\"line\">Muxer matroska [Matroska]:</div><div class=\"line\">    Common extensions: mkv.</div><div class=\"line\">    Mime type: video/x-matroska.</div><div class=\"line\">    Default video codec: h264.</div><div class=\"line\">    Default audio codec: ac3.</div><div class=\"line\">    Default subtitle codec: ass.</div></pre></td></tr></table></figure>\n</li>\n<li><p>指定编码器进行转换</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -i a.mp4 -c:v hevc -c:a aac b.mkv</div></pre></td></tr></table></figure>\n<p><strong>注：</strong> <code>-c:v</code> 可以用<code>-vcodec</code>替换，当它们的值为copy时，就表示编码格式不进行转换</p>\n</li>\n<li><p>在转换时可以进行的调整</p>\n<p>在 <code>ffmpeg -help</code> 时可以看到有一些和音频，视频，字幕相关的选项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">Video options:</div><div class=\"line\">-vframes number     set the number of video frames to output</div><div class=\"line\">-r rate             set frame rate (Hz value, fraction or abbreviation)</div><div class=\"line\">-s size             set frame size (WxH or abbreviation)</div><div class=\"line\">-aspect aspect      set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)</div><div class=\"line\">-bits_per_raw_sample number  set the number of bits per raw sample</div><div class=\"line\">-vn                 disable video</div><div class=\"line\">-vcodec codec       force video codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-timecode hh:mm:ss[:;.]ff  set initial TimeCode value.</div><div class=\"line\">-pass n             select the pass number (1 to 3)</div><div class=\"line\">-vf filter_graph    set video filters</div><div class=\"line\">-ab bitrate         audio bitrate (please use -b:a)</div><div class=\"line\">-b bitrate          video bitrate (please use -b:v)</div><div class=\"line\">-dn                 disable data</div><div class=\"line\"></div><div class=\"line\">Audio options:</div><div class=\"line\">-aframes number     set the number of audio frames to output</div><div class=\"line\">-aq quality         set audio quality (codec-specific)</div><div class=\"line\">-ar rate            set audio sampling rate (in Hz)</div><div class=\"line\">-ac channels        set number of audio channels</div><div class=\"line\">-an                 disable audio</div><div class=\"line\">-acodec codec       force audio codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-vol volume         change audio volume (256=normal)</div><div class=\"line\">-af filter_graph    set audio filters</div><div class=\"line\"></div><div class=\"line\">Subtitle options:</div><div class=\"line\">-s size             set frame size (WxH or abbreviation)</div><div class=\"line\">-sn                 disable subtitle</div><div class=\"line\">-scodec codec       force subtitle codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-stag fourcc/tag    force subtitle tag/fourcc</div><div class=\"line\">-fix_sub_duration   fix subtitles duration</div><div class=\"line\">-canvas_size size   set canvas size (WxH or abbreviation)</div><div class=\"line\">-spre preset        set the subtitle options to the indicated preset</div></pre></td></tr></table></figure>\n<p>当然还有对整个文件进行调整的参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">Per-file main options:</div><div class=\"line\">-f fmt              force format</div><div class=\"line\">-c codec            codec name</div><div class=\"line\">-codec codec        codec name</div><div class=\"line\">-pre preset         preset name</div><div class=\"line\">-map_metadata outfile[,metadata]:infile[,metadata]  set metadata information of outfile from infile</div><div class=\"line\">-t duration         record or transcode &quot;duration&quot; seconds of audio/video</div><div class=\"line\">-to time_stop       record or transcode stop time</div><div class=\"line\">-fs limit_size      set the limit file size in bytes</div><div class=\"line\">-ss time_off        set the start time offset</div><div class=\"line\">-sseof time_off     set the start time offset relative to EOF</div><div class=\"line\">-seek_timestamp     enable/disable seeking by timestamp with -ss</div><div class=\"line\">-timestamp time     set the recording timestamp (&apos;now&apos; to set the current time)</div><div class=\"line\">-metadata string=string  add metadata</div><div class=\"line\">-program title=string:st=number...  add program with specified streams</div><div class=\"line\">-target type        specify target file type (&quot;vcd&quot;, &quot;svcd&quot;, &quot;dvd&quot;, &quot;dv&quot; or &quot;dv50&quot; with optional prefixes &quot;pal-&quot;, &quot;ntsc-&quot; or &quot;film-&quot;)</div><div class=\"line\">-apad               audio pad</div><div class=\"line\">-frames number      set the number of frames to output</div><div class=\"line\">-filter filter_graph  set stream filtergraph</div><div class=\"line\">-filter_script filename  read stream filtergraph description from a file</div><div class=\"line\">-reinit_filter      reinit filtergraph on input parameter changes</div><div class=\"line\">-discard            discard</div><div class=\"line\">-disposition        disposition</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh\" target=\"_blank\" rel=\"external\">文章参考</a> </p>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"媒体文件结构\"><a href=\"#媒体文件结构\" class=\"headerlink\" title=\"媒体文件结构\"></a>媒体文件结构</h2><p>一个媒体文件并不像许多人想象的那样，是将媒体内容编码起来直接作为文件的。实际上，它通常是由多个不同种类的媒体流（ Stream ）组成，再以特定的封装格式封装起来的。</p>\n<p>比较常见的媒体流就是视频流跟音频流了，顾名思义，视频流存储的就是视频信息，音频流存储的就是音频信息。一个视频流或者音频流的内容，就是以特定的编码格式所存储的视频或音频信息。</p>\n<p><strong>一个文件的里面的媒体流所采用的编码格式跟这个文件的后缀名并没有完全的必然联系。</strong> <strong>文件的后缀名通常就代表这个文件的封装格式。</strong></p>\n<h2 id=\"ffmpeg-安装\"><a href=\"#ffmpeg-安装\" class=\"headerlink\" title=\"ffmpeg 安装\"></a>ffmpeg 安装</h2><p>自行下载使用系统安装对应的安装包<a href=\"https://ffmpeg.org/download.html\" target=\"_blank\" rel=\"external\">官网下载</a></p>\n<p>以下使用的平台都为Mac系统下</p>","more":"<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><ol>\n<li><p>打开终端，查看ffmpeg帮助文档，简要了解ffmpeg的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -help</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg version 3.3 Copyright (c) 2000-2017 the FFmpeg developers</div><div class=\"line\">  built with Apple LLVM version 8.1.0 (clang-802.0.41)</div><div class=\"line\">  configuration: --prefix=/usr/local/Cellar/ffmpeg/3.3 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-libmp3lame --enable-libx264 --enable-libxvid --enable-opencl --disable-lzma --enable-vda</div><div class=\"line\">  libavutil      55. 58.100 / 55. 58.100</div><div class=\"line\">  libavcodec     57. 89.100 / 57. 89.100</div><div class=\"line\">  libavformat    57. 71.100 / 57. 71.100</div><div class=\"line\">  libavdevice    57.  6.100 / 57.  6.100</div><div class=\"line\">  libavfilter     6. 82.100 /  6. 82.100</div><div class=\"line\">  libavresample   3.  5.  0 /  3.  5.  0</div><div class=\"line\">  libswscale      4.  6.100 /  4.  6.100</div><div class=\"line\">  libswresample   2.  7.100 /  2.  7.100</div><div class=\"line\">  libpostproc    54.  5.100 / 54.  5.100</div><div class=\"line\">Hyper fast Audio and Video encoder</div><div class=\"line\">usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</div></pre></td></tr></table></figure>\n<p>重点是关注 usage: ffmpeg [options][[infile options] -i infile]… {[outfile options] outfile}… 这句是说ffmpeg 的主要用法</p>\n<p>​</p>\n</li>\n<li><p>查看ffmpeg 支持的格式</p>\n<p>查看封装格式，包括音频，视频等封装格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -formats</div></pre></td></tr></table></figure>\n<p>查看编解码器包括音频，视频等封装格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -codecs</div></pre></td></tr></table></figure>\n</li>\n<li><p>进行格式转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -i a.mp4 b.mkv</div></pre></td></tr></table></figure>\n<p>这里是将mp4格式的视频转换成mkv格式。</p>\n<p><strong>注：</strong> 查看默认编码格式，以下的Matroska也就是指 mkv</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -help muxer=Matroska</div><div class=\"line\"></div><div class=\"line\">#以下为摘要信息，从中可以看出默认的视频编码为h264,音频编码为ac3,字幕流编码为ass，部分格式视频不支持字幕流</div><div class=\"line\">Muxer matroska [Matroska]:</div><div class=\"line\">    Common extensions: mkv.</div><div class=\"line\">    Mime type: video/x-matroska.</div><div class=\"line\">    Default video codec: h264.</div><div class=\"line\">    Default audio codec: ac3.</div><div class=\"line\">    Default subtitle codec: ass.</div></pre></td></tr></table></figure>\n</li>\n<li><p>指定编码器进行转换</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ffmpeg -i a.mp4 -c:v hevc -c:a aac b.mkv</div></pre></td></tr></table></figure>\n<p><strong>注：</strong> <code>-c:v</code> 可以用<code>-vcodec</code>替换，当它们的值为copy时，就表示编码格式不进行转换</p>\n</li>\n<li><p>在转换时可以进行的调整</p>\n<p>在 <code>ffmpeg -help</code> 时可以看到有一些和音频，视频，字幕相关的选项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">Video options:</div><div class=\"line\">-vframes number     set the number of video frames to output</div><div class=\"line\">-r rate             set frame rate (Hz value, fraction or abbreviation)</div><div class=\"line\">-s size             set frame size (WxH or abbreviation)</div><div class=\"line\">-aspect aspect      set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)</div><div class=\"line\">-bits_per_raw_sample number  set the number of bits per raw sample</div><div class=\"line\">-vn                 disable video</div><div class=\"line\">-vcodec codec       force video codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-timecode hh:mm:ss[:;.]ff  set initial TimeCode value.</div><div class=\"line\">-pass n             select the pass number (1 to 3)</div><div class=\"line\">-vf filter_graph    set video filters</div><div class=\"line\">-ab bitrate         audio bitrate (please use -b:a)</div><div class=\"line\">-b bitrate          video bitrate (please use -b:v)</div><div class=\"line\">-dn                 disable data</div><div class=\"line\"></div><div class=\"line\">Audio options:</div><div class=\"line\">-aframes number     set the number of audio frames to output</div><div class=\"line\">-aq quality         set audio quality (codec-specific)</div><div class=\"line\">-ar rate            set audio sampling rate (in Hz)</div><div class=\"line\">-ac channels        set number of audio channels</div><div class=\"line\">-an                 disable audio</div><div class=\"line\">-acodec codec       force audio codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-vol volume         change audio volume (256=normal)</div><div class=\"line\">-af filter_graph    set audio filters</div><div class=\"line\"></div><div class=\"line\">Subtitle options:</div><div class=\"line\">-s size             set frame size (WxH or abbreviation)</div><div class=\"line\">-sn                 disable subtitle</div><div class=\"line\">-scodec codec       force subtitle codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-stag fourcc/tag    force subtitle tag/fourcc</div><div class=\"line\">-fix_sub_duration   fix subtitles duration</div><div class=\"line\">-canvas_size size   set canvas size (WxH or abbreviation)</div><div class=\"line\">-spre preset        set the subtitle options to the indicated preset</div></pre></td></tr></table></figure>\n<p>当然还有对整个文件进行调整的参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">Per-file main options:</div><div class=\"line\">-f fmt              force format</div><div class=\"line\">-c codec            codec name</div><div class=\"line\">-codec codec        codec name</div><div class=\"line\">-pre preset         preset name</div><div class=\"line\">-map_metadata outfile[,metadata]:infile[,metadata]  set metadata information of outfile from infile</div><div class=\"line\">-t duration         record or transcode &quot;duration&quot; seconds of audio/video</div><div class=\"line\">-to time_stop       record or transcode stop time</div><div class=\"line\">-fs limit_size      set the limit file size in bytes</div><div class=\"line\">-ss time_off        set the start time offset</div><div class=\"line\">-sseof time_off     set the start time offset relative to EOF</div><div class=\"line\">-seek_timestamp     enable/disable seeking by timestamp with -ss</div><div class=\"line\">-timestamp time     set the recording timestamp (&apos;now&apos; to set the current time)</div><div class=\"line\">-metadata string=string  add metadata</div><div class=\"line\">-program title=string:st=number...  add program with specified streams</div><div class=\"line\">-target type        specify target file type (&quot;vcd&quot;, &quot;svcd&quot;, &quot;dvd&quot;, &quot;dv&quot; or &quot;dv50&quot; with optional prefixes &quot;pal-&quot;, &quot;ntsc-&quot; or &quot;film-&quot;)</div><div class=\"line\">-apad               audio pad</div><div class=\"line\">-frames number      set the number of frames to output</div><div class=\"line\">-filter filter_graph  set stream filtergraph</div><div class=\"line\">-filter_script filename  read stream filtergraph description from a file</div><div class=\"line\">-reinit_filter      reinit filtergraph on input parameter changes</div><div class=\"line\">-discard            discard</div><div class=\"line\">-disposition        disposition</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh\" target=\"_blank\" rel=\"external\">文章参考</a> </p>\n<p>​</p>\n</li>\n</ol>"},{"title":"supervisor linux后台进程管理利器","date":"2017-04-28T03:24:12.000Z","_content":"\nsupervisor 是基于python的进程管理工具\n\n## install online\n\n- ubuntu 系统安装 apt-get install supervisor\n- 也可以通过pip install supervisor 但是需要手动启动\n## install offline\n\n- 下载安装包和依赖包详见官网 [https://pypi.python.org/pypi/supervisor] 3.3.1版本\n\n- 解压安装tar.gz  然后cd 到目录中执行 python setup.py install\n\n- 创建配置文件\n\n- 执行`echo_supervisord_conf > /etc/supervisor/supervisord.conf `创建配置文件\n\n- 创建supervisord 放在 init.d目录 下  **注：** prog_bin 为supervisors 可执行文件位置\n\n   <!-- more -->\n\n   ```ssh\n   #!/bin/sh\n   #\n   # /etc/rc.d/init.d/supervisord\n   #\n   # Supervisor is a client/server system that\n   # allows its users to monitor and control a\n   # number of processes on UNIX-like operating\n   # systems.\n   #\n   # chkconfig: - 64 36\n   # description: Supervisor Server\n   # processname: supervisord\n\n   # Source init functions\n   . /etc/rc.d/init.d/functions\n\n   prog=\"supervisord\"\n\n   prefix=\"/usr\"\n   exec_prefix=\"${prefix}\"\n   prog_bin=\"${exec_prefix}/bin/supervisord\"\n   PIDFILE=\"/var/run/$prog.pid\"\n\n   start()\n   {\n          echo -n $\"Starting $prog: \"\n          touch $PIDFILE\n          daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE\n          sleep 1\n          [ -f $PIDFILE ] && success $\"$prog startup\" || failure $\"$prog startup\"\n          echo\n   }\n   stop()\n   {\n          echo -n $\"Shutting down $prog: \"\n          [ -f $PIDFILE ] && killproc $prog || success $\"$prog shutdown\"\n          echo\n   }\n\n   case \"$1\" in\n\n    start)\n      start\n    ;;\n\n    stop)\n      stop\n    ;;\n\n    status)\n          status $prog\n    ;;\n\n    restart)\n      stop\n      start\n    ;;\n\n    *)\n      echo \"Usage: $0 {start|stop|restart|status}\"\n    ;;\n\n   esac\n   ```\n\n- 修改指定要运行程序配置文件\n\n   编辑supervisor.conf文件中的\n\n   ```\n   [include]\n   files = /etc/supervisord.conf.d/*.conf\n   ```\n\n ​\n\n## how to use\n\n在etc/supervisor.conf.d 目录下创建每个进程对应的配置文件 如：work.conf\n具体配置\n\tdirectory= /opt/faceid/worker            //工程文件目录\n\tcommand= /opt/faceid/worker/start.sh  //启动命令\n\tautostart=true                                           //是否自启\n\tautorestart=true                                        //是否自动重启\n\tstartretries= 10000                                  //重试时间\n\tstartsecs=1                                                //启动时间\n\tstopasgroup=true\n\tkillasgroup=true``\n\tstdout_logfile_maxbytes = 50MB\n\tstdout_logfile_backups = 10\n\tstdout_logfile = /var/log/megvii/%(program_name)s.log\n## common command\n\n- supervisorctl status 查看各个进程的状态\n- supervisorctl reload 重启supervisor 下的所有进程\n- supervisorctl stop name 停止指定进程\n- supervisorctl start name 启动指定进程\n- supervisorctl restart all  重启supervisor 下的所有进程\n\n\n## FAQ\n\n- Error: Another program is already listening on a port\n\n  ```ssh\n  find / -name supervisor.sock\n  unlink /***/supervisor.sock\n  ```\n\n- 文件找不到\n\n   `unix:///tmp/supervisor.sock no such file`\n\n  编辑文件/etc/supervisord.conf  中的\n\n  ```\n  file = /tmp/supervisor.sock ;改成file = /var/run/supervisor.sock\n  ```\n\n​\t然后执行\n\n```ssh\ntouch /var/run/supervisor.sock\nservice supervisord restart\n```\n\n-  ERROR (spawn error)\n\n  确认脚本文件能够正常使用\n\n- error while loading shared libraries: libpython2.7.so.1.0\n\n  找到libpython2.7.so.10点位置\n\n  ```ssh\n  [root@testlm01v ~]# locate libpython2.7.so.1.0\n  /usr/local/Python-2.7.11/libpython2.7.so.1.0\n  /usr/local/lib/libpython2.7.so.1.0\n  ```\n\n  把找到的位置复制到/etc/ld.so.conf.d/python.conf中如\n\n  ```\n  [root@testlm01v /etc/ld.so.conf.d]# cat python.conf \n  /usr/local/lib\n  ```\n","source":"_posts/supervisor 是基于python的进程管理工具.md","raw":"---\ntitle: supervisor linux后台进程管理利器\ndate: 2017-04-28 11:24:12\ntags: Linux\n---\n\nsupervisor 是基于python的进程管理工具\n\n## install online\n\n- ubuntu 系统安装 apt-get install supervisor\n- 也可以通过pip install supervisor 但是需要手动启动\n## install offline\n\n- 下载安装包和依赖包详见官网 [https://pypi.python.org/pypi/supervisor] 3.3.1版本\n\n- 解压安装tar.gz  然后cd 到目录中执行 python setup.py install\n\n- 创建配置文件\n\n- 执行`echo_supervisord_conf > /etc/supervisor/supervisord.conf `创建配置文件\n\n- 创建supervisord 放在 init.d目录 下  **注：** prog_bin 为supervisors 可执行文件位置\n\n   <!-- more -->\n\n   ```ssh\n   #!/bin/sh\n   #\n   # /etc/rc.d/init.d/supervisord\n   #\n   # Supervisor is a client/server system that\n   # allows its users to monitor and control a\n   # number of processes on UNIX-like operating\n   # systems.\n   #\n   # chkconfig: - 64 36\n   # description: Supervisor Server\n   # processname: supervisord\n\n   # Source init functions\n   . /etc/rc.d/init.d/functions\n\n   prog=\"supervisord\"\n\n   prefix=\"/usr\"\n   exec_prefix=\"${prefix}\"\n   prog_bin=\"${exec_prefix}/bin/supervisord\"\n   PIDFILE=\"/var/run/$prog.pid\"\n\n   start()\n   {\n          echo -n $\"Starting $prog: \"\n          touch $PIDFILE\n          daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE\n          sleep 1\n          [ -f $PIDFILE ] && success $\"$prog startup\" || failure $\"$prog startup\"\n          echo\n   }\n   stop()\n   {\n          echo -n $\"Shutting down $prog: \"\n          [ -f $PIDFILE ] && killproc $prog || success $\"$prog shutdown\"\n          echo\n   }\n\n   case \"$1\" in\n\n    start)\n      start\n    ;;\n\n    stop)\n      stop\n    ;;\n\n    status)\n          status $prog\n    ;;\n\n    restart)\n      stop\n      start\n    ;;\n\n    *)\n      echo \"Usage: $0 {start|stop|restart|status}\"\n    ;;\n\n   esac\n   ```\n\n- 修改指定要运行程序配置文件\n\n   编辑supervisor.conf文件中的\n\n   ```\n   [include]\n   files = /etc/supervisord.conf.d/*.conf\n   ```\n\n ​\n\n## how to use\n\n在etc/supervisor.conf.d 目录下创建每个进程对应的配置文件 如：work.conf\n具体配置\n\tdirectory= /opt/faceid/worker            //工程文件目录\n\tcommand= /opt/faceid/worker/start.sh  //启动命令\n\tautostart=true                                           //是否自启\n\tautorestart=true                                        //是否自动重启\n\tstartretries= 10000                                  //重试时间\n\tstartsecs=1                                                //启动时间\n\tstopasgroup=true\n\tkillasgroup=true``\n\tstdout_logfile_maxbytes = 50MB\n\tstdout_logfile_backups = 10\n\tstdout_logfile = /var/log/megvii/%(program_name)s.log\n## common command\n\n- supervisorctl status 查看各个进程的状态\n- supervisorctl reload 重启supervisor 下的所有进程\n- supervisorctl stop name 停止指定进程\n- supervisorctl start name 启动指定进程\n- supervisorctl restart all  重启supervisor 下的所有进程\n\n\n## FAQ\n\n- Error: Another program is already listening on a port\n\n  ```ssh\n  find / -name supervisor.sock\n  unlink /***/supervisor.sock\n  ```\n\n- 文件找不到\n\n   `unix:///tmp/supervisor.sock no such file`\n\n  编辑文件/etc/supervisord.conf  中的\n\n  ```\n  file = /tmp/supervisor.sock ;改成file = /var/run/supervisor.sock\n  ```\n\n​\t然后执行\n\n```ssh\ntouch /var/run/supervisor.sock\nservice supervisord restart\n```\n\n-  ERROR (spawn error)\n\n  确认脚本文件能够正常使用\n\n- error while loading shared libraries: libpython2.7.so.1.0\n\n  找到libpython2.7.so.10点位置\n\n  ```ssh\n  [root@testlm01v ~]# locate libpython2.7.so.1.0\n  /usr/local/Python-2.7.11/libpython2.7.so.1.0\n  /usr/local/lib/libpython2.7.so.1.0\n  ```\n\n  把找到的位置复制到/etc/ld.so.conf.d/python.conf中如\n\n  ```\n  [root@testlm01v /etc/ld.so.conf.d]# cat python.conf \n  /usr/local/lib\n  ```\n","slug":"supervisor 是基于python的进程管理工具","published":1,"updated":"2017-05-27T15:02:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fi9qlw0005lcc0ld1pt432","content":"<p>supervisor 是基于python的进程管理工具</p>\n<h2 id=\"install-online\"><a href=\"#install-online\" class=\"headerlink\" title=\"install online\"></a>install online</h2><ul>\n<li>ubuntu 系统安装 apt-get install supervisor</li>\n<li><p>也可以通过pip install supervisor 但是需要手动启动</p>\n<h2 id=\"install-offline\"><a href=\"#install-offline\" class=\"headerlink\" title=\"install offline\"></a>install offline</h2></li>\n<li><p>下载安装包和依赖包详见官网 [<a href=\"https://pypi.python.org/pypi/supervisor\" target=\"_blank\" rel=\"external\">https://pypi.python.org/pypi/supervisor</a>] 3.3.1版本</p>\n</li>\n<li><p>解压安装tar.gz  然后cd 到目录中执行 python setup.py install</p>\n</li>\n<li><p>创建配置文件</p>\n</li>\n<li><p>执行<code>echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</code>创建配置文件</p>\n</li>\n<li><p>创建supervisord 放在 init.d目录 下  <strong>注：</strong> prog_bin 为supervisors 可执行文件位置</p>\n <a id=\"more\"></a>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">#</div><div class=\"line\"># /etc/rc.d/init.d/supervisord</div><div class=\"line\">#</div><div class=\"line\"># Supervisor is a client/server system that</div><div class=\"line\"># allows its users to monitor and control a</div><div class=\"line\"># number of processes on UNIX-like operating</div><div class=\"line\"># systems.</div><div class=\"line\">#</div><div class=\"line\"># chkconfig: - 64 36</div><div class=\"line\"># description: Supervisor Server</div><div class=\"line\"># processname: supervisord</div><div class=\"line\"></div><div class=\"line\"># Source init functions</div><div class=\"line\">. /etc/rc.d/init.d/functions</div><div class=\"line\"></div><div class=\"line\">prog=&quot;supervisord&quot;</div><div class=\"line\"></div><div class=\"line\">prefix=&quot;/usr&quot;</div><div class=\"line\">exec_prefix=&quot;$&#123;prefix&#125;&quot;</div><div class=\"line\">prog_bin=&quot;$&#123;exec_prefix&#125;/bin/supervisord&quot;</div><div class=\"line\">PIDFILE=&quot;/var/run/$prog.pid&quot;</div><div class=\"line\"></div><div class=\"line\">start()</div><div class=\"line\">&#123;</div><div class=\"line\">       echo -n $&quot;Starting $prog: &quot;</div><div class=\"line\">       touch $PIDFILE</div><div class=\"line\">       daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE</div><div class=\"line\">       sleep 1</div><div class=\"line\">       [ -f $PIDFILE ] &amp;&amp; success $&quot;$prog startup&quot; || failure $&quot;$prog startup&quot;</div><div class=\"line\">       echo</div><div class=\"line\">&#125;</div><div class=\"line\">stop()</div><div class=\"line\">&#123;</div><div class=\"line\">       echo -n $&quot;Shutting down $prog: &quot;</div><div class=\"line\">       [ -f $PIDFILE ] &amp;&amp; killproc $prog || success $&quot;$prog shutdown&quot;</div><div class=\"line\">       echo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">case &quot;$1&quot; in</div><div class=\"line\"></div><div class=\"line\"> start)</div><div class=\"line\">   start</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> stop)</div><div class=\"line\">   stop</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> status)</div><div class=\"line\">       status $prog</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> restart)</div><div class=\"line\">   stop</div><div class=\"line\">   start</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> *)</div><div class=\"line\">   echo &quot;Usage: $0 &#123;start|stop|restart|status&#125;&quot;</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\">esac</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改指定要运行程序配置文件</p>\n<p> 编辑supervisor.conf文件中的</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[include]</div><div class=\"line\">files = /etc/supervisord.conf.d/*.conf</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use\"></a>how to use</h2><p>在etc/supervisor.conf.d 目录下创建每个进程对应的配置文件 如：work.conf<br>具体配置<br>    directory= /opt/faceid/worker            //工程文件目录<br>    command= /opt/faceid/worker/start.sh  //启动命令<br>    autostart=true                                           //是否自启<br>    autorestart=true                                        //是否自动重启<br>    startretries= 10000                                  //重试时间<br>    startsecs=1                                                //启动时间<br>    stopasgroup=true<br>    killasgroup=true``<br>    stdout_logfile_maxbytes = 50MB<br>    stdout_logfile_backups = 10<br>    stdout_logfile = /var/log/megvii/%(program_name)s.log</p>\n<h2 id=\"common-command\"><a href=\"#common-command\" class=\"headerlink\" title=\"common command\"></a>common command</h2><ul>\n<li>supervisorctl status 查看各个进程的状态</li>\n<li>supervisorctl reload 重启supervisor 下的所有进程</li>\n<li>supervisorctl stop name 停止指定进程</li>\n<li>supervisorctl start name 启动指定进程</li>\n<li>supervisorctl restart all  重启supervisor 下的所有进程</li>\n</ul>\n<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><ul>\n<li><p>Error: Another program is already listening on a port</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">find / -name supervisor.sock</div><div class=\"line\">unlink /***/supervisor.sock</div></pre></td></tr></table></figure>\n</li>\n<li><p>文件找不到</p>\n<p> <code>unix:///tmp/supervisor.sock no such file</code></p>\n<p>编辑文件/etc/supervisord.conf  中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">file = /tmp/supervisor.sock ;改成file = /var/run/supervisor.sock</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>​    然后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/run/supervisor.sock</div><div class=\"line\">service supervisord restart</div></pre></td></tr></table></figure>\n<ul>\n<li><p>ERROR (spawn error)</p>\n<p>确认脚本文件能够正常使用</p>\n</li>\n<li><p>error while loading shared libraries: libpython2.7.so.1.0</p>\n<p>找到libpython2.7.so.10点位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@testlm01v ~]# locate libpython2.7.so.1.0</div><div class=\"line\">/usr/local/Python-2.7.11/libpython2.7.so.1.0</div><div class=\"line\">/usr/local/lib/libpython2.7.so.1.0</div></pre></td></tr></table></figure>\n<p>把找到的位置复制到/etc/ld.so.conf.d/python.conf中如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@testlm01v /etc/ld.so.conf.d]# cat python.conf </div><div class=\"line\">/usr/local/lib</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>supervisor 是基于python的进程管理工具</p>\n<h2 id=\"install-online\"><a href=\"#install-online\" class=\"headerlink\" title=\"install online\"></a>install online</h2><ul>\n<li>ubuntu 系统安装 apt-get install supervisor</li>\n<li><p>也可以通过pip install supervisor 但是需要手动启动</p>\n<h2 id=\"install-offline\"><a href=\"#install-offline\" class=\"headerlink\" title=\"install offline\"></a>install offline</h2></li>\n<li><p>下载安装包和依赖包详见官网 [<a href=\"https://pypi.python.org/pypi/supervisor\" target=\"_blank\" rel=\"external\">https://pypi.python.org/pypi/supervisor</a>] 3.3.1版本</p>\n</li>\n<li><p>解压安装tar.gz  然后cd 到目录中执行 python setup.py install</p>\n</li>\n<li><p>创建配置文件</p>\n</li>\n<li><p>执行<code>echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</code>创建配置文件</p>\n</li>\n<li><p>创建supervisord 放在 init.d目录 下  <strong>注：</strong> prog_bin 为supervisors 可执行文件位置</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">#</div><div class=\"line\"># /etc/rc.d/init.d/supervisord</div><div class=\"line\">#</div><div class=\"line\"># Supervisor is a client/server system that</div><div class=\"line\"># allows its users to monitor and control a</div><div class=\"line\"># number of processes on UNIX-like operating</div><div class=\"line\"># systems.</div><div class=\"line\">#</div><div class=\"line\"># chkconfig: - 64 36</div><div class=\"line\"># description: Supervisor Server</div><div class=\"line\"># processname: supervisord</div><div class=\"line\"></div><div class=\"line\"># Source init functions</div><div class=\"line\">. /etc/rc.d/init.d/functions</div><div class=\"line\"></div><div class=\"line\">prog=&quot;supervisord&quot;</div><div class=\"line\"></div><div class=\"line\">prefix=&quot;/usr&quot;</div><div class=\"line\">exec_prefix=&quot;$&#123;prefix&#125;&quot;</div><div class=\"line\">prog_bin=&quot;$&#123;exec_prefix&#125;/bin/supervisord&quot;</div><div class=\"line\">PIDFILE=&quot;/var/run/$prog.pid&quot;</div><div class=\"line\"></div><div class=\"line\">start()</div><div class=\"line\">&#123;</div><div class=\"line\">       echo -n $&quot;Starting $prog: &quot;</div><div class=\"line\">       touch $PIDFILE</div><div class=\"line\">       daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE</div><div class=\"line\">       sleep 1</div><div class=\"line\">       [ -f $PIDFILE ] &amp;&amp; success $&quot;$prog startup&quot; || failure $&quot;$prog startup&quot;</div><div class=\"line\">       echo</div><div class=\"line\">&#125;</div><div class=\"line\">stop()</div><div class=\"line\">&#123;</div><div class=\"line\">       echo -n $&quot;Shutting down $prog: &quot;</div><div class=\"line\">       [ -f $PIDFILE ] &amp;&amp; killproc $prog || success $&quot;$prog shutdown&quot;</div><div class=\"line\">       echo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">case &quot;$1&quot; in</div><div class=\"line\"></div><div class=\"line\"> start)</div><div class=\"line\">   start</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> stop)</div><div class=\"line\">   stop</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> status)</div><div class=\"line\">       status $prog</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> restart)</div><div class=\"line\">   stop</div><div class=\"line\">   start</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> *)</div><div class=\"line\">   echo &quot;Usage: $0 &#123;start|stop|restart|status&#125;&quot;</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\">esac</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改指定要运行程序配置文件</p>\n<p> 编辑supervisor.conf文件中的</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[include]</div><div class=\"line\">files = /etc/supervisord.conf.d/*.conf</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use\"></a>how to use</h2><p>在etc/supervisor.conf.d 目录下创建每个进程对应的配置文件 如：work.conf<br>具体配置<br>    directory= /opt/faceid/worker            //工程文件目录<br>    command= /opt/faceid/worker/start.sh  //启动命令<br>    autostart=true                                           //是否自启<br>    autorestart=true                                        //是否自动重启<br>    startretries= 10000                                  //重试时间<br>    startsecs=1                                                //启动时间<br>    stopasgroup=true<br>    killasgroup=true``<br>    stdout_logfile_maxbytes = 50MB<br>    stdout_logfile_backups = 10<br>    stdout_logfile = /var/log/megvii/%(program_name)s.log</p>\n<h2 id=\"common-command\"><a href=\"#common-command\" class=\"headerlink\" title=\"common command\"></a>common command</h2><ul>\n<li>supervisorctl status 查看各个进程的状态</li>\n<li>supervisorctl reload 重启supervisor 下的所有进程</li>\n<li>supervisorctl stop name 停止指定进程</li>\n<li>supervisorctl start name 启动指定进程</li>\n<li>supervisorctl restart all  重启supervisor 下的所有进程</li>\n</ul>\n<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><ul>\n<li><p>Error: Another program is already listening on a port</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">find / -name supervisor.sock</div><div class=\"line\">unlink /***/supervisor.sock</div></pre></td></tr></table></figure>\n</li>\n<li><p>文件找不到</p>\n<p> <code>unix:///tmp/supervisor.sock no such file</code></p>\n<p>编辑文件/etc/supervisord.conf  中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">file = /tmp/supervisor.sock ;改成file = /var/run/supervisor.sock</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>​    然后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/run/supervisor.sock</div><div class=\"line\">service supervisord restart</div></pre></td></tr></table></figure>\n<ul>\n<li><p>ERROR (spawn error)</p>\n<p>确认脚本文件能够正常使用</p>\n</li>\n<li><p>error while loading shared libraries: libpython2.7.so.1.0</p>\n<p>找到libpython2.7.so.10点位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@testlm01v ~]# locate libpython2.7.so.1.0</div><div class=\"line\">/usr/local/Python-2.7.11/libpython2.7.so.1.0</div><div class=\"line\">/usr/local/lib/libpython2.7.so.1.0</div></pre></td></tr></table></figure>\n<p>把找到的位置复制到/etc/ld.so.conf.d/python.conf中如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@testlm01v /etc/ld.so.conf.d]# cat python.conf </div><div class=\"line\">/usr/local/lib</div></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"shell 脚本中读取参数值","date":"2017-05-25T03:14:12.000Z","_content":"\nshell 脚本中读取参数值\n\n通常读取命令行中带过来的参数有两种方式，一直是直接根据参数位置直接获取，还有一种根据指定的key，去获取指定的值。第一种方式可以说是根本没有可读性，使用的人如果参数位置写错了，传入的值就全错了\n\n## 根据参数位置直接获取\n\n1. 先定义一个脚本test.sh，打印位置参数\n\n   ```ssh\n   #!/bin/bash\n\n   echo $1\n   echo $2\n   ```\n\n2. 执行test.sh脚本\n\n   ```ssh\n   ./test.sh haha hehehe\n   ```\n\n   执行的结果就是打印了两个参数，这个种方式的弊端就是，如果参数的位置传错了，那么$1 的值就不是haha了，当然可以使用这种方式写，就是可读性不太高 哈。\n\n   <!-- more -->\n\n## 指定key 获取参数\n\n1. 一样的我们先定义脚本test.sh，一会儿我们在解读shell脚本中的含义\n\n   ```ssh\n   #!/bin/bash\n\n   #先定义接收各个参数值的变量\n   IP_VALUE=\"\"; NODE_VALUE=\"\";VIP_VALUE=\"\";\n\n   while true;do \n   \tif [ ! $2 ]; then break; fi\n   \tcase $1 in\n   \t\t-i|--ip)\n   \t\t\tcase $2 in\n   \t\t\t\"\")IP_VALUE=\"\";shift 2;;\n   \t\t\t*)IP_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t-n|--node)\n   \t\t\tcase $2 in\n   \t\t\t\"\")NODE_VALUE=\"\";shift 2;;\n   \t\t\t*)NODE_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t-v|--vip)\n   \t\t\tcase $2 in\n   \t\t\t\"\")NODE_VALUE=\"\";shift 2;;\n   \t\t\t*)NODE_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t --) shift ;break ;;\n   \t\t *) break;;\n   \t\tesac\n   done\n\n   if [ -z \"${IP_VALUE}\" ];    then echo \"error: ip is not found.\";             exit 1; fi\n   if [ -z \"${NODE_VALUE}\" ];  then echo \"error: node is not found.\";           exit 1; fi\n   if [ -z \"${VIP_VALUE}\" ];   then echo \"error: vip is not found.\";            exit 1; fi\n   ```\n\n   - 通过while 循环参数的$1 和$2 取key 和 value。\n   - case $1取参数的key，case $2取其中的值，如果取到了，就通过shift 2，把最前面的两个位置给移除了比如:`./test.sh -v kkk -n bbbb` 读取到如果执行了 shift 2,它就会把-v kkk 给扔了\n   - 底下的if 是判断有没有读取到想要的值\n\n2. 其他的方式去根据key获取参数\n\n   - 一个是getopts 但是getopts不支持长选项，具体可以参考[getopts命令行参数处理](http://www.cnblogs.com/xiangzi888/archive/2012/04/03/2430736.html)\n   - 另一个是getopt，[shell中使用getopts 和 getopt](http://blog.csdn.net/wh211212/article/details/53750366)\n\n个人建议使用第一种方式去处理shell参数，不会有太多的局限性，唯一的问题就是代码会多一些哈！","source":"_posts/shell 脚本中读取参数值.md","raw":"---\ntitle: shell 脚本中读取参数值\ndate: 2017-05-25 11:14:12\ntags: Linux\n---\n\nshell 脚本中读取参数值\n\n通常读取命令行中带过来的参数有两种方式，一直是直接根据参数位置直接获取，还有一种根据指定的key，去获取指定的值。第一种方式可以说是根本没有可读性，使用的人如果参数位置写错了，传入的值就全错了\n\n## 根据参数位置直接获取\n\n1. 先定义一个脚本test.sh，打印位置参数\n\n   ```ssh\n   #!/bin/bash\n\n   echo $1\n   echo $2\n   ```\n\n2. 执行test.sh脚本\n\n   ```ssh\n   ./test.sh haha hehehe\n   ```\n\n   执行的结果就是打印了两个参数，这个种方式的弊端就是，如果参数的位置传错了，那么$1 的值就不是haha了，当然可以使用这种方式写，就是可读性不太高 哈。\n\n   <!-- more -->\n\n## 指定key 获取参数\n\n1. 一样的我们先定义脚本test.sh，一会儿我们在解读shell脚本中的含义\n\n   ```ssh\n   #!/bin/bash\n\n   #先定义接收各个参数值的变量\n   IP_VALUE=\"\"; NODE_VALUE=\"\";VIP_VALUE=\"\";\n\n   while true;do \n   \tif [ ! $2 ]; then break; fi\n   \tcase $1 in\n   \t\t-i|--ip)\n   \t\t\tcase $2 in\n   \t\t\t\"\")IP_VALUE=\"\";shift 2;;\n   \t\t\t*)IP_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t-n|--node)\n   \t\t\tcase $2 in\n   \t\t\t\"\")NODE_VALUE=\"\";shift 2;;\n   \t\t\t*)NODE_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t-v|--vip)\n   \t\t\tcase $2 in\n   \t\t\t\"\")NODE_VALUE=\"\";shift 2;;\n   \t\t\t*)NODE_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t --) shift ;break ;;\n   \t\t *) break;;\n   \t\tesac\n   done\n\n   if [ -z \"${IP_VALUE}\" ];    then echo \"error: ip is not found.\";             exit 1; fi\n   if [ -z \"${NODE_VALUE}\" ];  then echo \"error: node is not found.\";           exit 1; fi\n   if [ -z \"${VIP_VALUE}\" ];   then echo \"error: vip is not found.\";            exit 1; fi\n   ```\n\n   - 通过while 循环参数的$1 和$2 取key 和 value。\n   - case $1取参数的key，case $2取其中的值，如果取到了，就通过shift 2，把最前面的两个位置给移除了比如:`./test.sh -v kkk -n bbbb` 读取到如果执行了 shift 2,它就会把-v kkk 给扔了\n   - 底下的if 是判断有没有读取到想要的值\n\n2. 其他的方式去根据key获取参数\n\n   - 一个是getopts 但是getopts不支持长选项，具体可以参考[getopts命令行参数处理](http://www.cnblogs.com/xiangzi888/archive/2012/04/03/2430736.html)\n   - 另一个是getopt，[shell中使用getopts 和 getopt](http://blog.csdn.net/wh211212/article/details/53750366)\n\n个人建议使用第一种方式去处理shell参数，不会有太多的局限性，唯一的问题就是代码会多一些哈！","slug":"shell 脚本中读取参数值","published":1,"updated":"2017-05-27T15:01:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3fi9qlz0008lcc0v0r5kvli","content":"<p>shell 脚本中读取参数值</p>\n<p>通常读取命令行中带过来的参数有两种方式，一直是直接根据参数位置直接获取，还有一种根据指定的key，去获取指定的值。第一种方式可以说是根本没有可读性，使用的人如果参数位置写错了，传入的值就全错了</p>\n<h2 id=\"根据参数位置直接获取\"><a href=\"#根据参数位置直接获取\" class=\"headerlink\" title=\"根据参数位置直接获取\"></a>根据参数位置直接获取</h2><ol>\n<li><p>先定义一个脚本test.sh，打印位置参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">echo $1</div><div class=\"line\">echo $2</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行test.sh脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./test.sh haha hehehe</div></pre></td></tr></table></figure>\n<p>执行的结果就是打印了两个参数，这个种方式的弊端就是，如果参数的位置传错了，那么$1 的值就不是haha了，当然可以使用这种方式写，就是可读性不太高 哈。</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<h2 id=\"指定key-获取参数\"><a href=\"#指定key-获取参数\" class=\"headerlink\" title=\"指定key 获取参数\"></a>指定key 获取参数</h2><ol>\n<li><p>一样的我们先定义脚本test.sh，一会儿我们在解读shell脚本中的含义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">#先定义接收各个参数值的变量</div><div class=\"line\">IP_VALUE=&quot;&quot;; NODE_VALUE=&quot;&quot;;VIP_VALUE=&quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">while true;do </div><div class=\"line\">\tif [ ! $2 ]; then break; fi</div><div class=\"line\">\tcase $1 in</div><div class=\"line\">\t\t-i|--ip)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)IP_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)IP_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t-n|--node)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)NODE_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)NODE_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t-v|--vip)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)NODE_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)NODE_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t --) shift ;break ;;</div><div class=\"line\">\t\t *) break;;</div><div class=\"line\">\t\tesac</div><div class=\"line\">done</div><div class=\"line\"></div><div class=\"line\">if [ -z &quot;$&#123;IP_VALUE&#125;&quot; ];    then echo &quot;error: ip is not found.&quot;;             exit 1; fi</div><div class=\"line\">if [ -z &quot;$&#123;NODE_VALUE&#125;&quot; ];  then echo &quot;error: node is not found.&quot;;           exit 1; fi</div><div class=\"line\">if [ -z &quot;$&#123;VIP_VALUE&#125;&quot; ];   then echo &quot;error: vip is not found.&quot;;            exit 1; fi</div></pre></td></tr></table></figure>\n<ul>\n<li>通过while 循环参数的$1 和$2 取key 和 value。</li>\n<li>case $1取参数的key，case $2取其中的值，如果取到了，就通过shift 2，把最前面的两个位置给移除了比如:<code>./test.sh -v kkk -n bbbb</code> 读取到如果执行了 shift 2,它就会把-v kkk 给扔了</li>\n<li>底下的if 是判断有没有读取到想要的值</li>\n</ul>\n</li>\n<li><p>其他的方式去根据key获取参数</p>\n<ul>\n<li>一个是getopts 但是getopts不支持长选项，具体可以参考<a href=\"http://www.cnblogs.com/xiangzi888/archive/2012/04/03/2430736.html\" target=\"_blank\" rel=\"external\">getopts命令行参数处理</a></li>\n<li>另一个是getopt，<a href=\"http://blog.csdn.net/wh211212/article/details/53750366\" target=\"_blank\" rel=\"external\">shell中使用getopts 和 getopt</a></li>\n</ul>\n</li>\n</ol>\n<p>个人建议使用第一种方式去处理shell参数，不会有太多的局限性，唯一的问题就是代码会多一些哈！</p>\n","site":{"data":{}},"excerpt":"<p>shell 脚本中读取参数值</p>\n<p>通常读取命令行中带过来的参数有两种方式，一直是直接根据参数位置直接获取，还有一种根据指定的key，去获取指定的值。第一种方式可以说是根本没有可读性，使用的人如果参数位置写错了，传入的值就全错了</p>\n<h2 id=\"根据参数位置直接获取\"><a href=\"#根据参数位置直接获取\" class=\"headerlink\" title=\"根据参数位置直接获取\"></a>根据参数位置直接获取</h2><ol>\n<li><p>先定义一个脚本test.sh，打印位置参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">echo $1</div><div class=\"line\">echo $2</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行test.sh脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./test.sh haha hehehe</div></pre></td></tr></table></figure>\n<p>执行的结果就是打印了两个参数，这个种方式的弊端就是，如果参数的位置传错了，那么$1 的值就不是haha了，当然可以使用这种方式写，就是可读性不太高 哈。</p>","more":"</li>\n</ol>\n<h2 id=\"指定key-获取参数\"><a href=\"#指定key-获取参数\" class=\"headerlink\" title=\"指定key 获取参数\"></a>指定key 获取参数</h2><ol>\n<li><p>一样的我们先定义脚本test.sh，一会儿我们在解读shell脚本中的含义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">#先定义接收各个参数值的变量</div><div class=\"line\">IP_VALUE=&quot;&quot;; NODE_VALUE=&quot;&quot;;VIP_VALUE=&quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">while true;do </div><div class=\"line\">\tif [ ! $2 ]; then break; fi</div><div class=\"line\">\tcase $1 in</div><div class=\"line\">\t\t-i|--ip)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)IP_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)IP_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t-n|--node)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)NODE_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)NODE_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t-v|--vip)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)NODE_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)NODE_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t --) shift ;break ;;</div><div class=\"line\">\t\t *) break;;</div><div class=\"line\">\t\tesac</div><div class=\"line\">done</div><div class=\"line\"></div><div class=\"line\">if [ -z &quot;$&#123;IP_VALUE&#125;&quot; ];    then echo &quot;error: ip is not found.&quot;;             exit 1; fi</div><div class=\"line\">if [ -z &quot;$&#123;NODE_VALUE&#125;&quot; ];  then echo &quot;error: node is not found.&quot;;           exit 1; fi</div><div class=\"line\">if [ -z &quot;$&#123;VIP_VALUE&#125;&quot; ];   then echo &quot;error: vip is not found.&quot;;            exit 1; fi</div></pre></td></tr></table></figure>\n<ul>\n<li>通过while 循环参数的$1 和$2 取key 和 value。</li>\n<li>case $1取参数的key，case $2取其中的值，如果取到了，就通过shift 2，把最前面的两个位置给移除了比如:<code>./test.sh -v kkk -n bbbb</code> 读取到如果执行了 shift 2,它就会把-v kkk 给扔了</li>\n<li>底下的if 是判断有没有读取到想要的值</li>\n</ul>\n</li>\n<li><p>其他的方式去根据key获取参数</p>\n<ul>\n<li>一个是getopts 但是getopts不支持长选项，具体可以参考<a href=\"http://www.cnblogs.com/xiangzi888/archive/2012/04/03/2430736.html\" target=\"_blank\" rel=\"external\">getopts命令行参数处理</a></li>\n<li>另一个是getopt，<a href=\"http://blog.csdn.net/wh211212/article/details/53750366\" target=\"_blank\" rel=\"external\">shell中使用getopts 和 getopt</a></li>\n</ul>\n</li>\n</ol>\n<p>个人建议使用第一种方式去处理shell参数，不会有太多的局限性，唯一的问题就是代码会多一些哈！</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj3fi9qlj0000lcc0usr9suky","tag_id":"cj3fi9qlr0002lcc0agjyubu8","_id":"cj3fi9qlz0007lcc0xj3k95a7"},{"post_id":"cj3fi9qlo0001lcc0l0v1uy7q","tag_id":"cj3fi9qlr0002lcc0agjyubu8","_id":"cj3fi9qm1000alcc0kwgwtkpb"},{"post_id":"cj3fi9qlt0003lcc0bnr0cgoh","tag_id":"cj3fi9qm00009lcc00b0qfoll","_id":"cj3fi9qm2000clcc06w852mcr"},{"post_id":"cj3fi9qlw0005lcc0ld1pt432","tag_id":"cj3fi9qm00009lcc00b0qfoll","_id":"cj3fi9qm3000elcc0cpmmky5p"},{"post_id":"cj3fi9qlz0008lcc0v0r5kvli","tag_id":"cj3fi9qm00009lcc00b0qfoll","_id":"cj3fi9qm4000flcc0bk41e3pq"}],"Tag":[{"name":"技巧","_id":"cj3fi9qlr0002lcc0agjyubu8"},{"name":"Linux","_id":"cj3fi9qm00009lcc00b0qfoll"}]}}