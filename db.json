{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/ali_pay1.jpg","path":"images/ali_pay1.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":1,"renderable":1},{"_id":"source/images/ali_pay.jpg","path":"images/ali_pay.jpg","modified":1,"renderable":0},{"_id":"source/images/wechat_pay.jpg","path":"images/wechat_pay.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"source/images/screenShot/iterm2_color.jpg","path":"images/screenShot/iterm2_color.jpg","modified":1,"renderable":0},{"_id":"source/images/screenShot/iterm2_keymap.jpg","path":"images/screenShot/iterm2_keymap.jpg","modified":1,"renderable":0},{"_id":"source/images/screenShot/iterm2_tmux_keymap.jpg","path":"images/screenShot/iterm2_tmux_keymap.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"5a92d9558588b86f978c593ca23c2588906877d1","modified":1496382612000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1494323694000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1494323694000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1494323694000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1494323694000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1494323694000},{"_id":"themes/yilia/.DS_Store","hash":"9e0a2944c5aafc816026948b21b836a20661bbc9","modified":1494831168000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1494323694000},{"_id":"themes/yilia/_config.yml","hash":"d2b7cfa660cf682dd5057c72924082caed281683","modified":1495897052000},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1494323694000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1494323694000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1494323694000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1498810939000},{"_id":"source/_posts/caddy的简易使用.md","hash":"bc3678e8ba2f9ba6fc87b624e8345b0ae690561e","modified":1498810840000},{"_id":"source/_posts/ffmpeg简易介绍.md","hash":"7d43c52add7e29124d33c73a3dab56f2831b0acf","modified":1497332464000},{"_id":"source/_posts/Linux下打RPM包.md","hash":"f6ee73e8ac31e1efbd13add1c22cc8e8b21eea3e","modified":1495897293000},{"_id":"source/_posts/RN中使用mobx来进行状态管理.md","hash":"0f31d1acc93a883a11af7b8f4eb995052621ce9d","modified":1497332164000},{"_id":"source/_posts/Mac下打造流畅的终端使用环境.md","hash":"0f2dc9154967cf88cc97ede13c454abba4fa1608","modified":1496198896000},{"_id":"source/_posts/iterm,tmux,vim的常用快捷键.md","hash":"441a4fbb1ad33b0dab267dda441eb700734c2136","modified":1497320844000},{"_id":"source/_posts/公众号web开发过程记录.md","hash":"f8b308890ec30d94684ec850d2fa4dcaa20b6741","modified":1498126644000},{"_id":"source/_posts/各个平台上传图片.md","hash":"747258a78adc4d59b98e62d0321fd3213f622b0a","modified":1497856117000},{"_id":"source/_posts/python 开发服务端.md","hash":"e8e178e7d0f9894387b923f9fab97889ac0bfb4e","modified":1497856119000},{"_id":"source/_posts/shell 脚本中读取参数值.md","hash":"c540bd36fa48bacfae11b46b4e3d2101b3e84c9f","modified":1495897307000},{"_id":"source/_posts/supervisor 是基于python的进程管理工具.md","hash":"37551c5194286c7ef12b718fa9194ee0fbd2b68d","modified":1495897325000},{"_id":"source/images/ali_pay1.jpg","hash":"e148168a1ecd2047cfc4477271e0b3a2bbb95db9","modified":1494831538000},{"_id":"source/images/avatar.jpg","hash":"419755f44dfcd73ed13ae43d9d74adb0b6ef4e4d","modified":1494322683000},{"_id":"source/images/.DS_Store","hash":"34fb03d76d7bc214244bc07ba34d628914a1cf7a","modified":1497929614000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1494323694000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1494323694000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1494323674000},{"_id":"themes/yilia/.git/index","hash":"a37c17fcd5181c69dde7d51b7a575e150376cbdf","modified":1494828292000},{"_id":"themes/yilia/.git/packed-refs","hash":"a8140137954dec646b34af234b44895c240f8f38","modified":1494323694000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1494323694000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1494323694000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1494323694000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1494323694000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1494323694000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1494323694000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1494323694000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1494323694000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1494323694000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1494323694000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1494323694000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494323694000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1494323694000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494323694000},{"_id":"themes/yilia/layout/.DS_Store","hash":"10ebbd14baa4908d0f1e52bb9c58048af8a88be4","modified":1494828315000},{"_id":"themes/yilia/source/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1494323694000},{"_id":"themes/yilia/source/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1494323694000},{"_id":"themes/yilia/source/.DS_Store","hash":"027b69422bb9ac46d2fac54136ff2d6abee4eef5","modified":1494831173000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1494323694000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1494323694000},{"_id":"themes/yilia/source-src/.DS_Store","hash":"e678a4ab5fd95182046869b13917edf9f778975c","modified":1494835932000},{"_id":"source/images/ali_pay.jpg","hash":"6e555acc6f2b1c5f25a3dda2c4559248e7f69714","modified":1497863075000},{"_id":"source/images/wechat_pay.jpg","hash":"cb369604dbab18468279e5a3292e93c4fd47bc9a","modified":1497862984000},{"_id":"themes/yilia/source/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1494323694000},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1494323694000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1494323674000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1494323674000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1494323674000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"7dd6deb0a28a8963071916454799c014a3da9a00","modified":1494323694000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1494323674000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"7547bc40b533d9db62f430c43dc0e595c9caa5b6","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"a9628ab50d0174d49988f4a24541c640e1e7b686","modified":1494828408000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1494323694000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1494323694000},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1494323694000},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1494323694000},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1494323694000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1494323694000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1494323694000},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1494323694000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1494323694000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1494323694000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1494323694000},{"_id":"themes/yilia/source/img/avatar.jpg","hash":"419755f44dfcd73ed13ae43d9d74adb0b6ef4e4d","modified":1494324568000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1494323694000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1494323694000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1494323694000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1494323694000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1494323694000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1494323694000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1494323694000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1494323694000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1494323694000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1494323694000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1494323694000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1494323694000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1494323694000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"ac8c3312182519e33d0f729d157deb36e5f42894","modified":1494323694000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1494323694000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"a40400734c6509b9ac6e393a6681ccd8bafed5eb","modified":1494323694000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1494323694000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1494323694000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1494323694000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1494323694000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1494323694000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1494323694000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1494323694000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1494323694000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1494323694000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1494323694000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1494323694000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9591a0f61236a56b2a15a541f572bcfd93823a0f","modified":1494323694000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1494323694000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1494323694000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1494323694000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1494323694000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1494323694000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1494323694000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1494323694000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"6160c13783a7f31dab4fdcc6b752b3a368586d67","modified":1494323694000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"891805485d22f9cbd7a1042d98f7953414f4c0fd","modified":1494323694000},{"_id":"themes/yilia/.git/objects/pack/pack-34ce1806cd91d51f5b1d1f827d0021b0fcdfc362.idx","hash":"98ba278b2bd2a0baf4c76325542a2c9922d7cd45","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"1ba1d4a4663eae37b1a2b75c47dfdff4fb3cbf52","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1494323694000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"7851d961ae172f521ba71e255fdc60f4ca0b45ed","modified":1494323694000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1494323694000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1494323694000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1494323694000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1494323694000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1494323694000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1494323694000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1494323694000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1494323694000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1494323694000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1494323694000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1494323694000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1494323694000},{"_id":"source/images/screenShot/iterm2_color.jpg","hash":"62a8abd33d8dbebdcc9ab53f6c4975311e3c3f41","modified":1495875048000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1494323694000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"7dd6deb0a28a8963071916454799c014a3da9a00","modified":1494323694000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"7dd6deb0a28a8963071916454799c014a3da9a00","modified":1494323694000},{"_id":"source/images/screenShot/iterm2_keymap.jpg","hash":"d0325aac666446894a687567edb5b4b5e14bad18","modified":1496384594000},{"_id":"source/images/screenShot/iterm2_tmux_keymap.jpg","hash":"91a1ba4c89e8dd9c8036962268333b508c9264eb","modified":1496386335000},{"_id":"themes/yilia/.git/objects/pack/pack-34ce1806cd91d51f5b1d1f827d0021b0fcdfc362.pack","hash":"023b4f59fd0e9f9fe92edb89711489870a07d85a","modified":1494323694000},{"_id":"public/content.json","hash":"0a773e0d084cbfdcdba6b92edfbdfa5907e6fa8e","modified":1498810981910},{"_id":"public/2017/06/30/caddy的简易使用/index.html","hash":"da105c5667dec2c7fb3a934b5a22fff0569208b9","modified":1498811000546},{"_id":"public/2017/06/19/公众号web开发过程记录/index.html","hash":"4b9e860a647e7dc0c6aeee6fe1a0c708b6f11d78","modified":1498811000546},{"_id":"public/2017/06/19/python 开发服务端/index.html","hash":"3f4354f7a27e54d7503f337d303defe34019b2a1","modified":1498811000547},{"_id":"public/2017/06/13/RN中使用mobx来进行状态管理/index.html","hash":"909cfb4979778c1888a4d9d703e4f54f7f401a08","modified":1498811000547},{"_id":"public/2017/06/13/各个平台上传图片/index.html","hash":"444ef2929557a2e198e9d15ffb0288a4bd28a5a1","modified":1498811000547},{"_id":"public/2017/06/02/iterm,tmux,vim的常用快捷键/index.html","hash":"9253d9dc7e1122d258624d1ee08131ede9633cca","modified":1498811000547},{"_id":"public/2017/05/27/Mac下打造流畅的终端使用环境/index.html","hash":"e894e70c4bedd76e85e9677d4976afe73dec4f08","modified":1498811000548},{"_id":"public/2017/05/25/shell 脚本中读取参数值/index.html","hash":"eebd801b79ad4c0ad0baf572cfd0bb601a0cf8c8","modified":1498811000548},{"_id":"public/2017/05/22/ffmpeg简易介绍/index.html","hash":"4ebf0725a907a8aad9c1fdb5691be2fa0e0f00b0","modified":1498811000548},{"_id":"public/2017/05/15/Linux下打RPM包/index.html","hash":"9251520afc7d464700afc6f7519f3ac39164bd9f","modified":1498811000548},{"_id":"public/2017/04/28/supervisor 是基于python的进程管理工具/index.html","hash":"93cce2e364902834079a42b1b63600b6c4410201","modified":1498811000549},{"_id":"public/archives/index.html","hash":"1014a359f0a81b071e0433f8c67333f895082a5c","modified":1498811000549},{"_id":"public/archives/page/2/index.html","hash":"4ef4a1c944420976d15a9e3825e7a49ccf6cca32","modified":1498811000549},{"_id":"public/archives/page/3/index.html","hash":"f921c6833089b0c3e4392a7a736e97db127891c0","modified":1498811000549},{"_id":"public/archives/2017/index.html","hash":"7836f13ebbbca6c857824dc271ad721d13f8e18d","modified":1498811000549},{"_id":"public/archives/2017/page/2/index.html","hash":"3ac4e2cf27a31ced595c677ccae7f2a63fece3f1","modified":1498811000550},{"_id":"public/archives/2017/page/3/index.html","hash":"5270f70fcef9813156f52615d6991a2d3171886d","modified":1498811000550},{"_id":"public/archives/2017/04/index.html","hash":"15bb82778eae9afe8a2214068c016cc0cfb4521d","modified":1498811000550},{"_id":"public/archives/2017/05/index.html","hash":"8fd26f1a4298d3aaa35689352dc56fd3331eb710","modified":1498811000550},{"_id":"public/archives/2017/06/index.html","hash":"869f6e22070f68b4d6464eb6ed7478e6f0102c0b","modified":1498811000550},{"_id":"public/archives/2017/06/page/2/index.html","hash":"538ab1219be766fbdc9e141ccba8dfde7579d723","modified":1498811000550},{"_id":"public/index.html","hash":"6b3e29a282e43f22b4d9d4b3ad6841e367751551","modified":1498811000551},{"_id":"public/page/2/index.html","hash":"090cd3056c684b7e78b276a873ab28efd72ac57b","modified":1498811000551},{"_id":"public/page/3/index.html","hash":"1ad8ccba15a09b7a386d8d6b397388dbb153442b","modified":1498811000551},{"_id":"public/tags/Linux/index.html","hash":"1807a272143af3bcd28a3382bba40414bf414b35","modified":1498811000551},{"_id":"public/tags/扩展/index.html","hash":"60a09e71be1077c575a52a59525c1c04f56a7987","modified":1498811000551},{"_id":"public/tags/react-native/index.html","hash":"9849f4a32604fec418aa166446110d1466656d01","modified":1498811000552},{"_id":"public/tags/技巧/index.html","hash":"32adfe952a94ae16371b198c6afbecbda1a20aa2","modified":1498811000552},{"_id":"public/tags/前端/index.html","hash":"e2b0c494d3f19cd6220520cff83738796082d4a3","modified":1498811000552},{"_id":"public/tags/开发随笔/index.html","hash":"9b0edb348aa356a68954ddac1af5ae1de1860868","modified":1498811000552},{"_id":"public/tags/python/index.html","hash":"06c5f6de754d27cf41800559145e5051f6a643c3","modified":1498811000552},{"_id":"public/images/ali_pay1.jpg","hash":"e148168a1ecd2047cfc4477271e0b3a2bbb95db9","modified":1498811000557},{"_id":"public/images/avatar.jpg","hash":"419755f44dfcd73ed13ae43d9d74adb0b6ef4e4d","modified":1498811000557},{"_id":"public/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1498811000557},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1498811000557},{"_id":"public/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1498811000557},{"_id":"public/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1498811000557},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1498811000558},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1498811000558},{"_id":"public/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1498811000558},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1498811000558},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1498811000558},{"_id":"public/img/avatar.jpg","hash":"419755f44dfcd73ed13ae43d9d74adb0b6ef4e4d","modified":1498811000558},{"_id":"public/images/ali_pay.jpg","hash":"6e555acc6f2b1c5f25a3dda2c4559248e7f69714","modified":1498811000573},{"_id":"public/images/wechat_pay.jpg","hash":"cb369604dbab18468279e5a3292e93c4fd47bc9a","modified":1498811000965},{"_id":"public/main.b3331d.css","hash":"0a96f6cbe475e6c296f958a65e64c991d6c846a6","modified":1498811000986},{"_id":"public/slider.445162.js","hash":"27435a2fc176d3bc6f5ad10e1327e657d4b2d301","modified":1498811000986},{"_id":"public/main.b3331d.js","hash":"616b92aaaaf7c589e2e596aa616b486f333db1b0","modified":1498811000986},{"_id":"public/mobile.8d90af.js","hash":"3f3782f9a408756b547d3e43392deb26fab0da6e","modified":1498811000986},{"_id":"public/images/screenShot/iterm2_color.jpg","hash":"62a8abd33d8dbebdcc9ab53f6c4975311e3c3f41","modified":1498811000991},{"_id":"public/images/screenShot/iterm2_keymap.jpg","hash":"d0325aac666446894a687567edb5b4b5e14bad18","modified":1498811001002},{"_id":"public/images/screenShot/iterm2_tmux_keymap.jpg","hash":"91a1ba4c89e8dd9c8036962268333b508c9264eb","modified":1498811001006}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"caddy的简易使用","date":"2017-06-30T07:47:20.000Z","_content":"\n​\tcaddy是一个开源的，使用golang 编写，支持HTTPS的web服务器，同时也可以作为负载均衡器使用，caddy的使用非常简单，只要一个二进制包就可以执行，不用像apache 或者nginx 配置起来那么麻烦。\n\n​\t [caddy下载](https://caddyserver.com/download)\n\n​\tcaddy可以使用命令行参数的方式去执行，也可以指定配置文件去执行。使用命令行去执行，具体的参数名称参考 [caddy 接收参数](https://caddyserver.com/docs/cli)\n\n​        caddy在某个文件夹下直接执行，通过访问http://localhost:2015访问文件下的所有内容。使用起来非常简单。 \n\n### 使用\n\n 通过配置文件来使用caddy，执行是`caddy -conf caddyfile`,  给caddy 配置不同的caddyfile如下\n\n- 使用caddy 负载均衡，配置caddyfile\n\n  ```sh\n  :1234\n  proxy / ip1:port1,ip2:port2,ip3:port3{\n    policy random\n    health_check /version\n    health_check_interval 30s\n    health_check_timeout 30s\n  }\n  log ／ /var/log/caddy.log {\n  \trotate_size    100\n  \trotate_age      7\n  \trotate_keep     5\n  }\n  ```\n\n  注：caddy监听本机`1234`端口，分别将请求转发给`ip1:port1,ip2:port2,ip3:port3` 三台机器，policy为负载均衡的策略，random表示从三台机器上随机选择负载，也有其他选项least_conn, round_robin, first, ip_hash, or uri_hash。`health_check`是对三台机器提供的服务进行健康检查，/version 为进行健康检查的接口。每30秒进行一次健康检查，每次检查超过30秒表示失败。如果发现这个接口不能正常返回，则回被caddy标识为不健康的服务，则后续的负载不会到不健康的服务上。配置log记录caddy日志信息\n\n<!-- more -->\n\n- 使用caddy作为静态资源服务器，配置caddyfile\n\n  ```sh\n  :1234\n  root /opt/test\n  browse\n  ext .pdf .html .htm \n  ```\n\n   注：caddy监听本机的`1234`端口，指定了访问的根目录为/opt/test,如果/opt/test 目录下没有index.html,那么访问`http://ip:1234` 会将/opt/test目录结构展现到页面中。ext 表示可以忽略文件的后缀\n\n  ​\n\n更多的配置可以访问 [caddy配置文件](https://caddyserver.com/docs/http-caddyfile)","source":"_posts/caddy的简易使用.md","raw":"---\ntitle: caddy的简易使用\ndate: 2017-06-30 15:47:20\ntags: Linux\n---\n\n​\tcaddy是一个开源的，使用golang 编写，支持HTTPS的web服务器，同时也可以作为负载均衡器使用，caddy的使用非常简单，只要一个二进制包就可以执行，不用像apache 或者nginx 配置起来那么麻烦。\n\n​\t [caddy下载](https://caddyserver.com/download)\n\n​\tcaddy可以使用命令行参数的方式去执行，也可以指定配置文件去执行。使用命令行去执行，具体的参数名称参考 [caddy 接收参数](https://caddyserver.com/docs/cli)\n\n​        caddy在某个文件夹下直接执行，通过访问http://localhost:2015访问文件下的所有内容。使用起来非常简单。 \n\n### 使用\n\n 通过配置文件来使用caddy，执行是`caddy -conf caddyfile`,  给caddy 配置不同的caddyfile如下\n\n- 使用caddy 负载均衡，配置caddyfile\n\n  ```sh\n  :1234\n  proxy / ip1:port1,ip2:port2,ip3:port3{\n    policy random\n    health_check /version\n    health_check_interval 30s\n    health_check_timeout 30s\n  }\n  log ／ /var/log/caddy.log {\n  \trotate_size    100\n  \trotate_age      7\n  \trotate_keep     5\n  }\n  ```\n\n  注：caddy监听本机`1234`端口，分别将请求转发给`ip1:port1,ip2:port2,ip3:port3` 三台机器，policy为负载均衡的策略，random表示从三台机器上随机选择负载，也有其他选项least_conn, round_robin, first, ip_hash, or uri_hash。`health_check`是对三台机器提供的服务进行健康检查，/version 为进行健康检查的接口。每30秒进行一次健康检查，每次检查超过30秒表示失败。如果发现这个接口不能正常返回，则回被caddy标识为不健康的服务，则后续的负载不会到不健康的服务上。配置log记录caddy日志信息\n\n<!-- more -->\n\n- 使用caddy作为静态资源服务器，配置caddyfile\n\n  ```sh\n  :1234\n  root /opt/test\n  browse\n  ext .pdf .html .htm \n  ```\n\n   注：caddy监听本机的`1234`端口，指定了访问的根目录为/opt/test,如果/opt/test 目录下没有index.html,那么访问`http://ip:1234` 会将/opt/test目录结构展现到页面中。ext 表示可以忽略文件的后缀\n\n  ​\n\n更多的配置可以访问 [caddy配置文件](https://caddyserver.com/docs/http-caddyfile)","slug":"caddy的简易使用","published":1,"updated":"2017-06-30T08:20:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy3f0000i9s6muffc190","content":"<p>​ caddy是一个开源的，使用golang 编写，支持HTTPS的web服务器，同时也可以作为负载均衡器使用，caddy的使用非常简单，只要一个二进制包就可以执行，不用像apache\n  或者nginx 配置起来那么麻烦。</p>\n<p>​\n  <a href=\"https://caddyserver.com/download\" target=\"_blank\" rel=\"external\">caddy下载</a>\n</p>\n<p>​ caddy可以使用命令行参数的方式去执行，也可以指定配置文件去执行。使用命令行去执行，具体的参数名称参考\n  <a href=\"https://caddyserver.com/docs/cli\" target=\"_blank\" rel=\"external\">caddy 接收参数</a>\n</p>\n<p>​ caddy在某个文件夹下直接执行，通过访问\n  <a href=\"http://localhost:2015访问文件下的所有内容。使用起来非常简单。\" target=\"_blank\" rel=\"external\">http://localhost:2015访问文件下的所有内容。使用起来非常简单。</a>\n</p>\n<h3 id=\"使用\">\n  <a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3>\n<p> 通过配置文件来使用caddy，执行是\n  <code>caddy -conf caddyfile</code>, 给caddy 配置不同的caddyfile如下</p>\n<ul>\n  <li>\n    <p>使用caddy 负载均衡，配置caddyfile</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">:1234</div><div class=\"line\">proxy / ip1:port1,ip2:port2,ip3:port3&#123;</div><div class=\"line\">  policy random</div><div class=\"line\">  health_check /version</div><div class=\"line\">  health_check_interval 30s</div><div class=\"line\">  health_check_timeout 30s</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">log</span> ／ /var/<span class=\"built_in\">log</span>/caddy.log &#123;</div><div class=\"line\">\trotate_size    100</div><div class=\"line\">\trotate_age      7</div><div class=\"line\">\trotate_keep     5</div><div class=\"line\">&#125;</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>注：caddy监听本机\n      <code>1234</code>端口，分别将请求转发给\n      <code>ip1:port1,ip2:port2,ip3:port3</code> 三台机器，policy为负载均衡的策略，random表示从三台机器上随机选择负载，也有其他选项least_conn,\n      round_robin, first, ip_hash, or uri_hash。\n      <code>health_check</code>是对三台机器提供的服务进行健康检查，/version 为进行健康检查的接口。每30秒进行一次健康检查，每次检查超过30秒表示失败。如果发现这个接口不能正常返回，则回被caddy标识为不健康的服务，则后续的负载不会到不健康的服务上。配置log记录caddy日志信息</p>\n  </li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n  <li>\n    <p>使用caddy作为静态资源服务器，配置caddyfile</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">:1234</div><div class=\"line\">root /opt/<span class=\"built_in\">test</span></div><div class=\"line\">browse</div><div class=\"line\">ext .pdf .html .htm</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p> 注：caddy监听本机的\n      <code>1234</code>端口，指定了访问的根目录为/opt/test,如果/opt/test 目录下没有index.html,那么访问\n      <code>http://ip:1234</code> 会将/opt/test目录结构展现到页面中。ext 表示可以忽略文件的后缀</p>\n    <p>​</p>\n  </li>\n</ul>\n<p>更多的配置可以访问\n  <a href=\"https://caddyserver.com/docs/http-caddyfile\" target=\"_blank\" rel=\"external\">caddy配置文件</a>\n</p>\n","site":{"data":{}},"excerpt":"<p>​ caddy是一个开源的，使用golang 编写，支持HTTPS的web服务器，同时也可以作为负载均衡器使用，caddy的使用非常简单，只要一个二进制包就可以执行，不用像apache\n  或者nginx 配置起来那么麻烦。</p>\n<p>​\n  <a href=\"https://caddyserver.com/download\" target=\"_blank\" rel=\"external\">caddy下载</a>\n</p>\n<p>​ caddy可以使用命令行参数的方式去执行，也可以指定配置文件去执行。使用命令行去执行，具体的参数名称参考\n  <a href=\"https://caddyserver.com/docs/cli\" target=\"_blank\" rel=\"external\">caddy 接收参数</a>\n</p>\n<p>​ caddy在某个文件夹下直接执行，通过访问\n  <a href=\"http://localhost:2015访问文件下的所有内容。使用起来非常简单。\" target=\"_blank\" rel=\"external\">http://localhost:2015访问文件下的所有内容。使用起来非常简单。</a>\n</p>\n<h3 id=\"使用\">\n  <a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3>\n<p> 通过配置文件来使用caddy，执行是\n  <code>caddy -conf caddyfile</code>, 给caddy 配置不同的caddyfile如下</p>\n<ul>\n  <li>\n    <p>使用caddy 负载均衡，配置caddyfile</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">:1234</div><div class=\"line\">proxy / ip1:port1,ip2:port2,ip3:port3&#123;</div><div class=\"line\">  policy random</div><div class=\"line\">  health_check /version</div><div class=\"line\">  health_check_interval 30s</div><div class=\"line\">  health_check_timeout 30s</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">log</span> ／ /var/<span class=\"built_in\">log</span>/caddy.log &#123;</div><div class=\"line\">\trotate_size    100</div><div class=\"line\">\trotate_age      7</div><div class=\"line\">\trotate_keep     5</div><div class=\"line\">&#125;</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>注：caddy监听本机\n      <code>1234</code>端口，分别将请求转发给\n      <code>ip1:port1,ip2:port2,ip3:port3</code> 三台机器，policy为负载均衡的策略，random表示从三台机器上随机选择负载，也有其他选项least_conn,\n      round_robin, first, ip_hash, or uri_hash。\n      <code>health_check</code>是对三台机器提供的服务进行健康检查，/version 为进行健康检查的接口。每30秒进行一次健康检查，每次检查超过30秒表示失败。如果发现这个接口不能正常返回，则回被caddy标识为不健康的服务，则后续的负载不会到不健康的服务上。配置log记录caddy日志信息</p>\n  </li>\n</ul>","more":"<ul>\n  <li>\n    <p>使用caddy作为静态资源服务器，配置caddyfile</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">:1234</div><div class=\"line\">root /opt/<span class=\"built_in\">test</span></div><div class=\"line\">browse</div><div class=\"line\">ext .pdf .html .htm</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p> 注：caddy监听本机的\n      <code>1234</code>端口，指定了访问的根目录为/opt/test,如果/opt/test 目录下没有index.html,那么访问\n      <code>http://ip:1234</code> 会将/opt/test目录结构展现到页面中。ext 表示可以忽略文件的后缀</p>\n    <p>​</p>\n  </li>\n</ul>\n<p>更多的配置可以访问\n  <a href=\"https://caddyserver.com/docs/http-caddyfile\" target=\"_blank\" rel=\"external\">caddy配置文件</a>\n</p>"},{"title":"ffmpeg简易介绍","date":"2017-05-22T06:34:12.000Z","_content":"\n## 媒体文件结构\n\n一个媒体文件并不像许多人想象的那样，是将媒体内容编码起来直接作为文件的。实际上，它通常是由多个不同种类的媒体流（ Stream ）组成，再以特定的封装格式封装起来的。\n\n比较常见的媒体流就是视频流跟音频流了，顾名思义，视频流存储的就是视频信息，音频流存储的就是音频信息。一个视频流或者音频流的内容，就是以特定的编码格式所存储的视频或音频信息。\n\n**一个文件的里面的媒体流所采用的编码格式跟这个文件的后缀名并没有完全的必然联系。** **文件的后缀名通常就代表这个文件的封装格式。**\n\n## ffmpeg 安装\n\n自行下载使用系统安装对应的安装包[官网下载](https://ffmpeg.org/download.html)\n\n以下使用的平台都为Mac系统下\n\n<!-- more -->\n\n## 开始使用\n\n1. 打开终端，查看ffmpeg帮助文档，简要了解ffmpeg的使用\n\n   ```ssh\n   ffmpeg -help\n   ```\n\n   ```ssh\n   ffmpeg version 3.3 Copyright (c) 2000-2017 the FFmpeg developers\n     built with Apple LLVM version 8.1.0 (clang-802.0.41)\n     configuration: --prefix=/usr/local/Cellar/ffmpeg/3.3 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-libmp3lame --enable-libx264 --enable-libxvid --enable-opencl --disable-lzma --enable-vda\n     libavutil      55. 58.100 / 55. 58.100\n     libavcodec     57. 89.100 / 57. 89.100\n     libavformat    57. 71.100 / 57. 71.100\n     libavdevice    57.  6.100 / 57.  6.100\n     libavfilter     6. 82.100 /  6. 82.100\n     libavresample   3.  5.  0 /  3.  5.  0\n     libswscale      4.  6.100 /  4.  6.100\n     libswresample   2.  7.100 /  2.  7.100\n     libpostproc    54.  5.100 / 54.  5.100\n   Hyper fast Audio and Video encoder\n   usage: ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}...\n   ```\n\n   重点是关注 usage: ffmpeg [options][[infile options] -i infile]... {[outfile options] outfile}… 这句是说ffmpeg 的主要用法\n\n   ​\n\n2. 查看ffmpeg 支持的格式\n\n   查看封装格式，包括音频，视频等封装格式\n\n   ```ssh\n   ffmpeg -formats\n   ```\n\n   查看编解码器包括音频，视频等封装格式\n\n   ```ssh\n   ffmpeg -codecs\n   ```\n\n3. 进行格式转换\n\n   ```ssh\n   ffmpeg -i a.mp4 b.mkv\n   ```\n\n   这里是将mp4格式的视频转换成mkv格式。\n\n   **注：** 查看默认编码格式，以下的Matroska也就是指 mkv\n\n   ```code\n   ffmpeg -help muxer=Matroska\n\n   #以下为摘要信息，从中可以看出默认的视频编码为h264,音频编码为ac3,字幕流编码为ass，部分格式视频不支持字幕流\n   Muxer matroska [Matroska]:\n       Common extensions: mkv.\n       Mime type: video/x-matroska.\n       Default video codec: h264.\n       Default audio codec: ac3.\n       Default subtitle codec: ass.\n   ```\n\n4. 指定编码器进行转换\n\n   ```sh\n   ffmpeg -i a.mp4 -c:v hevc -c:a aac b.mkv\n   ```\n\n   **注：** `-c:v` 可以用`-vcodec`替换，当它们的值为copy时，就表示编码格式不进行转换\n\n5. 在转换时可以进行的调整\n\n   在 `ffmpeg -help` 时可以看到有一些和音频，视频，字幕相关的选项\n\n   ```ssh\n   Video options:\n   -vframes number     set the number of video frames to output\n   -r rate             set frame rate (Hz value, fraction or abbreviation)\n   -s size             set frame size (WxH or abbreviation)\n   -aspect aspect      set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)\n   -bits_per_raw_sample number  set the number of bits per raw sample\n   -vn                 disable video\n   -vcodec codec       force video codec ('copy' to copy stream)\n   -timecode hh:mm:ss[:;.]ff  set initial TimeCode value.\n   -pass n             select the pass number (1 to 3)\n   -vf filter_graph    set video filters\n   -ab bitrate         audio bitrate (please use -b:a)\n   -b bitrate          video bitrate (please use -b:v)\n   -dn                 disable data\n\n   Audio options:\n   -aframes number     set the number of audio frames to output\n   -aq quality         set audio quality (codec-specific)\n   -ar rate            set audio sampling rate (in Hz)\n   -ac channels        set number of audio channels\n   -an                 disable audio\n   -acodec codec       force audio codec ('copy' to copy stream)\n   -vol volume         change audio volume (256=normal)\n   -af filter_graph    set audio filters\n\n   Subtitle options:\n   -s size             set frame size (WxH or abbreviation)\n   -sn                 disable subtitle\n   -scodec codec       force subtitle codec ('copy' to copy stream)\n   -stag fourcc/tag    force subtitle tag/fourcc\n   -fix_sub_duration   fix subtitles duration\n   -canvas_size size   set canvas size (WxH or abbreviation)\n   -spre preset        set the subtitle options to the indicated preset\n   ```\n\n   当然还有对整个文件进行调整的参数\n\n   ```ssh\n   Per-file main options:\n   -f fmt              force format\n   -c codec            codec name\n   -codec codec        codec name\n   -pre preset         preset name\n   -map_metadata outfile[,metadata]:infile[,metadata]  set metadata information of outfile from infile\n   -t duration         record or transcode \"duration\" seconds of audio/video\n   -to time_stop       record or transcode stop time\n   -fs limit_size      set the limit file size in bytes\n   -ss time_off        set the start time offset\n   -sseof time_off     set the start time offset relative to EOF\n   -seek_timestamp     enable/disable seeking by timestamp with -ss\n   -timestamp time     set the recording timestamp ('now' to set the current time)\n   -metadata string=string  add metadata\n   -program title=string:st=number...  add program with specified streams\n   -target type        specify target file type (\"vcd\", \"svcd\", \"dvd\", \"dv\" or \"dv50\" with optional prefixes \"pal-\", \"ntsc-\" or \"film-\")\n   -apad               audio pad\n   -frames number      set the number of frames to output\n   -filter filter_graph  set stream filtergraph\n   -filter_script filename  read stream filtergraph description from a file\n   -reinit_filter      reinit filtergraph on input parameter changes\n   -discard            discard\n   -disposition        disposition\n   ```\n\n   [文章参考](https://github.com/FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh) \n\n   ​\n\n\n","source":"_posts/ffmpeg简易介绍.md","raw":"---\ntitle: ffmpeg简易介绍\ndate: 2017-05-22 14:34:12\ntags: 扩展\n\n---\n\n## 媒体文件结构\n\n一个媒体文件并不像许多人想象的那样，是将媒体内容编码起来直接作为文件的。实际上，它通常是由多个不同种类的媒体流（ Stream ）组成，再以特定的封装格式封装起来的。\n\n比较常见的媒体流就是视频流跟音频流了，顾名思义，视频流存储的就是视频信息，音频流存储的就是音频信息。一个视频流或者音频流的内容，就是以特定的编码格式所存储的视频或音频信息。\n\n**一个文件的里面的媒体流所采用的编码格式跟这个文件的后缀名并没有完全的必然联系。** **文件的后缀名通常就代表这个文件的封装格式。**\n\n## ffmpeg 安装\n\n自行下载使用系统安装对应的安装包[官网下载](https://ffmpeg.org/download.html)\n\n以下使用的平台都为Mac系统下\n\n<!-- more -->\n\n## 开始使用\n\n1. 打开终端，查看ffmpeg帮助文档，简要了解ffmpeg的使用\n\n   ```ssh\n   ffmpeg -help\n   ```\n\n   ```ssh\n   ffmpeg version 3.3 Copyright (c) 2000-2017 the FFmpeg developers\n     built with Apple LLVM version 8.1.0 (clang-802.0.41)\n     configuration: --prefix=/usr/local/Cellar/ffmpeg/3.3 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-libmp3lame --enable-libx264 --enable-libxvid --enable-opencl --disable-lzma --enable-vda\n     libavutil      55. 58.100 / 55. 58.100\n     libavcodec     57. 89.100 / 57. 89.100\n     libavformat    57. 71.100 / 57. 71.100\n     libavdevice    57.  6.100 / 57.  6.100\n     libavfilter     6. 82.100 /  6. 82.100\n     libavresample   3.  5.  0 /  3.  5.  0\n     libswscale      4.  6.100 /  4.  6.100\n     libswresample   2.  7.100 /  2.  7.100\n     libpostproc    54.  5.100 / 54.  5.100\n   Hyper fast Audio and Video encoder\n   usage: ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}...\n   ```\n\n   重点是关注 usage: ffmpeg [options][[infile options] -i infile]... {[outfile options] outfile}… 这句是说ffmpeg 的主要用法\n\n   ​\n\n2. 查看ffmpeg 支持的格式\n\n   查看封装格式，包括音频，视频等封装格式\n\n   ```ssh\n   ffmpeg -formats\n   ```\n\n   查看编解码器包括音频，视频等封装格式\n\n   ```ssh\n   ffmpeg -codecs\n   ```\n\n3. 进行格式转换\n\n   ```ssh\n   ffmpeg -i a.mp4 b.mkv\n   ```\n\n   这里是将mp4格式的视频转换成mkv格式。\n\n   **注：** 查看默认编码格式，以下的Matroska也就是指 mkv\n\n   ```code\n   ffmpeg -help muxer=Matroska\n\n   #以下为摘要信息，从中可以看出默认的视频编码为h264,音频编码为ac3,字幕流编码为ass，部分格式视频不支持字幕流\n   Muxer matroska [Matroska]:\n       Common extensions: mkv.\n       Mime type: video/x-matroska.\n       Default video codec: h264.\n       Default audio codec: ac3.\n       Default subtitle codec: ass.\n   ```\n\n4. 指定编码器进行转换\n\n   ```sh\n   ffmpeg -i a.mp4 -c:v hevc -c:a aac b.mkv\n   ```\n\n   **注：** `-c:v` 可以用`-vcodec`替换，当它们的值为copy时，就表示编码格式不进行转换\n\n5. 在转换时可以进行的调整\n\n   在 `ffmpeg -help` 时可以看到有一些和音频，视频，字幕相关的选项\n\n   ```ssh\n   Video options:\n   -vframes number     set the number of video frames to output\n   -r rate             set frame rate (Hz value, fraction or abbreviation)\n   -s size             set frame size (WxH or abbreviation)\n   -aspect aspect      set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)\n   -bits_per_raw_sample number  set the number of bits per raw sample\n   -vn                 disable video\n   -vcodec codec       force video codec ('copy' to copy stream)\n   -timecode hh:mm:ss[:;.]ff  set initial TimeCode value.\n   -pass n             select the pass number (1 to 3)\n   -vf filter_graph    set video filters\n   -ab bitrate         audio bitrate (please use -b:a)\n   -b bitrate          video bitrate (please use -b:v)\n   -dn                 disable data\n\n   Audio options:\n   -aframes number     set the number of audio frames to output\n   -aq quality         set audio quality (codec-specific)\n   -ar rate            set audio sampling rate (in Hz)\n   -ac channels        set number of audio channels\n   -an                 disable audio\n   -acodec codec       force audio codec ('copy' to copy stream)\n   -vol volume         change audio volume (256=normal)\n   -af filter_graph    set audio filters\n\n   Subtitle options:\n   -s size             set frame size (WxH or abbreviation)\n   -sn                 disable subtitle\n   -scodec codec       force subtitle codec ('copy' to copy stream)\n   -stag fourcc/tag    force subtitle tag/fourcc\n   -fix_sub_duration   fix subtitles duration\n   -canvas_size size   set canvas size (WxH or abbreviation)\n   -spre preset        set the subtitle options to the indicated preset\n   ```\n\n   当然还有对整个文件进行调整的参数\n\n   ```ssh\n   Per-file main options:\n   -f fmt              force format\n   -c codec            codec name\n   -codec codec        codec name\n   -pre preset         preset name\n   -map_metadata outfile[,metadata]:infile[,metadata]  set metadata information of outfile from infile\n   -t duration         record or transcode \"duration\" seconds of audio/video\n   -to time_stop       record or transcode stop time\n   -fs limit_size      set the limit file size in bytes\n   -ss time_off        set the start time offset\n   -sseof time_off     set the start time offset relative to EOF\n   -seek_timestamp     enable/disable seeking by timestamp with -ss\n   -timestamp time     set the recording timestamp ('now' to set the current time)\n   -metadata string=string  add metadata\n   -program title=string:st=number...  add program with specified streams\n   -target type        specify target file type (\"vcd\", \"svcd\", \"dvd\", \"dv\" or \"dv50\" with optional prefixes \"pal-\", \"ntsc-\" or \"film-\")\n   -apad               audio pad\n   -frames number      set the number of frames to output\n   -filter filter_graph  set stream filtergraph\n   -filter_script filename  read stream filtergraph description from a file\n   -reinit_filter      reinit filtergraph on input parameter changes\n   -discard            discard\n   -disposition        disposition\n   ```\n\n   [文章参考](https://github.com/FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh) \n\n   ​\n\n\n","slug":"ffmpeg简易介绍","published":1,"updated":"2017-06-13T05:41:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy3m0001i9s6blhjo0wr","content":"<h2 id=\"媒体文件结构\">\n  <a href=\"#媒体文件结构\" class=\"headerlink\" title=\"媒体文件结构\"></a>媒体文件结构</h2>\n<p>一个媒体文件并不像许多人想象的那样，是将媒体内容编码起来直接作为文件的。实际上，它通常是由多个不同种类的媒体流（ Stream ）组成，再以特定的封装格式封装起来的。</p>\n<p>比较常见的媒体流就是视频流跟音频流了，顾名思义，视频流存储的就是视频信息，音频流存储的就是音频信息。一个视频流或者音频流的内容，就是以特定的编码格式所存储的视频或音频信息。</p>\n<p>\n  <strong>一个文件的里面的媒体流所采用的编码格式跟这个文件的后缀名并没有完全的必然联系。</strong>\n  <strong>文件的后缀名通常就代表这个文件的封装格式。</strong>\n</p>\n<h2 id=\"ffmpeg-安装\">\n  <a href=\"#ffmpeg-安装\" class=\"headerlink\" title=\"ffmpeg 安装\"></a>ffmpeg 安装</h2>\n<p>自行下载使用系统安装对应的安装包\n  <a href=\"https://ffmpeg.org/download.html\" target=\"_blank\" rel=\"external\">官网下载</a>\n</p>\n<p>以下使用的平台都为Mac系统下</p>\n<a id=\"more\"></a>\n<h2 id=\"开始使用\">\n  <a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2>\n<ol>\n  <li>\n    <p>打开终端，查看ffmpeg帮助文档，简要了解ffmpeg的使用</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -help</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg version 3.3 Copyright (c) 2000-2017 the FFmpeg developers</div><div class=\"line\">  built with Apple LLVM version 8.1.0 (clang-802.0.41)</div><div class=\"line\">  configuration: --prefix=/usr/local/Cellar/ffmpeg/3.3 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-libmp3lame --enable-libx264 --enable-libxvid --enable-opencl --disable-lzma --enable-vda</div><div class=\"line\">  libavutil      55. 58.100 / 55. 58.100</div><div class=\"line\">  libavcodec     57. 89.100 / 57. 89.100</div><div class=\"line\">  libavformat    57. 71.100 / 57. 71.100</div><div class=\"line\">  libavdevice    57.  6.100 / 57.  6.100</div><div class=\"line\">  libavfilter     6. 82.100 /  6. 82.100</div><div class=\"line\">  libavresample   3.  5.  0 /  3.  5.  0</div><div class=\"line\">  libswscale      4.  6.100 /  4.  6.100</div><div class=\"line\">  libswresample   2.  7.100 /  2.  7.100</div><div class=\"line\">  libpostproc    54.  5.100 / 54.  5.100</div><div class=\"line\">Hyper fast Audio and Video encoder</div><div class=\"line\">usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>重点是关注 usage: ffmpeg [options][[infile options] -i infile]… {[outfile options]\n      outfile}… 这句是说ffmpeg 的主要用法</p>\n    <p>​</p>\n  </li>\n  <li>\n    <p>查看ffmpeg 支持的格式</p>\n    <p>查看封装格式，包括音频，视频等封装格式</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -formats</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>查看编解码器包括音频，视频等封装格式</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -codecs</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>进行格式转换</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -i a.mp4 b.mkv</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>这里是将mp4格式的视频转换成mkv格式。</p>\n    <p>\n      <strong>注：</strong> 查看默认编码格式，以下的Matroska也就是指 mkv</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -help muxer=Matroska</div><div class=\"line\"></div><div class=\"line\">#以下为摘要信息，从中可以看出默认的视频编码为h264,音频编码为ac3,字幕流编码为ass，部分格式视频不支持字幕流</div><div class=\"line\">Muxer matroska [Matroska]:</div><div class=\"line\">    Common extensions: mkv.</div><div class=\"line\">    Mime type: video/x-matroska.</div><div class=\"line\">    Default video codec: h264.</div><div class=\"line\">    Default audio codec: ac3.</div><div class=\"line\">    Default subtitle codec: ass.</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>指定编码器进行转换</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -i a.mp4 -c:v hevc -c:a aac b.mkv</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>\n      <strong>注：</strong>\n      <code>-c:v</code> 可以用\n      <code>-vcodec</code>替换，当它们的值为copy时，就表示编码格式不进行转换</p>\n  </li>\n  <li>\n    <p>在转换时可以进行的调整</p>\n    <p>在\n      <code>ffmpeg -help</code> 时可以看到有一些和音频，视频，字幕相关的选项</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">Video options:</div><div class=\"line\">-vframes number     set the number of video frames to output</div><div class=\"line\">-r rate             set frame rate (Hz value, fraction or abbreviation)</div><div class=\"line\">-s size             set frame size (WxH or abbreviation)</div><div class=\"line\">-aspect aspect      set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)</div><div class=\"line\">-bits_per_raw_sample number  set the number of bits per raw sample</div><div class=\"line\">-vn                 disable video</div><div class=\"line\">-vcodec codec       force video codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-timecode hh:mm:ss[:;.]ff  set initial TimeCode value.</div><div class=\"line\">-pass n             select the pass number (1 to 3)</div><div class=\"line\">-vf filter_graph    set video filters</div><div class=\"line\">-ab bitrate         audio bitrate (please use -b:a)</div><div class=\"line\">-b bitrate          video bitrate (please use -b:v)</div><div class=\"line\">-dn                 disable data</div><div class=\"line\"></div><div class=\"line\">Audio options:</div><div class=\"line\">-aframes number     set the number of audio frames to output</div><div class=\"line\">-aq quality         set audio quality (codec-specific)</div><div class=\"line\">-ar rate            set audio sampling rate (in Hz)</div><div class=\"line\">-ac channels        set number of audio channels</div><div class=\"line\">-an                 disable audio</div><div class=\"line\">-acodec codec       force audio codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-vol volume         change audio volume (256=normal)</div><div class=\"line\">-af filter_graph    set audio filters</div><div class=\"line\"></div><div class=\"line\">Subtitle options:</div><div class=\"line\">-s size             set frame size (WxH or abbreviation)</div><div class=\"line\">-sn                 disable subtitle</div><div class=\"line\">-scodec codec       force subtitle codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-stag fourcc/tag    force subtitle tag/fourcc</div><div class=\"line\">-fix_sub_duration   fix subtitles duration</div><div class=\"line\">-canvas_size size   set canvas size (WxH or abbreviation)</div><div class=\"line\">-spre preset        set the subtitle options to the indicated preset</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>当然还有对整个文件进行调整的参数</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">Per-file main options:</div><div class=\"line\">-f fmt              force format</div><div class=\"line\">-c codec            codec name</div><div class=\"line\">-codec codec        codec name</div><div class=\"line\">-pre preset         preset name</div><div class=\"line\">-map_metadata outfile[,metadata]:infile[,metadata]  set metadata information of outfile from infile</div><div class=\"line\">-t duration         record or transcode &quot;duration&quot; seconds of audio/video</div><div class=\"line\">-to time_stop       record or transcode stop time</div><div class=\"line\">-fs limit_size      set the limit file size in bytes</div><div class=\"line\">-ss time_off        set the start time offset</div><div class=\"line\">-sseof time_off     set the start time offset relative to EOF</div><div class=\"line\">-seek_timestamp     enable/disable seeking by timestamp with -ss</div><div class=\"line\">-timestamp time     set the recording timestamp (&apos;now&apos; to set the current time)</div><div class=\"line\">-metadata string=string  add metadata</div><div class=\"line\">-program title=string:st=number...  add program with specified streams</div><div class=\"line\">-target type        specify target file type (&quot;vcd&quot;, &quot;svcd&quot;, &quot;dvd&quot;, &quot;dv&quot; or &quot;dv50&quot; with optional prefixes &quot;pal-&quot;, &quot;ntsc-&quot; or &quot;film-&quot;)</div><div class=\"line\">-apad               audio pad</div><div class=\"line\">-frames number      set the number of frames to output</div><div class=\"line\">-filter filter_graph  set stream filtergraph</div><div class=\"line\">-filter_script filename  read stream filtergraph description from a file</div><div class=\"line\">-reinit_filter      reinit filtergraph on input parameter changes</div><div class=\"line\">-discard            discard</div><div class=\"line\">-disposition        disposition</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>\n      <a href=\"https://github.com/FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh\" target=\"_blank\" rel=\"external\">文章参考</a>\n    </p>\n    <p>​</p>\n  </li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"媒体文件结构\">\n  <a href=\"#媒体文件结构\" class=\"headerlink\" title=\"媒体文件结构\"></a>媒体文件结构</h2>\n<p>一个媒体文件并不像许多人想象的那样，是将媒体内容编码起来直接作为文件的。实际上，它通常是由多个不同种类的媒体流（ Stream ）组成，再以特定的封装格式封装起来的。</p>\n<p>比较常见的媒体流就是视频流跟音频流了，顾名思义，视频流存储的就是视频信息，音频流存储的就是音频信息。一个视频流或者音频流的内容，就是以特定的编码格式所存储的视频或音频信息。</p>\n<p>\n  <strong>一个文件的里面的媒体流所采用的编码格式跟这个文件的后缀名并没有完全的必然联系。</strong>\n  <strong>文件的后缀名通常就代表这个文件的封装格式。</strong>\n</p>\n<h2 id=\"ffmpeg-安装\">\n  <a href=\"#ffmpeg-安装\" class=\"headerlink\" title=\"ffmpeg 安装\"></a>ffmpeg 安装</h2>\n<p>自行下载使用系统安装对应的安装包\n  <a href=\"https://ffmpeg.org/download.html\" target=\"_blank\" rel=\"external\">官网下载</a>\n</p>\n<p>以下使用的平台都为Mac系统下</p>","more":"<h2 id=\"开始使用\">\n  <a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2>\n<ol>\n  <li>\n    <p>打开终端，查看ffmpeg帮助文档，简要了解ffmpeg的使用</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -help</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg version 3.3 Copyright (c) 2000-2017 the FFmpeg developers</div><div class=\"line\">  built with Apple LLVM version 8.1.0 (clang-802.0.41)</div><div class=\"line\">  configuration: --prefix=/usr/local/Cellar/ffmpeg/3.3 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-libmp3lame --enable-libx264 --enable-libxvid --enable-opencl --disable-lzma --enable-vda</div><div class=\"line\">  libavutil      55. 58.100 / 55. 58.100</div><div class=\"line\">  libavcodec     57. 89.100 / 57. 89.100</div><div class=\"line\">  libavformat    57. 71.100 / 57. 71.100</div><div class=\"line\">  libavdevice    57.  6.100 / 57.  6.100</div><div class=\"line\">  libavfilter     6. 82.100 /  6. 82.100</div><div class=\"line\">  libavresample   3.  5.  0 /  3.  5.  0</div><div class=\"line\">  libswscale      4.  6.100 /  4.  6.100</div><div class=\"line\">  libswresample   2.  7.100 /  2.  7.100</div><div class=\"line\">  libpostproc    54.  5.100 / 54.  5.100</div><div class=\"line\">Hyper fast Audio and Video encoder</div><div class=\"line\">usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>重点是关注 usage: ffmpeg [options][[infile options] -i infile]… {[outfile options]\n      outfile}… 这句是说ffmpeg 的主要用法</p>\n    <p>​</p>\n  </li>\n  <li>\n    <p>查看ffmpeg 支持的格式</p>\n    <p>查看封装格式，包括音频，视频等封装格式</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -formats</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>查看编解码器包括音频，视频等封装格式</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -codecs</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>进行格式转换</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -i a.mp4 b.mkv</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>这里是将mp4格式的视频转换成mkv格式。</p>\n    <p>\n      <strong>注：</strong> 查看默认编码格式，以下的Matroska也就是指 mkv</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -help muxer=Matroska</div><div class=\"line\"></div><div class=\"line\">#以下为摘要信息，从中可以看出默认的视频编码为h264,音频编码为ac3,字幕流编码为ass，部分格式视频不支持字幕流</div><div class=\"line\">Muxer matroska [Matroska]:</div><div class=\"line\">    Common extensions: mkv.</div><div class=\"line\">    Mime type: video/x-matroska.</div><div class=\"line\">    Default video codec: h264.</div><div class=\"line\">    Default audio codec: ac3.</div><div class=\"line\">    Default subtitle codec: ass.</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>指定编码器进行转换</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">ffmpeg -i a.mp4 -c:v hevc -c:a aac b.mkv</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>\n      <strong>注：</strong>\n      <code>-c:v</code> 可以用\n      <code>-vcodec</code>替换，当它们的值为copy时，就表示编码格式不进行转换</p>\n  </li>\n  <li>\n    <p>在转换时可以进行的调整</p>\n    <p>在\n      <code>ffmpeg -help</code> 时可以看到有一些和音频，视频，字幕相关的选项</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">Video options:</div><div class=\"line\">-vframes number     set the number of video frames to output</div><div class=\"line\">-r rate             set frame rate (Hz value, fraction or abbreviation)</div><div class=\"line\">-s size             set frame size (WxH or abbreviation)</div><div class=\"line\">-aspect aspect      set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)</div><div class=\"line\">-bits_per_raw_sample number  set the number of bits per raw sample</div><div class=\"line\">-vn                 disable video</div><div class=\"line\">-vcodec codec       force video codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-timecode hh:mm:ss[:;.]ff  set initial TimeCode value.</div><div class=\"line\">-pass n             select the pass number (1 to 3)</div><div class=\"line\">-vf filter_graph    set video filters</div><div class=\"line\">-ab bitrate         audio bitrate (please use -b:a)</div><div class=\"line\">-b bitrate          video bitrate (please use -b:v)</div><div class=\"line\">-dn                 disable data</div><div class=\"line\"></div><div class=\"line\">Audio options:</div><div class=\"line\">-aframes number     set the number of audio frames to output</div><div class=\"line\">-aq quality         set audio quality (codec-specific)</div><div class=\"line\">-ar rate            set audio sampling rate (in Hz)</div><div class=\"line\">-ac channels        set number of audio channels</div><div class=\"line\">-an                 disable audio</div><div class=\"line\">-acodec codec       force audio codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-vol volume         change audio volume (256=normal)</div><div class=\"line\">-af filter_graph    set audio filters</div><div class=\"line\"></div><div class=\"line\">Subtitle options:</div><div class=\"line\">-s size             set frame size (WxH or abbreviation)</div><div class=\"line\">-sn                 disable subtitle</div><div class=\"line\">-scodec codec       force subtitle codec (&apos;copy&apos; to copy stream)</div><div class=\"line\">-stag fourcc/tag    force subtitle tag/fourcc</div><div class=\"line\">-fix_sub_duration   fix subtitles duration</div><div class=\"line\">-canvas_size size   set canvas size (WxH or abbreviation)</div><div class=\"line\">-spre preset        set the subtitle options to the indicated preset</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>当然还有对整个文件进行调整的参数</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">Per-file main options:</div><div class=\"line\">-f fmt              force format</div><div class=\"line\">-c codec            codec name</div><div class=\"line\">-codec codec        codec name</div><div class=\"line\">-pre preset         preset name</div><div class=\"line\">-map_metadata outfile[,metadata]:infile[,metadata]  set metadata information of outfile from infile</div><div class=\"line\">-t duration         record or transcode &quot;duration&quot; seconds of audio/video</div><div class=\"line\">-to time_stop       record or transcode stop time</div><div class=\"line\">-fs limit_size      set the limit file size in bytes</div><div class=\"line\">-ss time_off        set the start time offset</div><div class=\"line\">-sseof time_off     set the start time offset relative to EOF</div><div class=\"line\">-seek_timestamp     enable/disable seeking by timestamp with -ss</div><div class=\"line\">-timestamp time     set the recording timestamp (&apos;now&apos; to set the current time)</div><div class=\"line\">-metadata string=string  add metadata</div><div class=\"line\">-program title=string:st=number...  add program with specified streams</div><div class=\"line\">-target type        specify target file type (&quot;vcd&quot;, &quot;svcd&quot;, &quot;dvd&quot;, &quot;dv&quot; or &quot;dv50&quot; with optional prefixes &quot;pal-&quot;, &quot;ntsc-&quot; or &quot;film-&quot;)</div><div class=\"line\">-apad               audio pad</div><div class=\"line\">-frames number      set the number of frames to output</div><div class=\"line\">-filter filter_graph  set stream filtergraph</div><div class=\"line\">-filter_script filename  read stream filtergraph description from a file</div><div class=\"line\">-reinit_filter      reinit filtergraph on input parameter changes</div><div class=\"line\">-discard            discard</div><div class=\"line\">-disposition        disposition</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>\n      <a href=\"https://github.com/FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh\" target=\"_blank\" rel=\"external\">文章参考</a>\n    </p>\n    <p>​</p>\n  </li>\n</ol>"},{"title":"Linux下打RPM包","date":"2017-05-15T06:34:12.000Z","_content":"\n\n\n## 工具准备\n\n1. 安装rpmtools工具\n\n   ```sh\n   yum install rpmdevtools\n   ```\n\n2. 创建文件夹\n\n   ```sh\n   mkdir -pv ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}\n   ```\n\n## 配置文件及源码准备\n\n1. spec脚本文件创建，在SPECS文件夹下创建一个.spec文件 如h5-megvii.spec\n\n   ```sh\n   Name:           h5-megvii\n   License:        copyright\n   Version:        1.0\n   Release:        1%{?dist}\n   Summary:        HTML FaceID Server\n   AutoReqProv:    no\n\n   Group:          Megvii\n   URL:            http://www.megvii.com\n   Source:         %{name}-%{version}.tar.gz\n   BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root\n\n   %description\n   The rpm version of html-megvii package\n\n   %prep\n   %setup -q\n\n   %build\n   %install\n   rm -rf $RPM_BUILD_ROOT\n   mkdir -p $RPM_BUILD_ROOT\n   cp -a * $RPM_BUILD_ROOT\n\n   %clean\n   rm -rf $RPM_BUILD_ROOT\n\n   %files\n   %defattr(-,root,root,-)\n   /opt/megvii\n   ```\n\n   <!-- more -->\n\n   spec脚本中各个配置项说明\n\n   ```sh\n   Name: 软件包的名称，后面可使用%{name}的方式引用\n   License: 软件授权方式\n   Version: 软件的实际版本号,后面可使用%{version}引用\n   Release: 发布序列号,标明第几次打包，后面可使用%{release}引用\n   Summary: 软件包的内容概要\n   AutoReqProv: 此域用于指示RPM是否自动查找软件所需的共享库与其提供的共享库\n\n   Group: 软件分组\n   URL: 软件的主页\n   Source: 源代码包，可以带多个用Source1、Source2等源，后面也可以用%{source1}、%{source2}引用\n   BuildRoot: 这个是安装或编译时使用的“虚拟目录”,一般定义为:%{_tmppath}/%{name}-%{version}-%{release}-root\n\n   %description 软件的详细说明\n\n   %prep 预处理脚本\n   %setup 把源码包解压并放好,将SOURCES下的tar.gz 文件解压至BUILD文件夹下\n\n   %build 开始构建包\n   %install 开始把软件安装到虚拟的根目录中\n\n   %clean 清理临时文件\n\n   %files 定义那些文件或目录会放入rpm中,files下的文件，必须是tar包解压开存在的文件\n   %defattr (-,root,root) 指定包装文件的属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755\n   ```\n\n   **注1:**\tSOURCES下的tar.gz包的文件名必须和SPECS下 xxx.specs  文件中的Source 保持一致。\n\n   **注2:**\tSOURCES下的tar.gz包**解压开的文件夹**名称也应为SPECS下 xxx.specs  文件中的Source 对应的名称(无须tar.gz)。\n\n   **注3:**\t%files标签下的文件路径必须存在，如/opt/megvii ,在tar.gz 解压开的文件路径是存在的\n\n2. 添加源码文件\n\n   ```sh\n   tar czvf h5-megvii-1.0.tar.gz h5-megvii-1.0\n   cp h5-megvii-1.0.tar.gz rpmbuild/SOURCES/\n   ```\n\n## 执行打包命令\n\n```sh\nrpmbuild --nodeps -ba rpmbuild/SPECS/h5-megvii.spec\n```\n\n打完包之后的rpm包文件位置在`rpmbuild/RPMS`文件夹中","source":"_posts/Linux下打RPM包.md","raw":"---\ntitle: Linux下打RPM包\ndate: 2017-05-15 14:34:12\ntags: Linux\n---\n\n\n\n## 工具准备\n\n1. 安装rpmtools工具\n\n   ```sh\n   yum install rpmdevtools\n   ```\n\n2. 创建文件夹\n\n   ```sh\n   mkdir -pv ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}\n   ```\n\n## 配置文件及源码准备\n\n1. spec脚本文件创建，在SPECS文件夹下创建一个.spec文件 如h5-megvii.spec\n\n   ```sh\n   Name:           h5-megvii\n   License:        copyright\n   Version:        1.0\n   Release:        1%{?dist}\n   Summary:        HTML FaceID Server\n   AutoReqProv:    no\n\n   Group:          Megvii\n   URL:            http://www.megvii.com\n   Source:         %{name}-%{version}.tar.gz\n   BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root\n\n   %description\n   The rpm version of html-megvii package\n\n   %prep\n   %setup -q\n\n   %build\n   %install\n   rm -rf $RPM_BUILD_ROOT\n   mkdir -p $RPM_BUILD_ROOT\n   cp -a * $RPM_BUILD_ROOT\n\n   %clean\n   rm -rf $RPM_BUILD_ROOT\n\n   %files\n   %defattr(-,root,root,-)\n   /opt/megvii\n   ```\n\n   <!-- more -->\n\n   spec脚本中各个配置项说明\n\n   ```sh\n   Name: 软件包的名称，后面可使用%{name}的方式引用\n   License: 软件授权方式\n   Version: 软件的实际版本号,后面可使用%{version}引用\n   Release: 发布序列号,标明第几次打包，后面可使用%{release}引用\n   Summary: 软件包的内容概要\n   AutoReqProv: 此域用于指示RPM是否自动查找软件所需的共享库与其提供的共享库\n\n   Group: 软件分组\n   URL: 软件的主页\n   Source: 源代码包，可以带多个用Source1、Source2等源，后面也可以用%{source1}、%{source2}引用\n   BuildRoot: 这个是安装或编译时使用的“虚拟目录”,一般定义为:%{_tmppath}/%{name}-%{version}-%{release}-root\n\n   %description 软件的详细说明\n\n   %prep 预处理脚本\n   %setup 把源码包解压并放好,将SOURCES下的tar.gz 文件解压至BUILD文件夹下\n\n   %build 开始构建包\n   %install 开始把软件安装到虚拟的根目录中\n\n   %clean 清理临时文件\n\n   %files 定义那些文件或目录会放入rpm中,files下的文件，必须是tar包解压开存在的文件\n   %defattr (-,root,root) 指定包装文件的属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755\n   ```\n\n   **注1:**\tSOURCES下的tar.gz包的文件名必须和SPECS下 xxx.specs  文件中的Source 保持一致。\n\n   **注2:**\tSOURCES下的tar.gz包**解压开的文件夹**名称也应为SPECS下 xxx.specs  文件中的Source 对应的名称(无须tar.gz)。\n\n   **注3:**\t%files标签下的文件路径必须存在，如/opt/megvii ,在tar.gz 解压开的文件路径是存在的\n\n2. 添加源码文件\n\n   ```sh\n   tar czvf h5-megvii-1.0.tar.gz h5-megvii-1.0\n   cp h5-megvii-1.0.tar.gz rpmbuild/SOURCES/\n   ```\n\n## 执行打包命令\n\n```sh\nrpmbuild --nodeps -ba rpmbuild/SPECS/h5-megvii.spec\n```\n\n打完包之后的rpm包文件位置在`rpmbuild/RPMS`文件夹中","slug":"Linux下打RPM包","published":1,"updated":"2017-05-27T15:01:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy3r0003i9s6me00m0j7","content":"<h2 id=\"工具准备\">\n  <a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2>\n<ol>\n  <li>\n    <p>安装rpmtools工具</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">yum install rpmdevtools</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>创建文件夹</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">mkdir -pv ~/rpmbuild/&#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125;</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ol>\n<h2 id=\"配置文件及源码准备\">\n  <a href=\"#配置文件及源码准备\" class=\"headerlink\" title=\"配置文件及源码准备\"></a>配置文件及源码准备</h2>\n<ol>\n  <li>\n    <p>spec脚本文件创建，在SPECS文件夹下创建一个.spec文件 如h5-megvii.spec</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">Name:           h5-megvii</div><div class=\"line\">License:        copyright</div><div class=\"line\">Version:        1.0</div><div class=\"line\">Release:        1%&#123;?dist&#125;</div><div class=\"line\">Summary:        HTML FaceID Server</div><div class=\"line\">AutoReqProv:    no</div><div class=\"line\"></div><div class=\"line\">Group:          Megvii</div><div class=\"line\">URL:            http://www.megvii.com</div><div class=\"line\">Source:         %&#123;name&#125;-%&#123;version&#125;.tar.gz</div><div class=\"line\">BuildRoot:      %&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-root</div><div class=\"line\"></div><div class=\"line\">%description</div><div class=\"line\">The rpm version of html-megvii package</div><div class=\"line\"></div><div class=\"line\">%prep</div><div class=\"line\">%setup -q</div><div class=\"line\"></div><div class=\"line\">%build</div><div class=\"line\">%install</div><div class=\"line\">rm -rf <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\">mkdir -p <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\">cp <span class=\"_\">-a</span> * <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\"></div><div class=\"line\">%clean</div><div class=\"line\">rm -rf <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\"></div><div class=\"line\">%files</div><div class=\"line\">%defattr(-,root,root,-)</div><div class=\"line\">/opt/megvii</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <a id=\"more\"></a>\n    <p>spec脚本中各个配置项说明</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">Name: 软件包的名称，后面可使用%&#123;name&#125;的方式引用</div><div class=\"line\">License: 软件授权方式</div><div class=\"line\">Version: 软件的实际版本号,后面可使用%&#123;version&#125;引用</div><div class=\"line\">Release: 发布序列号,标明第几次打包，后面可使用%&#123;release&#125;引用</div><div class=\"line\">Summary: 软件包的内容概要</div><div class=\"line\">AutoReqProv: 此域用于指示RPM是否自动查找软件所需的共享库与其提供的共享库</div><div class=\"line\"></div><div class=\"line\">Group: 软件分组</div><div class=\"line\">URL: 软件的主页</div><div class=\"line\">Source: 源代码包，可以带多个用Source1、Source2等源，后面也可以用%&#123;<span class=\"built_in\">source</span>1&#125;、%&#123;<span class=\"built_in\">source</span>2&#125;引用</div><div class=\"line\">BuildRoot: 这个是安装或编译时使用的“虚拟目录”,一般定义为:%&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-root</div><div class=\"line\"></div><div class=\"line\">%description 软件的详细说明</div><div class=\"line\"></div><div class=\"line\">%prep 预处理脚本</div><div class=\"line\">%setup 把源码包解压并放好,将SOURCES下的tar.gz 文件解压至BUILD文件夹下</div><div class=\"line\"></div><div class=\"line\">%build 开始构建包</div><div class=\"line\">%install 开始把软件安装到虚拟的根目录中</div><div class=\"line\"></div><div class=\"line\">%clean 清理临时文件</div><div class=\"line\"></div><div class=\"line\">%files 定义那些文件或目录会放入rpm中,files下的文件，必须是tar包解压开存在的文件</div><div class=\"line\">%defattr (-,root,root) 指定包装文件的属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>\n      <strong>注1:</strong> SOURCES下的tar.gz包的文件名必须和SPECS下 xxx.specs 文件中的Source 保持一致。</p>\n    <p>\n      <strong>注2:</strong> SOURCES下的tar.gz包\n      <strong>解压开的文件夹</strong>名称也应为SPECS下 xxx.specs 文件中的Source 对应的名称(无须tar.gz)。</p>\n    <p>\n      <strong>注3:</strong> %files标签下的文件路径必须存在，如/opt/megvii ,在tar.gz 解压开的文件路径是存在的</p>\n  </li>\n  <li>\n    <p>添加源码文件</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">tar czvf h5-megvii-1.0.tar.gz h5-megvii-1.0</div><div class=\"line\">cp h5-megvii-1.0.tar.gz rpmbuild/SOURCES/</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ol>\n<h2 id=\"执行打包命令\">\n  <a href=\"#执行打包命令\" class=\"headerlink\" title=\"执行打包命令\"></a>执行打包命令</h2>\n<figure class=\"highlight sh\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">rpmbuild --nodeps -ba rpmbuild/SPECS/h5-megvii.spec</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>打完包之后的rpm包文件位置在\n  <code>rpmbuild/RPMS</code>文件夹中</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"工具准备\">\n  <a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h2>\n<ol>\n  <li>\n    <p>安装rpmtools工具</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">yum install rpmdevtools</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>创建文件夹</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">mkdir -pv ~/rpmbuild/&#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125;</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ol>\n<h2 id=\"配置文件及源码准备\">\n  <a href=\"#配置文件及源码准备\" class=\"headerlink\" title=\"配置文件及源码准备\"></a>配置文件及源码准备</h2>\n<ol>\n  <li>\n    <p>spec脚本文件创建，在SPECS文件夹下创建一个.spec文件 如h5-megvii.spec</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">Name:           h5-megvii</div><div class=\"line\">License:        copyright</div><div class=\"line\">Version:        1.0</div><div class=\"line\">Release:        1%&#123;?dist&#125;</div><div class=\"line\">Summary:        HTML FaceID Server</div><div class=\"line\">AutoReqProv:    no</div><div class=\"line\"></div><div class=\"line\">Group:          Megvii</div><div class=\"line\">URL:            http://www.megvii.com</div><div class=\"line\">Source:         %&#123;name&#125;-%&#123;version&#125;.tar.gz</div><div class=\"line\">BuildRoot:      %&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-root</div><div class=\"line\"></div><div class=\"line\">%description</div><div class=\"line\">The rpm version of html-megvii package</div><div class=\"line\"></div><div class=\"line\">%prep</div><div class=\"line\">%setup -q</div><div class=\"line\"></div><div class=\"line\">%build</div><div class=\"line\">%install</div><div class=\"line\">rm -rf <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\">mkdir -p <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\">cp <span class=\"_\">-a</span> * <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\"></div><div class=\"line\">%clean</div><div class=\"line\">rm -rf <span class=\"variable\">$RPM_BUILD_ROOT</span></div><div class=\"line\"></div><div class=\"line\">%files</div><div class=\"line\">%defattr(-,root,root,-)</div><div class=\"line\">/opt/megvii</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>","more":"<p>spec脚本中各个配置项说明</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">Name: 软件包的名称，后面可使用%&#123;name&#125;的方式引用</div><div class=\"line\">License: 软件授权方式</div><div class=\"line\">Version: 软件的实际版本号,后面可使用%&#123;version&#125;引用</div><div class=\"line\">Release: 发布序列号,标明第几次打包，后面可使用%&#123;release&#125;引用</div><div class=\"line\">Summary: 软件包的内容概要</div><div class=\"line\">AutoReqProv: 此域用于指示RPM是否自动查找软件所需的共享库与其提供的共享库</div><div class=\"line\"></div><div class=\"line\">Group: 软件分组</div><div class=\"line\">URL: 软件的主页</div><div class=\"line\">Source: 源代码包，可以带多个用Source1、Source2等源，后面也可以用%&#123;<span class=\"built_in\">source</span>1&#125;、%&#123;<span class=\"built_in\">source</span>2&#125;引用</div><div class=\"line\">BuildRoot: 这个是安装或编译时使用的“虚拟目录”,一般定义为:%&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-root</div><div class=\"line\"></div><div class=\"line\">%description 软件的详细说明</div><div class=\"line\"></div><div class=\"line\">%prep 预处理脚本</div><div class=\"line\">%setup 把源码包解压并放好,将SOURCES下的tar.gz 文件解压至BUILD文件夹下</div><div class=\"line\"></div><div class=\"line\">%build 开始构建包</div><div class=\"line\">%install 开始把软件安装到虚拟的根目录中</div><div class=\"line\"></div><div class=\"line\">%clean 清理临时文件</div><div class=\"line\"></div><div class=\"line\">%files 定义那些文件或目录会放入rpm中,files下的文件，必须是tar包解压开存在的文件</div><div class=\"line\">%defattr (-,root,root) 指定包装文件的属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>\n      <strong>注1:</strong> SOURCES下的tar.gz包的文件名必须和SPECS下 xxx.specs 文件中的Source 保持一致。</p>\n    <p>\n      <strong>注2:</strong> SOURCES下的tar.gz包\n      <strong>解压开的文件夹</strong>名称也应为SPECS下 xxx.specs 文件中的Source 对应的名称(无须tar.gz)。</p>\n    <p>\n      <strong>注3:</strong> %files标签下的文件路径必须存在，如/opt/megvii ,在tar.gz 解压开的文件路径是存在的</p>\n  </li>\n  <li>\n    <p>添加源码文件</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">tar czvf h5-megvii-1.0.tar.gz h5-megvii-1.0</div><div class=\"line\">cp h5-megvii-1.0.tar.gz rpmbuild/SOURCES/</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ol>\n<h2 id=\"执行打包命令\">\n  <a href=\"#执行打包命令\" class=\"headerlink\" title=\"执行打包命令\"></a>执行打包命令</h2>\n<figure class=\"highlight sh\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">rpmbuild --nodeps -ba rpmbuild/SPECS/h5-megvii.spec</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>打完包之后的rpm包文件位置在\n  <code>rpmbuild/RPMS</code>文件夹中</p>"},{"title":"RN 中使用mobx来进行状态管理","date":"2017-06-13T03:25:12.000Z","_content":"\n在使用RN开发app过程中需要状态管理，也就是state 这个概念，由此衍生出来的两个状态管理的框架，一个是redux，另一个就是mobx了。这两个我都用过，今天就先来介绍下mobx 在开发RN中的使用。实际上不使用状态管理的框架，你也是能够进行开发的，但是随着项目的开发以及项目的壮大，会发现没有状态管理，这个工程越来越难维护。当然redux和mobx也都是可以使用在react的web项目中。\n\nmobx核心的理念是**动作**改变**状态**，而状态的改变会更新所有受影响的**视图**，通俗来讲，一个应用可以拥有一个大的state，而每一个页面都和这个这个state相关连，通过改变这个state来更新页面。当然一个应用可以拥有多个state不一定是一个，这个开每个开发者对项目的规划。举个例子：用户的state,在用户未登录时，页面的显示时登录界面，当用户点击登录时，通过更新这个state，来更新这个view。更多的mobx概念请移步[mobx中文文档](http://cn.mobx.js.org/)\n\n接下来就是在实际开发中使用mobx了\n\n<!-- more -->\n\n- 在package.json 引入\n\n  ```js\n  \"dependencies\": {\n      \"mobx\": \"^2.6.1\",\n      \"mobx-react\": \"^3.5.8\",\n      //其他库\n  }\n  //不加这个装饰器使用不了，如@action   \n  \"devDependencies\": {\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\"\n  }\n  ```\n\n- .babelrc 中添加\n\n  ```js\n  {\n    \"presets\": [\"react-native\"],\n    \"plugins\": [\"transform-decorators-legacy\"] //在babel转义的时候能够将装饰器转义\n  }\n  ```\n\n\n### 创建一个简易的计数器\n\n- 创建一个一个store\n\n  ```js\n  import {observable, action, computed, toJS} from 'mobx'\n\n  class mobxStore {\n      @observable count = 0\n\n      @action addCount() {\n          this.count = this.count + 1;\n      }\n\n      @action reduceCount() {\n          this.count = this.count - 1;\n      }\n  }\n\n  const store = new mobxStore()\n  export default store\n  ```\n\n- 在界面中和store 关联\n\n  ```javascript\n  import React, {Component} from 'react';\n  import {\n      Text,\n      StyleSheet,\n      TouchableHighlight,\n      View\n  } from 'react-native';\n  import {observer} from 'mobx-react/custom'\n  import store from './mobxStore'\n\n  @observer\n  class Root extends Component {\n\n      render() {\n          return (\n              <View style={styles.container}>\n                  <Text style={styles.welcome}>\n                      Mobx 的简易使用demo\n                  </Text>\n                  <Text style={styles.instructions}>\n                      store中的计数器：{store.count}\n                  </Text>\n                  <TouchableHighlight style={{marginTop: 8}} onPress={() => store.addCount()}>\n                      <Text style={styles.instructions}>\n                          点击计数+1\n                      </Text>\n                  </TouchableHighlight>\n                  <TouchableHighlight style={{marginTop: 8}} onPress={() => store.reduceCount()}>\n                      <Text style={styles.instructions}>\n                          点击计数-1\n                      </Text>\n                  </TouchableHighlight>\n              </View>\n          );\n      }\n  }\n\n  const styles = StyleSheet.create({\n      container: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: '#F5FCFF',\n      },\n      welcome: {\n          fontSize: 20,\n          textAlign: 'center',\n          margin: 10,\n      },\n      instructions: {\n          textAlign: 'center',\n          color: 'red',\n          marginBottom: 5,\n      },\n  });\n\n  export default Root\n  ```\n\n导入`import {observer} from 'mobx-react/custom'` 和刚才创建的store，`import store from './mobxStore'`\n\ndemo 的源码已经放到github上 [mobxDemo](https://github.com/Cocoon-break/mobxDemo)，如有疑问请在该仓库中提issue\n\n\n","source":"_posts/RN中使用mobx来进行状态管理.md","raw":"---\ntitle: RN 中使用mobx来进行状态管理\ndate: 2017-06-13 11:25:12\ntags: react-native\n---\n\n在使用RN开发app过程中需要状态管理，也就是state 这个概念，由此衍生出来的两个状态管理的框架，一个是redux，另一个就是mobx了。这两个我都用过，今天就先来介绍下mobx 在开发RN中的使用。实际上不使用状态管理的框架，你也是能够进行开发的，但是随着项目的开发以及项目的壮大，会发现没有状态管理，这个工程越来越难维护。当然redux和mobx也都是可以使用在react的web项目中。\n\nmobx核心的理念是**动作**改变**状态**，而状态的改变会更新所有受影响的**视图**，通俗来讲，一个应用可以拥有一个大的state，而每一个页面都和这个这个state相关连，通过改变这个state来更新页面。当然一个应用可以拥有多个state不一定是一个，这个开每个开发者对项目的规划。举个例子：用户的state,在用户未登录时，页面的显示时登录界面，当用户点击登录时，通过更新这个state，来更新这个view。更多的mobx概念请移步[mobx中文文档](http://cn.mobx.js.org/)\n\n接下来就是在实际开发中使用mobx了\n\n<!-- more -->\n\n- 在package.json 引入\n\n  ```js\n  \"dependencies\": {\n      \"mobx\": \"^2.6.1\",\n      \"mobx-react\": \"^3.5.8\",\n      //其他库\n  }\n  //不加这个装饰器使用不了，如@action   \n  \"devDependencies\": {\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\"\n  }\n  ```\n\n- .babelrc 中添加\n\n  ```js\n  {\n    \"presets\": [\"react-native\"],\n    \"plugins\": [\"transform-decorators-legacy\"] //在babel转义的时候能够将装饰器转义\n  }\n  ```\n\n\n### 创建一个简易的计数器\n\n- 创建一个一个store\n\n  ```js\n  import {observable, action, computed, toJS} from 'mobx'\n\n  class mobxStore {\n      @observable count = 0\n\n      @action addCount() {\n          this.count = this.count + 1;\n      }\n\n      @action reduceCount() {\n          this.count = this.count - 1;\n      }\n  }\n\n  const store = new mobxStore()\n  export default store\n  ```\n\n- 在界面中和store 关联\n\n  ```javascript\n  import React, {Component} from 'react';\n  import {\n      Text,\n      StyleSheet,\n      TouchableHighlight,\n      View\n  } from 'react-native';\n  import {observer} from 'mobx-react/custom'\n  import store from './mobxStore'\n\n  @observer\n  class Root extends Component {\n\n      render() {\n          return (\n              <View style={styles.container}>\n                  <Text style={styles.welcome}>\n                      Mobx 的简易使用demo\n                  </Text>\n                  <Text style={styles.instructions}>\n                      store中的计数器：{store.count}\n                  </Text>\n                  <TouchableHighlight style={{marginTop: 8}} onPress={() => store.addCount()}>\n                      <Text style={styles.instructions}>\n                          点击计数+1\n                      </Text>\n                  </TouchableHighlight>\n                  <TouchableHighlight style={{marginTop: 8}} onPress={() => store.reduceCount()}>\n                      <Text style={styles.instructions}>\n                          点击计数-1\n                      </Text>\n                  </TouchableHighlight>\n              </View>\n          );\n      }\n  }\n\n  const styles = StyleSheet.create({\n      container: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: '#F5FCFF',\n      },\n      welcome: {\n          fontSize: 20,\n          textAlign: 'center',\n          margin: 10,\n      },\n      instructions: {\n          textAlign: 'center',\n          color: 'red',\n          marginBottom: 5,\n      },\n  });\n\n  export default Root\n  ```\n\n导入`import {observer} from 'mobx-react/custom'` 和刚才创建的store，`import store from './mobxStore'`\n\ndemo 的源码已经放到github上 [mobxDemo](https://github.com/Cocoon-break/mobxDemo)，如有疑问请在该仓库中提issue\n\n\n","slug":"RN中使用mobx来进行状态管理","published":1,"updated":"2017-06-13T05:36:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy3t0004i9s6hnkxfwcl","content":"<p>在使用RN开发app过程中需要状态管理，也就是state 这个概念，由此衍生出来的两个状态管理的框架，一个是redux，另一个就是mobx了。这两个我都用过，今天就先来介绍下mobx\n  在开发RN中的使用。实际上不使用状态管理的框架，你也是能够进行开发的，但是随着项目的开发以及项目的壮大，会发现没有状态管理，这个工程越来越难维护。当然redux和mobx也都是可以使用在react的web项目中。</p>\n<p>mobx核心的理念是\n  <strong>动作</strong>改变\n  <strong>状态</strong>，而状态的改变会更新所有受影响的\n  <strong>视图</strong>，通俗来讲，一个应用可以拥有一个大的state，而每一个页面都和这个这个state相关连，通过改变这个state来更新页面。当然一个应用可以拥有多个state不一定是一个，这个开每个开发者对项目的规划。举个例子：用户的state,在用户未登录时，页面的显示时登录界面，当用户点击登录时，通过更新这个state，来更新这个view。更多的mobx概念请移步\n  <a href=\"http://cn.mobx.js.org/\" target=\"_blank\" rel=\"external\">mobx中文文档</a>\n</p>\n<p>接下来就是在实际开发中使用mobx了</p>\n<a id=\"more\"></a>\n<ul>\n  <li>\n    <p>在package.json 引入</p>\n    <figure class=\"highlight js\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"mobx\"</span>: <span class=\"string\">\"^2.6.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"mobx-react\"</span>: <span class=\"string\">\"^3.5.8\"</span>,</div><div class=\"line\">    <span class=\"comment\">//其他库</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//不加这个装饰器使用不了，如@action   </span></div><div class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"babel-plugin-transform-decorators-legacy\"</span>: <span class=\"string\">\"^1.3.4\"</span></div><div class=\"line\">&#125;</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>.babelrc 中添加</p>\n    <figure class=\"highlight js\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"react-native\"</span>],</div><div class=\"line\">  <span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"transform-decorators-legacy\"</span>] <span class=\"comment\">//在babel转义的时候能够将装饰器转义</span></div><div class=\"line\">&#125;</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ul>\n<h3 id=\"创建一个简易的计数器\">\n  <a href=\"#创建一个简易的计数器\" class=\"headerlink\" title=\"创建一个简易的计数器\"></a>创建一个简易的计数器</h3>\n<ul>\n  <li>\n    <p>创建一个一个store</p>\n    <figure class=\"highlight js\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable, action, computed, toJS&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mobxStore</span> </span>&#123;</div><div class=\"line\">    @observable count = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    @action addCount() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.count = <span class=\"keyword\">this</span>.count + <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @action reduceCount() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.count = <span class=\"keyword\">this</span>.count - <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> mobxStore()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>在界面中和store 关联</p>\n    <figure class=\"highlight javascript\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    Text,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    TouchableHighlight,</div><div class=\"line\">    View</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react/custom'</span></div><div class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./mobxStore'</span></div><div class=\"line\"></div><div class=\"line\">@observer</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Root</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class=\"line\">                &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class=\"line\">                    Mobx 的简易使用demo</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">                &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class=\"line\">                    store中的计数器：&#123;store.count&#125;</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">                &lt;TouchableHighlight style=&#123;&#123;marginTop: 8&#125;&#125; onPress=&#123;() =&gt; store.addCount()&#125;&gt;</div><div class=\"line\">                    &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class=\"line\">                        点击计数+1</div><div class=\"line\">                    &lt;/Text&gt;</div><div class=\"line\">                &lt;/TouchableHighlight&gt;</div><div class=\"line\">                &lt;TouchableHighlight style=&#123;&#123;marginTop: 8&#125;&#125; onPress=&#123;() =&gt; store.reduceCount()&#125;&gt;</div><div class=\"line\">                    &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class=\"line\">                        点击计数-1</div><div class=\"line\">                    &lt;/Text&gt;</div><div class=\"line\">                &lt;/TouchableHighlight&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">    <span class=\"attr\">container</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"attr\">justifyContent</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">        <span class=\"attr\">alignItems</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#F5FCFF'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">welcome</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"attr\">textAlign</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">        <span class=\"attr\">margin</span>: <span class=\"number\">10</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">instructions</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">textAlign</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>,</div><div class=\"line\">        <span class=\"attr\">marginBottom</span>: <span class=\"number\">5</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Root</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ul>\n<p>导入\n  <code>import {observer} from &#39;mobx-react/custom&#39;</code> 和刚才创建的store，\n  <code>import store from &#39;./mobxStore&#39;</code>\n</p>\n<p>demo 的源码已经放到github上\n  <a href=\"https://github.com/Cocoon-break/mobxDemo\" target=\"_blank\" rel=\"external\">mobxDemo</a>，如有疑问请在该仓库中提issue</p>\n","site":{"data":{}},"excerpt":"<p>在使用RN开发app过程中需要状态管理，也就是state 这个概念，由此衍生出来的两个状态管理的框架，一个是redux，另一个就是mobx了。这两个我都用过，今天就先来介绍下mobx\n  在开发RN中的使用。实际上不使用状态管理的框架，你也是能够进行开发的，但是随着项目的开发以及项目的壮大，会发现没有状态管理，这个工程越来越难维护。当然redux和mobx也都是可以使用在react的web项目中。</p>\n<p>mobx核心的理念是\n  <strong>动作</strong>改变\n  <strong>状态</strong>，而状态的改变会更新所有受影响的\n  <strong>视图</strong>，通俗来讲，一个应用可以拥有一个大的state，而每一个页面都和这个这个state相关连，通过改变这个state来更新页面。当然一个应用可以拥有多个state不一定是一个，这个开每个开发者对项目的规划。举个例子：用户的state,在用户未登录时，页面的显示时登录界面，当用户点击登录时，通过更新这个state，来更新这个view。更多的mobx概念请移步\n  <a href=\"http://cn.mobx.js.org/\" target=\"_blank\" rel=\"external\">mobx中文文档</a>\n</p>\n<p>接下来就是在实际开发中使用mobx了</p>","more":"<ul>\n  <li>\n    <p>在package.json 引入</p>\n    <figure class=\"highlight js\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"mobx\"</span>: <span class=\"string\">\"^2.6.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"mobx-react\"</span>: <span class=\"string\">\"^3.5.8\"</span>,</div><div class=\"line\">    <span class=\"comment\">//其他库</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//不加这个装饰器使用不了，如@action   </span></div><div class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"babel-plugin-transform-decorators-legacy\"</span>: <span class=\"string\">\"^1.3.4\"</span></div><div class=\"line\">&#125;</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>.babelrc 中添加</p>\n    <figure class=\"highlight js\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"react-native\"</span>],</div><div class=\"line\">  <span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"transform-decorators-legacy\"</span>] <span class=\"comment\">//在babel转义的时候能够将装饰器转义</span></div><div class=\"line\">&#125;</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ul>\n<h3 id=\"创建一个简易的计数器\">\n  <a href=\"#创建一个简易的计数器\" class=\"headerlink\" title=\"创建一个简易的计数器\"></a>创建一个简易的计数器</h3>\n<ul>\n  <li>\n    <p>创建一个一个store</p>\n    <figure class=\"highlight js\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable, action, computed, toJS&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mobxStore</span> </span>&#123;</div><div class=\"line\">    @observable count = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    @action addCount() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.count = <span class=\"keyword\">this</span>.count + <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @action reduceCount() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.count = <span class=\"keyword\">this</span>.count - <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> mobxStore()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>在界面中和store 关联</p>\n    <figure class=\"highlight javascript\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    Text,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    TouchableHighlight,</div><div class=\"line\">    View</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react/custom'</span></div><div class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./mobxStore'</span></div><div class=\"line\"></div><div class=\"line\">@observer</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Root</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class=\"line\">                &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class=\"line\">                    Mobx 的简易使用demo</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">                &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class=\"line\">                    store中的计数器：&#123;store.count&#125;</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">                &lt;TouchableHighlight style=&#123;&#123;marginTop: 8&#125;&#125; onPress=&#123;() =&gt; store.addCount()&#125;&gt;</div><div class=\"line\">                    &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class=\"line\">                        点击计数+1</div><div class=\"line\">                    &lt;/Text&gt;</div><div class=\"line\">                &lt;/TouchableHighlight&gt;</div><div class=\"line\">                &lt;TouchableHighlight style=&#123;&#123;marginTop: 8&#125;&#125; onPress=&#123;() =&gt; store.reduceCount()&#125;&gt;</div><div class=\"line\">                    &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class=\"line\">                        点击计数-1</div><div class=\"line\">                    &lt;/Text&gt;</div><div class=\"line\">                &lt;/TouchableHighlight&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">    <span class=\"attr\">container</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"attr\">justifyContent</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">        <span class=\"attr\">alignItems</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#F5FCFF'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">welcome</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"attr\">textAlign</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">        <span class=\"attr\">margin</span>: <span class=\"number\">10</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">instructions</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">textAlign</span>: <span class=\"string\">'center'</span>,</div><div class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>,</div><div class=\"line\">        <span class=\"attr\">marginBottom</span>: <span class=\"number\">5</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Root</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ul>\n<p>导入\n  <code>import {observer} from &#39;mobx-react/custom&#39;</code> 和刚才创建的store，\n  <code>import store from &#39;./mobxStore&#39;</code>\n</p>\n<p>demo 的源码已经放到github上\n  <a href=\"https://github.com/Cocoon-break/mobxDemo\" target=\"_blank\" rel=\"external\">mobxDemo</a>，如有疑问请在该仓库中提issue</p>"},{"title":"Mac下打造流畅的终端使用环境","date":"2017-05-27T09:02:12.000Z","_content":"\n作为程序员Mac上自带的终端是远远满足不了我们的，这时我们就要自己手动搭一个我们顺手的终端环境。下面我们就来搭建iterm2+ oh my zsh + tmux  的终端工具\n\n## ITerm2 安装\n\n1. 上Iterm2的官网下载iterm2,[iterm2下载](http://www.iterm2.com/)\n\n2. 下载完成之后，发现iterm2 自带的配色我不太喜欢，安装完成之后进行item2的配色，这个纯属看个人喜好了。\n\n   - 要进行配色，我们当然得要有配色的方案啦！什么你要自己配一个，嗯...... 这也是可以的，不过有很多现成的方案你要不要啊。github 上有超多的配色方案，我们先把这个库给clone下来。\n\n     ```sh\n     git clone git@github.com:mbadolato/iTerm2-Color-Schemes.git\n     ```\n\n     要是你没有git，那我觉得你没太必要继续下去了。当然你还想继续的话，你就上GitHub手动download 下来。\n\n     <!-- more -->\n\n   - 好了配色方案是有了接下来我们就是进行配色了,这个也是比较简单，打开iterm2的偏好设置，找到Profiles下的Colors，选中import，这里选择刚才git 克隆下来文件中的schemes文件夹下的文件，这些文件就是各种各样的配色方案，这就看个人喜好了哈，这样你的iterm2配色方案就完成了\n\n     ![](https://cocoon-break.github.io/images/screenShot/iterm2_color.jpg)\n\n\n\n\n\n\n## Mac下shell介绍\n\nShell 是LInux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后在把结果返回给用户或应用程序。\n\n\n\nLinux/Unix 提供了很多种shell，常用的shell有这么几种，sh、bash、csh等。想知道系统有几种shell，可以通过以下命令查看。\n\n```sh\ncat /etc/shells\n```\n\n\n\n在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh，目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh，这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」\n\n\n\n### 安装使用on-my-zsh\n\n1. 通过git 把oh-my-zsh 下载下来\n\n   ```sh\n   git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n   ```\n\n2. 添加配置文件并设置为默认的shell\n\n   ```sh\n   cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n   chsh -s /bin/zsh\n   ```\n\n   **注:** .zshrc 就相当于.bashrc了以后配置环境就在.zshrc中配置就行\n\n3. 配置oh-my-zsh 的主题\n\n   oh-my-zsh 提供了很多的主题，可以选择自己喜欢的风格。具体的主题效果可以参考[主题预览](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)，选好主题了，接下来就是配置了。编辑~/.zshrc 文件\n\n   ```sh\n   vim ~/.zshrc\n   #编辑主题，af-magic是我机器上的主题风格，具体可以设置为刚才主题预览中的\n   ZSH_THEME=\"af-magic\"\n   ```\n\n4. oh-my-zsh 就配置完了。这里只是简单的介绍oh-my-zsh。oh-my-zsh  功能还是很丰富的，更多oh-my-zsh请移步[oh-my-zsh GitHub地址](https://github.com/robbyrussell/oh-my-zsh)\n\n## 安装tmux\n\nTmux 是一个工具，用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 Tmux 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。\n\n1. 先安装Homebrew，这个是Mac平台的包管理器。用来安装一些开发工具还是很方便。Mac系统自带了ruby的环境，我们通过ruby来安装Homebrew\n\n   ```sh\n   /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n   ```\n\n2. 通过homebrew 安装tmux\n\n   ```sh\n   brew install tmux\n   ```\n\n3. 就是这么简单tmux就装完了\n\n\n\n下一篇会讲具体的使用方法，包括iterm快捷键，tmux的使用","source":"_posts/Mac下打造流畅的终端使用环境.md","raw":"---\ntitle: Mac下打造流畅的终端使用环境\ndate: 2017-05-27 17:02:12\ntags: 技巧\n---\n\n作为程序员Mac上自带的终端是远远满足不了我们的，这时我们就要自己手动搭一个我们顺手的终端环境。下面我们就来搭建iterm2+ oh my zsh + tmux  的终端工具\n\n## ITerm2 安装\n\n1. 上Iterm2的官网下载iterm2,[iterm2下载](http://www.iterm2.com/)\n\n2. 下载完成之后，发现iterm2 自带的配色我不太喜欢，安装完成之后进行item2的配色，这个纯属看个人喜好了。\n\n   - 要进行配色，我们当然得要有配色的方案啦！什么你要自己配一个，嗯...... 这也是可以的，不过有很多现成的方案你要不要啊。github 上有超多的配色方案，我们先把这个库给clone下来。\n\n     ```sh\n     git clone git@github.com:mbadolato/iTerm2-Color-Schemes.git\n     ```\n\n     要是你没有git，那我觉得你没太必要继续下去了。当然你还想继续的话，你就上GitHub手动download 下来。\n\n     <!-- more -->\n\n   - 好了配色方案是有了接下来我们就是进行配色了,这个也是比较简单，打开iterm2的偏好设置，找到Profiles下的Colors，选中import，这里选择刚才git 克隆下来文件中的schemes文件夹下的文件，这些文件就是各种各样的配色方案，这就看个人喜好了哈，这样你的iterm2配色方案就完成了\n\n     ![](https://cocoon-break.github.io/images/screenShot/iterm2_color.jpg)\n\n\n\n\n\n\n## Mac下shell介绍\n\nShell 是LInux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后在把结果返回给用户或应用程序。\n\n\n\nLinux/Unix 提供了很多种shell，常用的shell有这么几种，sh、bash、csh等。想知道系统有几种shell，可以通过以下命令查看。\n\n```sh\ncat /etc/shells\n```\n\n\n\n在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh，目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh，这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」\n\n\n\n### 安装使用on-my-zsh\n\n1. 通过git 把oh-my-zsh 下载下来\n\n   ```sh\n   git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n   ```\n\n2. 添加配置文件并设置为默认的shell\n\n   ```sh\n   cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n   chsh -s /bin/zsh\n   ```\n\n   **注:** .zshrc 就相当于.bashrc了以后配置环境就在.zshrc中配置就行\n\n3. 配置oh-my-zsh 的主题\n\n   oh-my-zsh 提供了很多的主题，可以选择自己喜欢的风格。具体的主题效果可以参考[主题预览](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)，选好主题了，接下来就是配置了。编辑~/.zshrc 文件\n\n   ```sh\n   vim ~/.zshrc\n   #编辑主题，af-magic是我机器上的主题风格，具体可以设置为刚才主题预览中的\n   ZSH_THEME=\"af-magic\"\n   ```\n\n4. oh-my-zsh 就配置完了。这里只是简单的介绍oh-my-zsh。oh-my-zsh  功能还是很丰富的，更多oh-my-zsh请移步[oh-my-zsh GitHub地址](https://github.com/robbyrussell/oh-my-zsh)\n\n## 安装tmux\n\nTmux 是一个工具，用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 Tmux 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。\n\n1. 先安装Homebrew，这个是Mac平台的包管理器。用来安装一些开发工具还是很方便。Mac系统自带了ruby的环境，我们通过ruby来安装Homebrew\n\n   ```sh\n   /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n   ```\n\n2. 通过homebrew 安装tmux\n\n   ```sh\n   brew install tmux\n   ```\n\n3. 就是这么简单tmux就装完了\n\n\n\n下一篇会讲具体的使用方法，包括iterm快捷键，tmux的使用","slug":"Mac下打造流畅的终端使用环境","published":1,"updated":"2017-05-31T02:48:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy3u0005i9s6jwpifi9o","content":"<p>作为程序员Mac上自带的终端是远远满足不了我们的，这时我们就要自己手动搭一个我们顺手的终端环境。下面我们就来搭建iterm2+ oh my zsh + tmux\n  的终端工具</p>\n<h2 id=\"ITerm2-安装\">\n  <a href=\"#ITerm2-安装\" class=\"headerlink\" title=\"ITerm2 安装\"></a>ITerm2 安装</h2>\n<ol>\n  <li>\n    <p>上Iterm2的官网下载iterm2,\n      <a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"external\">iterm2下载</a>\n    </p>\n  </li>\n  <li>\n    <p>下载完成之后，发现iterm2 自带的配色我不太喜欢，安装完成之后进行item2的配色，这个纯属看个人喜好了。</p>\n    <ul>\n      <li>\n        <p>要进行配色，我们当然得要有配色的方案啦！什么你要自己配一个，嗯…… 这也是可以的，不过有很多现成的方案你要不要啊。github 上有超多的配色方案，我们先把这个库给clone下来。</p>\n        <figure class=\"highlight sh\">\n          <table>\n            <tr>\n              <td class=\"gutter\">\n                <pre><div class=\"line\">1</div></pre>\n              </td>\n              <td class=\"code\">\n                <pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:mbadolato/iTerm2-Color-Schemes.git</div></pre>\n              </td>\n            </tr>\n          </table>\n        </figure>\n        <p>要是你没有git，那我觉得你没太必要继续下去了。当然你还想继续的话，你就上GitHub手动download 下来。</p>\n        <a id=\"more\"></a>\n      </li>\n      <li>\n        <p>好了配色方案是有了接下来我们就是进行配色了,这个也是比较简单，打开iterm2的偏好设置，找到Profiles下的Colors，选中import，这里选择刚才git\n          克隆下来文件中的schemes文件夹下的文件，这些文件就是各种各样的配色方案，这就看个人喜好了哈，这样你的iterm2配色方案就完成了</p>\n        <p>\n          <img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_color.jpg\" alt=\"\">\n        </p>\n      </li>\n    </ul>\n  </li>\n</ol>\n<h2 id=\"Mac下shell介绍\">\n  <a href=\"#Mac下shell介绍\" class=\"headerlink\" title=\"Mac下shell介绍\"></a>Mac下shell介绍</h2>\n<p>Shell 是LInux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后在把结果返回给用户或应用程序。</p>\n<p>Linux/Unix 提供了很多种shell，常用的shell有这么几种，sh、bash、csh等。想知道系统有几种shell，可以通过以下命令查看。</p>\n<figure class=\"highlight sh\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">cat /etc/shells</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh，目前常用的 Linux 系统和\n  OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh，这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看\n  zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」</p>\n<h3 id=\"安装使用on-my-zsh\">\n  <a href=\"#安装使用on-my-zsh\" class=\"headerlink\" title=\"安装使用on-my-zsh\"></a>安装使用on-my-zsh</h3>\n<ol>\n  <li>\n    <p>通过git 把oh-my-zsh 下载下来</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>添加配置文件并设置为默认的shell</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div><div class=\"line\">chsh <span class=\"_\">-s</span> /bin/zsh</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>\n      <strong>注:</strong> .zshrc 就相当于.bashrc了以后配置环境就在.zshrc中配置就行</p>\n  </li>\n  <li>\n    <p>配置oh-my-zsh 的主题</p>\n    <p>oh-my-zsh 提供了很多的主题，可以选择自己喜欢的风格。具体的主题效果可以参考\n      <a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"external\">主题预览</a>，选好主题了，接下来就是配置了。编辑~/.zshrc 文件</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">vim ~/.zshrc</div><div class=\"line\"><span class=\"comment\">#编辑主题，af-magic是我机器上的主题风格，具体可以设置为刚才主题预览中的</span></div><div class=\"line\">ZSH_THEME=<span class=\"string\">\"af-magic\"</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>oh-my-zsh 就配置完了。这里只是简单的介绍oh-my-zsh。oh-my-zsh 功能还是很丰富的，更多oh-my-zsh请移步\n      <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh GitHub地址</a>\n    </p>\n  </li>\n</ol>\n<h2 id=\"安装tmux\">\n  <a href=\"#安装tmux\" class=\"headerlink\" title=\"安装tmux\"></a>安装tmux</h2>\n<p>Tmux 是一个工具，用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 Tmux 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。</p>\n<ol>\n  <li>\n    <p>先安装Homebrew，这个是Mac平台的包管理器。用来安装一些开发工具还是很方便。Mac系统自带了ruby的环境，我们通过ruby来安装Homebrew</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>通过homebrew 安装tmux</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">brew install tmux</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>就是这么简单tmux就装完了</p>\n  </li>\n</ol>\n<p>下一篇会讲具体的使用方法，包括iterm快捷键，tmux的使用</p>\n","site":{"data":{}},"excerpt":"<p>作为程序员Mac上自带的终端是远远满足不了我们的，这时我们就要自己手动搭一个我们顺手的终端环境。下面我们就来搭建iterm2+ oh my zsh + tmux\n  的终端工具</p>\n<h2 id=\"ITerm2-安装\">\n  <a href=\"#ITerm2-安装\" class=\"headerlink\" title=\"ITerm2 安装\"></a>ITerm2 安装</h2>\n<ol>\n  <li>\n    <p>上Iterm2的官网下载iterm2,\n      <a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"external\">iterm2下载</a>\n    </p>\n  </li>\n  <li>\n    <p>下载完成之后，发现iterm2 自带的配色我不太喜欢，安装完成之后进行item2的配色，这个纯属看个人喜好了。</p>\n    <ul>\n      <li>\n        <p>要进行配色，我们当然得要有配色的方案啦！什么你要自己配一个，嗯…… 这也是可以的，不过有很多现成的方案你要不要啊。github 上有超多的配色方案，我们先把这个库给clone下来。</p>\n        <figure class=\"highlight sh\">\n          <table>\n            <tr>\n              <td class=\"gutter\">\n                <pre><div class=\"line\">1</div></pre>\n              </td>\n              <td class=\"code\">\n                <pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:mbadolato/iTerm2-Color-Schemes.git</div></pre>\n              </td>\n            </tr>\n          </table>\n        </figure>\n        <p>要是你没有git，那我觉得你没太必要继续下去了。当然你还想继续的话，你就上GitHub手动download 下来。</p>","more":"</li>\n      <li>\n        <p>好了配色方案是有了接下来我们就是进行配色了,这个也是比较简单，打开iterm2的偏好设置，找到Profiles下的Colors，选中import，这里选择刚才git\n          克隆下来文件中的schemes文件夹下的文件，这些文件就是各种各样的配色方案，这就看个人喜好了哈，这样你的iterm2配色方案就完成了</p>\n        <p>\n          <img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_color.jpg\" alt=\"\">\n        </p>\n      </li>\n    </ul>\n  </li>\n</ol>\n<h2 id=\"Mac下shell介绍\">\n  <a href=\"#Mac下shell介绍\" class=\"headerlink\" title=\"Mac下shell介绍\"></a>Mac下shell介绍</h2>\n<p>Shell 是LInux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后在把结果返回给用户或应用程序。</p>\n<p>Linux/Unix 提供了很多种shell，常用的shell有这么几种，sh、bash、csh等。想知道系统有几种shell，可以通过以下命令查看。</p>\n<figure class=\"highlight sh\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">cat /etc/shells</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh，目前常用的 Linux 系统和\n  OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh，这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看\n  zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」</p>\n<h3 id=\"安装使用on-my-zsh\">\n  <a href=\"#安装使用on-my-zsh\" class=\"headerlink\" title=\"安装使用on-my-zsh\"></a>安装使用on-my-zsh</h3>\n<ol>\n  <li>\n    <p>通过git 把oh-my-zsh 下载下来</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>添加配置文件并设置为默认的shell</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div><div class=\"line\">chsh <span class=\"_\">-s</span> /bin/zsh</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>\n      <strong>注:</strong> .zshrc 就相当于.bashrc了以后配置环境就在.zshrc中配置就行</p>\n  </li>\n  <li>\n    <p>配置oh-my-zsh 的主题</p>\n    <p>oh-my-zsh 提供了很多的主题，可以选择自己喜欢的风格。具体的主题效果可以参考\n      <a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"external\">主题预览</a>，选好主题了，接下来就是配置了。编辑~/.zshrc 文件</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">vim ~/.zshrc</div><div class=\"line\"><span class=\"comment\">#编辑主题，af-magic是我机器上的主题风格，具体可以设置为刚才主题预览中的</span></div><div class=\"line\">ZSH_THEME=<span class=\"string\">\"af-magic\"</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>oh-my-zsh 就配置完了。这里只是简单的介绍oh-my-zsh。oh-my-zsh 功能还是很丰富的，更多oh-my-zsh请移步\n      <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh GitHub地址</a>\n    </p>\n  </li>\n</ol>\n<h2 id=\"安装tmux\">\n  <a href=\"#安装tmux\" class=\"headerlink\" title=\"安装tmux\"></a>安装tmux</h2>\n<p>Tmux 是一个工具，用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 Tmux 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。</p>\n<ol>\n  <li>\n    <p>先安装Homebrew，这个是Mac平台的包管理器。用来安装一些开发工具还是很方便。Mac系统自带了ruby的环境，我们通过ruby来安装Homebrew</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>通过homebrew 安装tmux</p>\n    <figure class=\"highlight sh\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">brew install tmux</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>就是这么简单tmux就装完了</p>\n  </li>\n</ol>\n<p>下一篇会讲具体的使用方法，包括iterm快捷键，tmux的使用</p>"},{"title":"iterm,tmux,vim 的常用快捷键","date":"2017-06-02T05:52:12.000Z","_content":"\n上一篇博客我们搭建了Mac下流畅的终端使用环境，这篇博客我们讲一些常用的快捷键来提高开发效率。废话不多说我们开始吧\n\n\n\n## iterm2 快捷\n\n通常我们在使用时，一个窗口总是感觉不够用，这时我们就需要多窗口，或者一个窗口需要多个屏。打开Iterm2，我们按下`command + t`，来新建窗口，通过`commmand + w`来关闭当前窗口，如果我们想要切换不同的窗口时，我们可以通过`command + 方向键` 或者`command +  数字`来切换窗口。`command + q` 退出应用程序\n\n**注：** `command + t`或者`command + w`或者`command +q` 在很多应用都是通用的,比如在chrom 上，这几个快捷键，分别表示新建tab页，关闭tab页，推出chrom。但是chrom 切换tab是使用`command + option +方向键` 这个就和iterm2有区别了。\n\n\n\n在链接远程服务器时，我需要在同一窗口，查看不同服务器的状态，或者其他的一些信息。多窗口去查看就太麻烦 了。iterm 的分屏就能满足你的需要了。iterm2在分屏时，可以进行横向分屏和纵向分屏。纵向分屏使用`command + d`横向分屏使用`command + shift +d`，关闭当前分屏的快捷键也是使用`command + w`，切换各个分屏使用的是`command + option + 方向键`，以下是效果图\n\n<!-- more -->\n\n![](https://cocoon-break.github.io/images/screenShot/iterm2_keymap.jpg)\n\n\n\n接下来就是在输入的时候，我们需要快速回到行首使用`ctrl + a`，快速回到行末使用`ctrl + e`，输入失误就需要删除错误了，`ctrl + u`是将当前行清空，使用 `ctrl + w`,删除光标之前的单词，使用 `ctrl + h`删除光标之前所有字符，使用`ctrl + k` 删除光标之后的所有字符。\n\n\n\n总结下 ：\n\n- 窗口和屏相关\n  - 新建窗口：command + t\n  - 关闭窗口或者分屏：command + w\n  - 切换标签：command +  左右方向键\n  - 切换全屏：command + enter\n  - 水平分屏：command + shift + d \n  - 垂直分屏：command + d \n  - 切换分屏：command + option + 方向键\n- 编辑相关\n  - 清除当前行：ctrl + u\n  - 删除光标之前的字符：ctrl + h\n  - 删除光标之前的单词：ctrl + w\n  - 删除光标到文本末尾：ctrl + k\n  - 到行首： ctrl + a\n  - 到行末：ctrl + e\n\n\n\n## tmux 快捷键\n\n 打开iterm2 输入`tmux` 就进入了tmux的交互模式了，tmux 也有窗口和屏的概念这里就不再说明了。直接进入主题，快捷键的使用。\n\n在使用任何功能时我们都得先按下`ctrl + b` 然后**松开**，接着按下其他的键，比如我要新建一个窗口，先按下`ctrl + b`  然后在按下`c`,  这就完成了窗口的新建。\n\n- 快捷键都是先按下`ctrl + b`然后在按一下键\n  - c\t\t新建窗口\n  - &             关闭当前窗口\n  - p              切换至上一个窗口\n  - n              切换至下一个窗口\n  - %              将当前窗口纵向分屏\n  - \"                将当前窗口横向分屏\n  - 方向键      在多个分屏中切换\n  - d                脱离当前tmux，在输入tmux attach 就能重新进入\n  - z                使当前屏占满全屏，在次按下则恢复之前屏样式\n  - x                关闭当前屏\n  - alt + 方向键   调整当前屏大小\n\n这里只将一些基础的快捷键，更多快捷键和配置，请自行谷歌，百度，以下为tmux  分屏之后的效果图\n\n![](https://cocoon-break.github.io/images/screenShot/iterm2_tmux_keymap.jpg)\n\n\n\n## vim 快捷键\n\nvim 的功能很强大，这里也不会深入讲解介绍，只是收集了一些快捷键，以便提供一些效率。\n\n- 查找\n  - 从光标处向下搜索：/ + 要查找的词\n  - 从光标处向上搜索：? + 要查找的词\n  - 快速回到页首：{\n  - 去页尾：}\n  - 回行首：shift + ^\n  - 回行末：shift + $\n- 编辑\n  - 删除光标出的字母：x\n  - 删除光标所在行：dd\n  - 删除单词包括空格：dw\n  - 回撤上一次编辑：u \n  - 取消撤回功能(对u功取消)：control + r\n  - 复制光标所在行：yy\n  - 复制n(数字)行：nyy\n  - 复制单词：yw\n  - 复制n个单词：nyw\n  - 复制光标所在位置到行末：y$\n  - 复制光标所在位置到行首：y^\n  - 粘贴：p\n\n更多vim 操作快捷键：[vim快捷键](http://www.lcode.cc/2017/04/10/vim-shortcut-key.html)\n\n这篇博客只是收集和介绍一些基础简单的快捷键，并没有很深入的去使用iterm2 ，tmux，vim，这些功能都很强大，想继续深入的同学可以去查查资料。","source":"_posts/iterm,tmux,vim的常用快捷键.md","raw":"---\ntitle: iterm,tmux,vim 的常用快捷键\ndate: 2017-06-02 13:52:12\ntags: 技巧\n---\n\n上一篇博客我们搭建了Mac下流畅的终端使用环境，这篇博客我们讲一些常用的快捷键来提高开发效率。废话不多说我们开始吧\n\n\n\n## iterm2 快捷\n\n通常我们在使用时，一个窗口总是感觉不够用，这时我们就需要多窗口，或者一个窗口需要多个屏。打开Iterm2，我们按下`command + t`，来新建窗口，通过`commmand + w`来关闭当前窗口，如果我们想要切换不同的窗口时，我们可以通过`command + 方向键` 或者`command +  数字`来切换窗口。`command + q` 退出应用程序\n\n**注：** `command + t`或者`command + w`或者`command +q` 在很多应用都是通用的,比如在chrom 上，这几个快捷键，分别表示新建tab页，关闭tab页，推出chrom。但是chrom 切换tab是使用`command + option +方向键` 这个就和iterm2有区别了。\n\n\n\n在链接远程服务器时，我需要在同一窗口，查看不同服务器的状态，或者其他的一些信息。多窗口去查看就太麻烦 了。iterm 的分屏就能满足你的需要了。iterm2在分屏时，可以进行横向分屏和纵向分屏。纵向分屏使用`command + d`横向分屏使用`command + shift +d`，关闭当前分屏的快捷键也是使用`command + w`，切换各个分屏使用的是`command + option + 方向键`，以下是效果图\n\n<!-- more -->\n\n![](https://cocoon-break.github.io/images/screenShot/iterm2_keymap.jpg)\n\n\n\n接下来就是在输入的时候，我们需要快速回到行首使用`ctrl + a`，快速回到行末使用`ctrl + e`，输入失误就需要删除错误了，`ctrl + u`是将当前行清空，使用 `ctrl + w`,删除光标之前的单词，使用 `ctrl + h`删除光标之前所有字符，使用`ctrl + k` 删除光标之后的所有字符。\n\n\n\n总结下 ：\n\n- 窗口和屏相关\n  - 新建窗口：command + t\n  - 关闭窗口或者分屏：command + w\n  - 切换标签：command +  左右方向键\n  - 切换全屏：command + enter\n  - 水平分屏：command + shift + d \n  - 垂直分屏：command + d \n  - 切换分屏：command + option + 方向键\n- 编辑相关\n  - 清除当前行：ctrl + u\n  - 删除光标之前的字符：ctrl + h\n  - 删除光标之前的单词：ctrl + w\n  - 删除光标到文本末尾：ctrl + k\n  - 到行首： ctrl + a\n  - 到行末：ctrl + e\n\n\n\n## tmux 快捷键\n\n 打开iterm2 输入`tmux` 就进入了tmux的交互模式了，tmux 也有窗口和屏的概念这里就不再说明了。直接进入主题，快捷键的使用。\n\n在使用任何功能时我们都得先按下`ctrl + b` 然后**松开**，接着按下其他的键，比如我要新建一个窗口，先按下`ctrl + b`  然后在按下`c`,  这就完成了窗口的新建。\n\n- 快捷键都是先按下`ctrl + b`然后在按一下键\n  - c\t\t新建窗口\n  - &             关闭当前窗口\n  - p              切换至上一个窗口\n  - n              切换至下一个窗口\n  - %              将当前窗口纵向分屏\n  - \"                将当前窗口横向分屏\n  - 方向键      在多个分屏中切换\n  - d                脱离当前tmux，在输入tmux attach 就能重新进入\n  - z                使当前屏占满全屏，在次按下则恢复之前屏样式\n  - x                关闭当前屏\n  - alt + 方向键   调整当前屏大小\n\n这里只将一些基础的快捷键，更多快捷键和配置，请自行谷歌，百度，以下为tmux  分屏之后的效果图\n\n![](https://cocoon-break.github.io/images/screenShot/iterm2_tmux_keymap.jpg)\n\n\n\n## vim 快捷键\n\nvim 的功能很强大，这里也不会深入讲解介绍，只是收集了一些快捷键，以便提供一些效率。\n\n- 查找\n  - 从光标处向下搜索：/ + 要查找的词\n  - 从光标处向上搜索：? + 要查找的词\n  - 快速回到页首：{\n  - 去页尾：}\n  - 回行首：shift + ^\n  - 回行末：shift + $\n- 编辑\n  - 删除光标出的字母：x\n  - 删除光标所在行：dd\n  - 删除单词包括空格：dw\n  - 回撤上一次编辑：u \n  - 取消撤回功能(对u功取消)：control + r\n  - 复制光标所在行：yy\n  - 复制n(数字)行：nyy\n  - 复制单词：yw\n  - 复制n个单词：nyw\n  - 复制光标所在位置到行末：y$\n  - 复制光标所在位置到行首：y^\n  - 粘贴：p\n\n更多vim 操作快捷键：[vim快捷键](http://www.lcode.cc/2017/04/10/vim-shortcut-key.html)\n\n这篇博客只是收集和介绍一些基础简单的快捷键，并没有很深入的去使用iterm2 ，tmux，vim，这些功能都很强大，想继续深入的同学可以去查查资料。","slug":"iterm,tmux,vim的常用快捷键","published":1,"updated":"2017-06-13T02:27:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy3w0008i9s6g8q0x96u","content":"<p>上一篇博客我们搭建了Mac下流畅的终端使用环境，这篇博客我们讲一些常用的快捷键来提高开发效率。废话不多说我们开始吧</p>\n<h2 id=\"iterm2-快捷\">\n  <a href=\"#iterm2-快捷\" class=\"headerlink\" title=\"iterm2 快捷\"></a>iterm2 快捷</h2>\n<p>通常我们在使用时，一个窗口总是感觉不够用，这时我们就需要多窗口，或者一个窗口需要多个屏。打开Iterm2，我们按下\n  <code>command + t</code>，来新建窗口，通过\n  <code>commmand + w</code>来关闭当前窗口，如果我们想要切换不同的窗口时，我们可以通过\n  <code>command + 方向键</code> 或者\n  <code>command + 数字</code>来切换窗口。\n  <code>command + q</code> 退出应用程序</p>\n<p>\n  <strong>注：</strong>\n  <code>command + t</code>或者\n  <code>command + w</code>或者\n  <code>command +q</code> 在很多应用都是通用的,比如在chrom 上，这几个快捷键，分别表示新建tab页，关闭tab页，推出chrom。但是chrom\n  切换tab是使用\n  <code>command + option +方向键</code> 这个就和iterm2有区别了。</p>\n<p>在链接远程服务器时，我需要在同一窗口，查看不同服务器的状态，或者其他的一些信息。多窗口去查看就太麻烦 了。iterm 的分屏就能满足你的需要了。iterm2在分屏时，可以进行横向分屏和纵向分屏。纵向分屏使用\n  <code>command + d</code>横向分屏使用\n  <code>command + shift +d</code>，关闭当前分屏的快捷键也是使用\n  <code>command + w</code>，切换各个分屏使用的是\n  <code>command + option + 方向键</code>，以下是效果图</p>\n<a id=\"more\"></a>\n<p>\n  <img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_keymap.jpg\" alt=\"\">\n</p>\n<p>接下来就是在输入的时候，我们需要快速回到行首使用\n  <code>ctrl + a</code>，快速回到行末使用\n  <code>ctrl + e</code>，输入失误就需要删除错误了，\n  <code>ctrl + u</code>是将当前行清空，使用\n  <code>ctrl + w</code>,删除光标之前的单词，使用\n  <code>ctrl + h</code>删除光标之前所有字符，使用\n  <code>ctrl + k</code> 删除光标之后的所有字符。</p>\n<p>总结下 ：</p>\n<ul>\n  <li>窗口和屏相关\n    <ul>\n      <li>新建窗口：command + t</li>\n      <li>关闭窗口或者分屏：command + w</li>\n      <li>切换标签：command + 左右方向键</li>\n      <li>切换全屏：command + enter</li>\n      <li>水平分屏：command + shift + d </li>\n      <li>垂直分屏：command + d </li>\n      <li>切换分屏：command + option + 方向键</li>\n    </ul>\n  </li>\n  <li>编辑相关\n    <ul>\n      <li>清除当前行：ctrl + u</li>\n      <li>删除光标之前的字符：ctrl + h</li>\n      <li>删除光标之前的单词：ctrl + w</li>\n      <li>删除光标到文本末尾：ctrl + k</li>\n      <li>到行首： ctrl + a</li>\n      <li>到行末：ctrl + e</li>\n    </ul>\n  </li>\n</ul>\n<h2 id=\"tmux-快捷键\">\n  <a href=\"#tmux-快捷键\" class=\"headerlink\" title=\"tmux 快捷键\"></a>tmux 快捷键</h2>\n<p> 打开iterm2 输入\n  <code>tmux</code> 就进入了tmux的交互模式了，tmux 也有窗口和屏的概念这里就不再说明了。直接进入主题，快捷键的使用。</p>\n<p>在使用任何功能时我们都得先按下\n  <code>ctrl + b</code> 然后\n  <strong>松开</strong>，接着按下其他的键，比如我要新建一个窗口，先按下\n  <code>ctrl + b</code> 然后在按下\n  <code>c</code>, 这就完成了窗口的新建。</p>\n<ul>\n  <li>快捷键都是先按下\n    <code>ctrl + b</code>然后在按一下键\n    <ul>\n      <li>c 新建窗口</li>\n      <li>&amp; 关闭当前窗口</li>\n      <li>p 切换至上一个窗口</li>\n      <li>n 切换至下一个窗口</li>\n      <li>% 将当前窗口纵向分屏</li>\n      <li>“ 将当前窗口横向分屏</li>\n      <li>方向键 在多个分屏中切换</li>\n      <li>d 脱离当前tmux，在输入tmux attach 就能重新进入</li>\n      <li>z 使当前屏占满全屏，在次按下则恢复之前屏样式</li>\n      <li>x 关闭当前屏</li>\n      <li>alt + 方向键 调整当前屏大小</li>\n    </ul>\n  </li>\n</ul>\n<p>这里只将一些基础的快捷键，更多快捷键和配置，请自行谷歌，百度，以下为tmux 分屏之后的效果图</p>\n<p>\n  <img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_tmux_keymap.jpg\" alt=\"\">\n</p>\n<h2 id=\"vim-快捷键\">\n  <a href=\"#vim-快捷键\" class=\"headerlink\" title=\"vim 快捷键\"></a>vim 快捷键</h2>\n<p>vim 的功能很强大，这里也不会深入讲解介绍，只是收集了一些快捷键，以便提供一些效率。</p>\n<ul>\n  <li>查找\n    <ul>\n      <li>从光标处向下搜索：/ + 要查找的词</li>\n      <li>从光标处向上搜索：? + 要查找的词</li>\n      <li>快速回到页首：{</li>\n      <li>去页尾：}</li>\n      <li>回行首：shift + ^</li>\n      <li>回行末：shift + $</li>\n    </ul>\n  </li>\n  <li>编辑\n    <ul>\n      <li>删除光标出的字母：x</li>\n      <li>删除光标所在行：dd</li>\n      <li>删除单词包括空格：dw</li>\n      <li>回撤上一次编辑：u </li>\n      <li>取消撤回功能(对u功取消)：control + r</li>\n      <li>复制光标所在行：yy</li>\n      <li>复制n(数字)行：nyy</li>\n      <li>复制单词：yw</li>\n      <li>复制n个单词：nyw</li>\n      <li>复制光标所在位置到行末：y$</li>\n      <li>复制光标所在位置到行首：y^</li>\n      <li>粘贴：p</li>\n    </ul>\n  </li>\n</ul>\n<p>更多vim 操作快捷键：\n  <a href=\"http://www.lcode.cc/2017/04/10/vim-shortcut-key.html\" target=\"_blank\" rel=\"external\">vim快捷键</a>\n</p>\n<p>这篇博客只是收集和介绍一些基础简单的快捷键，并没有很深入的去使用iterm2 ，tmux，vim，这些功能都很强大，想继续深入的同学可以去查查资料。</p>\n","site":{"data":{}},"excerpt":"<p>上一篇博客我们搭建了Mac下流畅的终端使用环境，这篇博客我们讲一些常用的快捷键来提高开发效率。废话不多说我们开始吧</p>\n<h2 id=\"iterm2-快捷\">\n  <a href=\"#iterm2-快捷\" class=\"headerlink\" title=\"iterm2 快捷\"></a>iterm2 快捷</h2>\n<p>通常我们在使用时，一个窗口总是感觉不够用，这时我们就需要多窗口，或者一个窗口需要多个屏。打开Iterm2，我们按下\n  <code>command + t</code>，来新建窗口，通过\n  <code>commmand + w</code>来关闭当前窗口，如果我们想要切换不同的窗口时，我们可以通过\n  <code>command + 方向键</code> 或者\n  <code>command + 数字</code>来切换窗口。\n  <code>command + q</code> 退出应用程序</p>\n<p>\n  <strong>注：</strong>\n  <code>command + t</code>或者\n  <code>command + w</code>或者\n  <code>command +q</code> 在很多应用都是通用的,比如在chrom 上，这几个快捷键，分别表示新建tab页，关闭tab页，推出chrom。但是chrom\n  切换tab是使用\n  <code>command + option +方向键</code> 这个就和iterm2有区别了。</p>\n<p>在链接远程服务器时，我需要在同一窗口，查看不同服务器的状态，或者其他的一些信息。多窗口去查看就太麻烦 了。iterm 的分屏就能满足你的需要了。iterm2在分屏时，可以进行横向分屏和纵向分屏。纵向分屏使用\n  <code>command + d</code>横向分屏使用\n  <code>command + shift +d</code>，关闭当前分屏的快捷键也是使用\n  <code>command + w</code>，切换各个分屏使用的是\n  <code>command + option + 方向键</code>，以下是效果图</p>","more":"<p>\n  <img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_keymap.jpg\" alt=\"\">\n</p>\n<p>接下来就是在输入的时候，我们需要快速回到行首使用\n  <code>ctrl + a</code>，快速回到行末使用\n  <code>ctrl + e</code>，输入失误就需要删除错误了，\n  <code>ctrl + u</code>是将当前行清空，使用\n  <code>ctrl + w</code>,删除光标之前的单词，使用\n  <code>ctrl + h</code>删除光标之前所有字符，使用\n  <code>ctrl + k</code> 删除光标之后的所有字符。</p>\n<p>总结下 ：</p>\n<ul>\n  <li>窗口和屏相关\n    <ul>\n      <li>新建窗口：command + t</li>\n      <li>关闭窗口或者分屏：command + w</li>\n      <li>切换标签：command + 左右方向键</li>\n      <li>切换全屏：command + enter</li>\n      <li>水平分屏：command + shift + d </li>\n      <li>垂直分屏：command + d </li>\n      <li>切换分屏：command + option + 方向键</li>\n    </ul>\n  </li>\n  <li>编辑相关\n    <ul>\n      <li>清除当前行：ctrl + u</li>\n      <li>删除光标之前的字符：ctrl + h</li>\n      <li>删除光标之前的单词：ctrl + w</li>\n      <li>删除光标到文本末尾：ctrl + k</li>\n      <li>到行首： ctrl + a</li>\n      <li>到行末：ctrl + e</li>\n    </ul>\n  </li>\n</ul>\n<h2 id=\"tmux-快捷键\">\n  <a href=\"#tmux-快捷键\" class=\"headerlink\" title=\"tmux 快捷键\"></a>tmux 快捷键</h2>\n<p> 打开iterm2 输入\n  <code>tmux</code> 就进入了tmux的交互模式了，tmux 也有窗口和屏的概念这里就不再说明了。直接进入主题，快捷键的使用。</p>\n<p>在使用任何功能时我们都得先按下\n  <code>ctrl + b</code> 然后\n  <strong>松开</strong>，接着按下其他的键，比如我要新建一个窗口，先按下\n  <code>ctrl + b</code> 然后在按下\n  <code>c</code>, 这就完成了窗口的新建。</p>\n<ul>\n  <li>快捷键都是先按下\n    <code>ctrl + b</code>然后在按一下键\n    <ul>\n      <li>c 新建窗口</li>\n      <li>&amp; 关闭当前窗口</li>\n      <li>p 切换至上一个窗口</li>\n      <li>n 切换至下一个窗口</li>\n      <li>% 将当前窗口纵向分屏</li>\n      <li>“ 将当前窗口横向分屏</li>\n      <li>方向键 在多个分屏中切换</li>\n      <li>d 脱离当前tmux，在输入tmux attach 就能重新进入</li>\n      <li>z 使当前屏占满全屏，在次按下则恢复之前屏样式</li>\n      <li>x 关闭当前屏</li>\n      <li>alt + 方向键 调整当前屏大小</li>\n    </ul>\n  </li>\n</ul>\n<p>这里只将一些基础的快捷键，更多快捷键和配置，请自行谷歌，百度，以下为tmux 分屏之后的效果图</p>\n<p>\n  <img src=\"https://cocoon-break.github.io/images/screenShot/iterm2_tmux_keymap.jpg\" alt=\"\">\n</p>\n<h2 id=\"vim-快捷键\">\n  <a href=\"#vim-快捷键\" class=\"headerlink\" title=\"vim 快捷键\"></a>vim 快捷键</h2>\n<p>vim 的功能很强大，这里也不会深入讲解介绍，只是收集了一些快捷键，以便提供一些效率。</p>\n<ul>\n  <li>查找\n    <ul>\n      <li>从光标处向下搜索：/ + 要查找的词</li>\n      <li>从光标处向上搜索：? + 要查找的词</li>\n      <li>快速回到页首：{</li>\n      <li>去页尾：}</li>\n      <li>回行首：shift + ^</li>\n      <li>回行末：shift + $</li>\n    </ul>\n  </li>\n  <li>编辑\n    <ul>\n      <li>删除光标出的字母：x</li>\n      <li>删除光标所在行：dd</li>\n      <li>删除单词包括空格：dw</li>\n      <li>回撤上一次编辑：u </li>\n      <li>取消撤回功能(对u功取消)：control + r</li>\n      <li>复制光标所在行：yy</li>\n      <li>复制n(数字)行：nyy</li>\n      <li>复制单词：yw</li>\n      <li>复制n个单词：nyw</li>\n      <li>复制光标所在位置到行末：y$</li>\n      <li>复制光标所在位置到行首：y^</li>\n      <li>粘贴：p</li>\n    </ul>\n  </li>\n</ul>\n<p>更多vim 操作快捷键：\n  <a href=\"http://www.lcode.cc/2017/04/10/vim-shortcut-key.html\" target=\"_blank\" rel=\"external\">vim快捷键</a>\n</p>\n<p>这篇博客只是收集和介绍一些基础简单的快捷键，并没有很深入的去使用iterm2 ，tmux，vim，这些功能都很强大，想继续深入的同学可以去查查资料。</p>"},{"title":"公众号开发前端","date":"2017-06-19T03:33:30.000Z","_content":"\n上一篇讲了微信公众号后端的开发，这一篇是讲讲前端页面的开发。前端的技术栈用的是react。这里介绍了在开发过程中遇到的一些问题。以及一些知识点的介绍\n\n以下步骤的前提是你已经安装了node，才能继续往下走。\n\n## 创建一个node工程\n\n​\t初始化一个工程，并进行一些基本信息填写。执行`npm init`，根据提示填写信息，最后会生成一个package.json 文件。这样一个node工程初始化完成了。以下package.json 文件是我修改过的，默认生成的文件和这个是有差异的。主要讲解几个字段，main:表示入口文件，scripts：主要是脚本命令，执行npm start 的时候，它会执行scripts 下start 后的命令，dependencies：是工程依赖的一些库，devDependencies：主要是开发的时候使用的一些库，生产的时候不需要使用。\n\n<!-- more -->\n\n```json\n{\n  \"name\": \"doudou-client\",\n  \"version\": \"1.0.0\",\n  \"description\": \"wechat public\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack-dev-server -d --hot --inline --progress --colors --host 0.0.0.0 --port 8080\",\n    \"dev\": \"webpack -d --watch\"\n  },\n  \"author\": \"cocoon\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \n  },\n  \"devDependencies\": {\n    \"webpack\": \"^1.12.2\",\n    \"webpack-dev-server\": \"^1.12.1\"\n  }\n}\n```\n\n​\t有一个package.json  文件还不能使用，接下来是编写app.js文件，也就是入口文件，我们就简易的写一个demo文件吧！我们要使用react进行开发我们就得安装reactjs 相关的依赖，执行以下命令来添加reactjs 依赖的库,和开发时使用的一些开发库。如：webpack\n\n ```sh\nnpm install --save react react-dom\nnpm install --save-dev css-loader\nnpm install --save-dev style-loader\nnpm install --save-dev babel-loader babel-core babel-preset-es2015 babel-preset-react\nnpm install --save-dev webpack webpack-dev-server\n ```\n\n创建一个app.js文件\n\n```jsx\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass App extends Component {\n    render() {\n           return (\n               <div>hello wechat test</div>\n           );\n       }\n}\nReactDOM.render((\n       <App/>\n), document.getElementById('container'));\n```\n\n​\t除了js文件之外，我们还需要一个 html文件，来加载这些js文件。\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\"/>\n    <link rel=\"stylesheet\" href=\"src/css/fontAwesome/css/font-awesome.min.css\">\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\n\n    <title>微信公众号网页</title>\n    <script>\n        function setHeight() {\n            console.log(screen.height)\n            document.body.style.height = screen.height + 'px';\n        }\n    </script>\n</head>\n<body style=\"width: 100%;\" onload=\"setHeight()\">\n<div id=\"container\" id=\"container\" style=\"height: 100%\"></div>\n<script src=\"./assets/vendor.bundle.js\"></script>\n<script src=\"./assets/bundle.js\"></script>\n</body>\n</html>\n```\n\n​\t发现我们的html页面中并没有加载app.js文件，是因为我们通过webpack 来打包js文件，css文件，图片等。html页面加载的是我们打包之后的文件。所以我们在工程目录下创建一个webpack.config.js文件，来配置webpack一些打包的配置项\n\n```js\nvar webpack = require('webpack');\nvar path = require('path');\nvar autoprefixer = require('autoprefixer');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar OpenBrowserPlugin = require('open-browser-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        js: ['./app.js'],\n        vendor: ['react', 'classnames', 'react-router', 'react-dom', 'react-addons-css-transition-group']\n    },\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: './bundle.js'\n    },\n    devServer:{\n        proxy:{\n            '/api':{\n                target:'http://localhost:5000',\n                secure: false,\n                changeOrigin: true,\n                pathRewrite: {'^/api': ''}\n            }\n        },\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.js[x]?$/,\n                exclude: /node_modules/,\n                loader: 'babel',\n                query: {\n                    cacheDirectory: true,\n                    presets: ['es2015', 'react']\n                }\n            }, {\n                test: /\\.less$/,\n                loader: 'style!css!postcss!less'\n            }, {\n                test: /\\.css/,\n                loader: ExtractTextPlugin.extract('style', 'css', 'postcss')\n            }, {\n                test: /\\.(png|jpg|svg)$/,\n                loader: 'url?limit=25000'\n            }\n        ]\n    },\n    postcss: [autoprefixer],\n    plugins: [\n        new webpack.DefinePlugin({\n            DEBUG: process.env.NODE_ENV !== 'production'\n        }),\n        new ExtractTextPlugin('weui.min.css'),\n        new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js'),\n        \n        new HtmlWebpackPlugin({\n            template: path.join(__dirname, './index.html')\n        }),\n    ]\n};\n\n```\n\n​\t更多的webpack学习，请移步[webpack学习入门](https://zhaoda.gitbooks.io/webpack/content/)\n\n\n\n整个工程demo在GitHub上[wechat_public_template](https://github.com/Cocoon-break/wechat_public_template)\n\n## 常规问题\n\n- 网页无法适应全屏？\n\n  在开发过程中发现body标签高度始终无法全屏，及时设置高度为100%，也无法生效。\n\n   ```html\n  <!--1.添加移动适配设置 -->\n  <meta name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\"/>\n\n  <!--2.添加js动态的把body高度设置为，设备屏高-->\n  <script>\n          function setHeight() {\n              document.body.style.height = screen.height + 'px';\n          }\n  </script>\n\n  <!--3.在body onload 时执行js-->\n  <body style=\"width: 100%;\" onload=\"setHeight()\"></body>\n   ```\n\n  ​\n\n## 开源库使用时遇到的问题\n\n- 在使用react-weui 发现样式无法生效\n\n  ```js\n  import 'react-weui/lib/react-weui.min.css';//导入对应样式文件\n  ```\n\n- 在使用fontawesome 时，发现图标无法显示\n\n   ```html\n   <!--在html中把样式文件加上-->\n   <link rel=\"stylesheet\" href=\"src/css/fontAwesome/css/font-awesome.min.css\">\n   ```\n\n- 开发时想通过fetch直接请求服务端接口，解决跨域问题\n\n  ```js\n  //package.json 使用webpack-dev-server 启动开发环境，重点是-d\n  \"scripts\":{\n    \"start\": \"webpack-dev-server -d --hot --inline --progress --colors --host 0.0.0.0 --port 8080\",\n  }\n\n  //webpack.config.js 配置代理\n    module.exports = {\n      //其他配置省略\n      devServer:{\n          proxy:{\n              '/api':{\n                  target:'http://localhost:5000',\n                  secure: false,\n                  changeOrigin: true,\n                  pathRewrite: {'^/api': ''}\n              }\n          },\n      },\n    }\n    \n  //使用时代码\n    fetch('/api/show_operation/1')\n              .then(response=>response.json())\n              .then(result=>console.log(result))\n    \n  //说明：通过proxy配置可以最终发出的请求路径为http://localhost:500/show_operation/1\n  ```\n\n  ​\n\n","source":"_posts/公众号web开发过程记录.md","raw":"---\ntitle: 公众号开发前端\ndate: 2017-06-19 11:33:30\ntags: 前端\n---\n\n上一篇讲了微信公众号后端的开发，这一篇是讲讲前端页面的开发。前端的技术栈用的是react。这里介绍了在开发过程中遇到的一些问题。以及一些知识点的介绍\n\n以下步骤的前提是你已经安装了node，才能继续往下走。\n\n## 创建一个node工程\n\n​\t初始化一个工程，并进行一些基本信息填写。执行`npm init`，根据提示填写信息，最后会生成一个package.json 文件。这样一个node工程初始化完成了。以下package.json 文件是我修改过的，默认生成的文件和这个是有差异的。主要讲解几个字段，main:表示入口文件，scripts：主要是脚本命令，执行npm start 的时候，它会执行scripts 下start 后的命令，dependencies：是工程依赖的一些库，devDependencies：主要是开发的时候使用的一些库，生产的时候不需要使用。\n\n<!-- more -->\n\n```json\n{\n  \"name\": \"doudou-client\",\n  \"version\": \"1.0.0\",\n  \"description\": \"wechat public\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack-dev-server -d --hot --inline --progress --colors --host 0.0.0.0 --port 8080\",\n    \"dev\": \"webpack -d --watch\"\n  },\n  \"author\": \"cocoon\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \n  },\n  \"devDependencies\": {\n    \"webpack\": \"^1.12.2\",\n    \"webpack-dev-server\": \"^1.12.1\"\n  }\n}\n```\n\n​\t有一个package.json  文件还不能使用，接下来是编写app.js文件，也就是入口文件，我们就简易的写一个demo文件吧！我们要使用react进行开发我们就得安装reactjs 相关的依赖，执行以下命令来添加reactjs 依赖的库,和开发时使用的一些开发库。如：webpack\n\n ```sh\nnpm install --save react react-dom\nnpm install --save-dev css-loader\nnpm install --save-dev style-loader\nnpm install --save-dev babel-loader babel-core babel-preset-es2015 babel-preset-react\nnpm install --save-dev webpack webpack-dev-server\n ```\n\n创建一个app.js文件\n\n```jsx\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass App extends Component {\n    render() {\n           return (\n               <div>hello wechat test</div>\n           );\n       }\n}\nReactDOM.render((\n       <App/>\n), document.getElementById('container'));\n```\n\n​\t除了js文件之外，我们还需要一个 html文件，来加载这些js文件。\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\"/>\n    <link rel=\"stylesheet\" href=\"src/css/fontAwesome/css/font-awesome.min.css\">\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\n\n    <title>微信公众号网页</title>\n    <script>\n        function setHeight() {\n            console.log(screen.height)\n            document.body.style.height = screen.height + 'px';\n        }\n    </script>\n</head>\n<body style=\"width: 100%;\" onload=\"setHeight()\">\n<div id=\"container\" id=\"container\" style=\"height: 100%\"></div>\n<script src=\"./assets/vendor.bundle.js\"></script>\n<script src=\"./assets/bundle.js\"></script>\n</body>\n</html>\n```\n\n​\t发现我们的html页面中并没有加载app.js文件，是因为我们通过webpack 来打包js文件，css文件，图片等。html页面加载的是我们打包之后的文件。所以我们在工程目录下创建一个webpack.config.js文件，来配置webpack一些打包的配置项\n\n```js\nvar webpack = require('webpack');\nvar path = require('path');\nvar autoprefixer = require('autoprefixer');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar OpenBrowserPlugin = require('open-browser-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        js: ['./app.js'],\n        vendor: ['react', 'classnames', 'react-router', 'react-dom', 'react-addons-css-transition-group']\n    },\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: './bundle.js'\n    },\n    devServer:{\n        proxy:{\n            '/api':{\n                target:'http://localhost:5000',\n                secure: false,\n                changeOrigin: true,\n                pathRewrite: {'^/api': ''}\n            }\n        },\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.js[x]?$/,\n                exclude: /node_modules/,\n                loader: 'babel',\n                query: {\n                    cacheDirectory: true,\n                    presets: ['es2015', 'react']\n                }\n            }, {\n                test: /\\.less$/,\n                loader: 'style!css!postcss!less'\n            }, {\n                test: /\\.css/,\n                loader: ExtractTextPlugin.extract('style', 'css', 'postcss')\n            }, {\n                test: /\\.(png|jpg|svg)$/,\n                loader: 'url?limit=25000'\n            }\n        ]\n    },\n    postcss: [autoprefixer],\n    plugins: [\n        new webpack.DefinePlugin({\n            DEBUG: process.env.NODE_ENV !== 'production'\n        }),\n        new ExtractTextPlugin('weui.min.css'),\n        new webpack.optimize.CommonsChunkPlugin('vendor', 'vendor.bundle.js'),\n        \n        new HtmlWebpackPlugin({\n            template: path.join(__dirname, './index.html')\n        }),\n    ]\n};\n\n```\n\n​\t更多的webpack学习，请移步[webpack学习入门](https://zhaoda.gitbooks.io/webpack/content/)\n\n\n\n整个工程demo在GitHub上[wechat_public_template](https://github.com/Cocoon-break/wechat_public_template)\n\n## 常规问题\n\n- 网页无法适应全屏？\n\n  在开发过程中发现body标签高度始终无法全屏，及时设置高度为100%，也无法生效。\n\n   ```html\n  <!--1.添加移动适配设置 -->\n  <meta name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\"/>\n\n  <!--2.添加js动态的把body高度设置为，设备屏高-->\n  <script>\n          function setHeight() {\n              document.body.style.height = screen.height + 'px';\n          }\n  </script>\n\n  <!--3.在body onload 时执行js-->\n  <body style=\"width: 100%;\" onload=\"setHeight()\"></body>\n   ```\n\n  ​\n\n## 开源库使用时遇到的问题\n\n- 在使用react-weui 发现样式无法生效\n\n  ```js\n  import 'react-weui/lib/react-weui.min.css';//导入对应样式文件\n  ```\n\n- 在使用fontawesome 时，发现图标无法显示\n\n   ```html\n   <!--在html中把样式文件加上-->\n   <link rel=\"stylesheet\" href=\"src/css/fontAwesome/css/font-awesome.min.css\">\n   ```\n\n- 开发时想通过fetch直接请求服务端接口，解决跨域问题\n\n  ```js\n  //package.json 使用webpack-dev-server 启动开发环境，重点是-d\n  \"scripts\":{\n    \"start\": \"webpack-dev-server -d --hot --inline --progress --colors --host 0.0.0.0 --port 8080\",\n  }\n\n  //webpack.config.js 配置代理\n    module.exports = {\n      //其他配置省略\n      devServer:{\n          proxy:{\n              '/api':{\n                  target:'http://localhost:5000',\n                  secure: false,\n                  changeOrigin: true,\n                  pathRewrite: {'^/api': ''}\n              }\n          },\n      },\n    }\n    \n  //使用时代码\n    fetch('/api/show_operation/1')\n              .then(response=>response.json())\n              .then(result=>console.log(result))\n    \n  //说明：通过proxy配置可以最终发出的请求路径为http://localhost:500/show_operation/1\n  ```\n\n  ​\n\n","slug":"公众号web开发过程记录","published":1,"updated":"2017-06-22T10:17:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy3z0009i9s6dbeplewm","content":"<p>上一篇讲了微信公众号后端的开发，这一篇是讲讲前端页面的开发。前端的技术栈用的是react。这里介绍了在开发过程中遇到的一些问题。以及一些知识点的介绍</p>\n<p>以下步骤的前提是你已经安装了node，才能继续往下走。</p>\n<h2 id=\"创建一个node工程\">\n  <a href=\"#创建一个node工程\" class=\"headerlink\" title=\"创建一个node工程\"></a>创建一个node工程</h2>\n<p>​ 初始化一个工程，并进行一些基本信息填写。执行\n  <code>npm init</code>，根据提示填写信息，最后会生成一个package.json 文件。这样一个node工程初始化完成了。以下package.json\n  文件是我修改过的，默认生成的文件和这个是有差异的。主要讲解几个字段，main:表示入口文件，scripts：主要是脚本命令，执行npm start 的时候，它会执行scripts\n  下start 后的命令，dependencies：是工程依赖的一些库，devDependencies：主要是开发的时候使用的一些库，生产的时候不需要使用。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight json\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"doudou-client\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"wechat public\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server -d --hot --inline --progress --colors --host 0.0.0.0 --port 8080\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"webpack -d --watch\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"cocoon\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    </div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.12.2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.12.1\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>​ 有一个package.json 文件还不能使用，接下来是编写app.js文件，也就是入口文件，我们就简易的写一个demo文件吧！我们要使用react进行开发我们就得安装reactjs\n  相关的依赖，执行以下命令来添加reactjs 依赖的库,和开发时使用的一些开发库。如：webpack</p>\n<figure class=\"highlight sh\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">npm install --save react react-dom</div><div class=\"line\">npm install --save-dev css-loader</div><div class=\"line\">npm install --save-dev style-loader</div><div class=\"line\">npm install --save-dev babel-loader babel-core babel-preset-es2015 babel-preset-react</div><div class=\"line\">npm install --save-dev webpack webpack-dev-server</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>创建一个app.js文件</p>\n<figure class=\"highlight jsx\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> (</div><div class=\"line\">               &lt;div&gt;hello wechat test&lt;/div&gt;</div><div class=\"line\">           );</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">ReactDOM.render((</div><div class=\"line\">       &lt;App/&gt;</div><div class=\"line\">), <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>));</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>​ 除了js文件之外，我们还需要一个 html文件，来加载这些js文件。</p>\n<figure class=\"highlight html\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></div><div class=\"line\">          <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"src/css/fontAwesome/css/font-awesome.min.css\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>微信公众号网页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHeight</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(screen.height)</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.style.height = screen.height + <span class=\"string\">'px'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%;\"</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"setHeight()\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100%\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/vendor.bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>​ 发现我们的html页面中并没有加载app.js文件，是因为我们通过webpack 来打包js文件，css文件，图片等。html页面加载的是我们打包之后的文件。所以我们在工程目录下创建一个webpack.config.js文件，来配置webpack一些打包的配置项</p>\n<figure class=\"highlight js\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> OpenBrowserPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'open-browser-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">js</span>: [<span class=\"string\">'./app.js'</span>],</div><div class=\"line\">        <span class=\"attr\">vendor</span>: [<span class=\"string\">'react'</span>, <span class=\"string\">'classnames'</span>, <span class=\"string\">'react-router'</span>, <span class=\"string\">'react-dom'</span>, <span class=\"string\">'react-addons-css-transition-group'</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'./bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">devServer</span>:&#123;</div><div class=\"line\">        <span class=\"attr\">proxy</span>:&#123;</div><div class=\"line\">            <span class=\"string\">'/api'</span>:&#123;</div><div class=\"line\">                <span class=\"attr\">target</span>:<span class=\"string\">'http://localhost:5000'</span>,</div><div class=\"line\">                <span class=\"attr\">secure</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">                <span class=\"attr\">pathRewrite</span>: &#123;<span class=\"string\">'^/api'</span>: <span class=\"string\">''</span>&#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js[x]?$/</span>,</div><div class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\">                <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">                    <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'react'</span>]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;, &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'style!css!postcss!less'</span></div><div class=\"line\">            &#125;, &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: ExtractTextPlugin.extract(<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'postcss'</span>)</div><div class=\"line\">            &#125;, &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|svg)$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'url?limit=25000'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">postcss</span>: [autoprefixer],</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">DEBUG</span>: process.env.NODE_ENV !== <span class=\"string\">'production'</span></div><div class=\"line\">        &#125;),</div><div class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'weui.min.css'</span>),</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'vendor'</span>, <span class=\"string\">'vendor.bundle.js'</span>),</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">template</span>: path.join(__dirname, <span class=\"string\">'./index.html'</span>)</div><div class=\"line\">        &#125;),</div><div class=\"line\">    ]</div><div class=\"line\">&#125;;</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>​ 更多的webpack学习，请移步\n  <a href=\"https://zhaoda.gitbooks.io/webpack/content/\" target=\"_blank\" rel=\"external\">webpack学习入门</a>\n</p>\n<p>整个工程demo在GitHub上\n  <a href=\"https://github.com/Cocoon-break/wechat_public_template\" target=\"_blank\" rel=\"external\">wechat_public_template</a>\n</p>\n<h2 id=\"常规问题\">\n  <a href=\"#常规问题\" class=\"headerlink\" title=\"常规问题\"></a>常规问题</h2>\n<ul>\n  <li>\n    <p>网页无法适应全屏？</p>\n    <p>在开发过程中发现body标签高度始终无法全屏，及时设置高度为100%，也无法生效。</p>\n    <figure class=\"highlight html\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"comment\">&lt;!--1.添加移动适配设置 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></div><div class=\"line\">          <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--2.添加js动态的把body高度设置为，设备屏高--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHeight</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.style.height = screen.height + <span class=\"string\">'px'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--3.在body onload 时执行js--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%;\"</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"setHeight()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>​</p>\n  </li>\n</ul>\n<h2 id=\"开源库使用时遇到的问题\">\n  <a href=\"#开源库使用时遇到的问题\" class=\"headerlink\" title=\"开源库使用时遇到的问题\"></a>开源库使用时遇到的问题</h2>\n<ul>\n  <li>\n    <p>在使用react-weui 发现样式无法生效</p>\n    <figure class=\"highlight js\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'react-weui/lib/react-weui.min.css'</span>;<span class=\"comment\">//导入对应样式文件</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>在使用fontawesome 时，发现图标无法显示</p>\n    <figure class=\"highlight html\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"comment\">&lt;!--在html中把样式文件加上--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"src/css/fontAwesome/css/font-awesome.min.css\"</span>&gt;</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>开发时想通过fetch直接请求服务端接口，解决跨域问题</p>\n    <figure class=\"highlight js\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"comment\">//package.json 使用webpack-dev-server 启动开发环境，重点是-d</span></div><div class=\"line\"><span class=\"string\">\"scripts\"</span>:&#123;</div><div class=\"line\">  <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server -d --hot --inline --progress --colors --host 0.0.0.0 --port 8080\"</span>,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//webpack.config.js 配置代理</span></div><div class=\"line\">  <span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"comment\">//其他配置省略</span></div><div class=\"line\">    devServer:&#123;</div><div class=\"line\">        <span class=\"attr\">proxy</span>:&#123;</div><div class=\"line\">            <span class=\"string\">'/api'</span>:&#123;</div><div class=\"line\">                <span class=\"attr\">target</span>:<span class=\"string\">'http://localhost:5000'</span>,</div><div class=\"line\">                <span class=\"attr\">secure</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">                <span class=\"attr\">pathRewrite</span>: &#123;<span class=\"string\">'^/api'</span>: <span class=\"string\">''</span>&#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//使用时代码</span></div><div class=\"line\">  fetch(<span class=\"string\">'/api/show_operation/1'</span>)</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">response</span>=&gt;</span>response.json())</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span><span class=\"built_in\">console</span>.log(result))</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//说明：通过proxy配置可以最终发出的请求路径为http://localhost:500/show_operation/1</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>​</p>\n  </li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上一篇讲了微信公众号后端的开发，这一篇是讲讲前端页面的开发。前端的技术栈用的是react。这里介绍了在开发过程中遇到的一些问题。以及一些知识点的介绍</p>\n<p>以下步骤的前提是你已经安装了node，才能继续往下走。</p>\n<h2 id=\"创建一个node工程\">\n  <a href=\"#创建一个node工程\" class=\"headerlink\" title=\"创建一个node工程\"></a>创建一个node工程</h2>\n<p>​ 初始化一个工程，并进行一些基本信息填写。执行\n  <code>npm init</code>，根据提示填写信息，最后会生成一个package.json 文件。这样一个node工程初始化完成了。以下package.json\n  文件是我修改过的，默认生成的文件和这个是有差异的。主要讲解几个字段，main:表示入口文件，scripts：主要是脚本命令，执行npm start 的时候，它会执行scripts\n  下start 后的命令，dependencies：是工程依赖的一些库，devDependencies：主要是开发的时候使用的一些库，生产的时候不需要使用。</p>","more":"<figure class=\"highlight json\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"doudou-client\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"wechat public\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server -d --hot --inline --progress --colors --host 0.0.0.0 --port 8080\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"webpack -d --watch\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"cocoon\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    </div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.12.2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.12.1\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>​ 有一个package.json 文件还不能使用，接下来是编写app.js文件，也就是入口文件，我们就简易的写一个demo文件吧！我们要使用react进行开发我们就得安装reactjs\n  相关的依赖，执行以下命令来添加reactjs 依赖的库,和开发时使用的一些开发库。如：webpack</p>\n<figure class=\"highlight sh\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">npm install --save react react-dom</div><div class=\"line\">npm install --save-dev css-loader</div><div class=\"line\">npm install --save-dev style-loader</div><div class=\"line\">npm install --save-dev babel-loader babel-core babel-preset-es2015 babel-preset-react</div><div class=\"line\">npm install --save-dev webpack webpack-dev-server</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>创建一个app.js文件</p>\n<figure class=\"highlight jsx\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> (</div><div class=\"line\">               &lt;div&gt;hello wechat test&lt;/div&gt;</div><div class=\"line\">           );</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">ReactDOM.render((</div><div class=\"line\">       &lt;App/&gt;</div><div class=\"line\">), <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>));</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>​ 除了js文件之外，我们还需要一个 html文件，来加载这些js文件。</p>\n<figure class=\"highlight html\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></div><div class=\"line\">          <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"src/css/fontAwesome/css/font-awesome.min.css\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>微信公众号网页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHeight</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(screen.height)</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.style.height = screen.height + <span class=\"string\">'px'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%;\"</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"setHeight()\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100%\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/vendor.bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>​ 发现我们的html页面中并没有加载app.js文件，是因为我们通过webpack 来打包js文件，css文件，图片等。html页面加载的是我们打包之后的文件。所以我们在工程目录下创建一个webpack.config.js文件，来配置webpack一些打包的配置项</p>\n<figure class=\"highlight js\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> OpenBrowserPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'open-browser-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">js</span>: [<span class=\"string\">'./app.js'</span>],</div><div class=\"line\">        <span class=\"attr\">vendor</span>: [<span class=\"string\">'react'</span>, <span class=\"string\">'classnames'</span>, <span class=\"string\">'react-router'</span>, <span class=\"string\">'react-dom'</span>, <span class=\"string\">'react-addons-css-transition-group'</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'./bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">devServer</span>:&#123;</div><div class=\"line\">        <span class=\"attr\">proxy</span>:&#123;</div><div class=\"line\">            <span class=\"string\">'/api'</span>:&#123;</div><div class=\"line\">                <span class=\"attr\">target</span>:<span class=\"string\">'http://localhost:5000'</span>,</div><div class=\"line\">                <span class=\"attr\">secure</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">                <span class=\"attr\">pathRewrite</span>: &#123;<span class=\"string\">'^/api'</span>: <span class=\"string\">''</span>&#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js[x]?$/</span>,</div><div class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\">                <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">                    <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'react'</span>]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;, &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'style!css!postcss!less'</span></div><div class=\"line\">            &#125;, &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: ExtractTextPlugin.extract(<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'postcss'</span>)</div><div class=\"line\">            &#125;, &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|svg)$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'url?limit=25000'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">postcss</span>: [autoprefixer],</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">DEBUG</span>: process.env.NODE_ENV !== <span class=\"string\">'production'</span></div><div class=\"line\">        &#125;),</div><div class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'weui.min.css'</span>),</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'vendor'</span>, <span class=\"string\">'vendor.bundle.js'</span>),</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">template</span>: path.join(__dirname, <span class=\"string\">'./index.html'</span>)</div><div class=\"line\">        &#125;),</div><div class=\"line\">    ]</div><div class=\"line\">&#125;;</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>​ 更多的webpack学习，请移步\n  <a href=\"https://zhaoda.gitbooks.io/webpack/content/\" target=\"_blank\" rel=\"external\">webpack学习入门</a>\n</p>\n<p>整个工程demo在GitHub上\n  <a href=\"https://github.com/Cocoon-break/wechat_public_template\" target=\"_blank\" rel=\"external\">wechat_public_template</a>\n</p>\n<h2 id=\"常规问题\">\n  <a href=\"#常规问题\" class=\"headerlink\" title=\"常规问题\"></a>常规问题</h2>\n<ul>\n  <li>\n    <p>网页无法适应全屏？</p>\n    <p>在开发过程中发现body标签高度始终无法全屏，及时设置高度为100%，也无法生效。</p>\n    <figure class=\"highlight html\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"comment\">&lt;!--1.添加移动适配设置 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></div><div class=\"line\">          <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--2.添加js动态的把body高度设置为，设备屏高--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHeight</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.style.height = screen.height + <span class=\"string\">'px'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--3.在body onload 时执行js--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%;\"</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"setHeight()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>​</p>\n  </li>\n</ul>\n<h2 id=\"开源库使用时遇到的问题\">\n  <a href=\"#开源库使用时遇到的问题\" class=\"headerlink\" title=\"开源库使用时遇到的问题\"></a>开源库使用时遇到的问题</h2>\n<ul>\n  <li>\n    <p>在使用react-weui 发现样式无法生效</p>\n    <figure class=\"highlight js\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'react-weui/lib/react-weui.min.css'</span>;<span class=\"comment\">//导入对应样式文件</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>在使用fontawesome 时，发现图标无法显示</p>\n    <figure class=\"highlight html\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"comment\">&lt;!--在html中把样式文件加上--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"src/css/fontAwesome/css/font-awesome.min.css\"</span>&gt;</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>开发时想通过fetch直接请求服务端接口，解决跨域问题</p>\n    <figure class=\"highlight js\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"comment\">//package.json 使用webpack-dev-server 启动开发环境，重点是-d</span></div><div class=\"line\"><span class=\"string\">\"scripts\"</span>:&#123;</div><div class=\"line\">  <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server -d --hot --inline --progress --colors --host 0.0.0.0 --port 8080\"</span>,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//webpack.config.js 配置代理</span></div><div class=\"line\">  <span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"comment\">//其他配置省略</span></div><div class=\"line\">    devServer:&#123;</div><div class=\"line\">        <span class=\"attr\">proxy</span>:&#123;</div><div class=\"line\">            <span class=\"string\">'/api'</span>:&#123;</div><div class=\"line\">                <span class=\"attr\">target</span>:<span class=\"string\">'http://localhost:5000'</span>,</div><div class=\"line\">                <span class=\"attr\">secure</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">                <span class=\"attr\">pathRewrite</span>: &#123;<span class=\"string\">'^/api'</span>: <span class=\"string\">''</span>&#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//使用时代码</span></div><div class=\"line\">  fetch(<span class=\"string\">'/api/show_operation/1'</span>)</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">response</span>=&gt;</span>response.json())</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span><span class=\"built_in\">console</span>.log(result))</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//说明：通过proxy配置可以最终发出的请求路径为http://localhost:500/show_operation/1</span></div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>​</p>\n  </li>\n</ul>"},{"title":"各个平台上传图片","date":"2017-06-13T02:47:00.000Z","_content":"\n开发时常遇到的一些上传图片操作，这里记录一下。包括android，iOS，和java后端，后面还遇到的其他语言或平台时，会进行补充\n\nandroid AsyncHttpClient 上传图片,要使用[android-async-http](https://github.com/loopj/android-async-http)\n\n```java\npublic void uploadImg(String filePath) {\n        AsyncHttpClient asyncHttpclient = new AsyncHttpClient();\n        RequestParams params = new RequestParams();\n        try {\n            params.put(\"liveness\", \"1\");\n            params.put(\"img\", new File(filePath));// 传入照片路径\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        String url = \"\";\n        asyncHttpclient.post(url, params, new AsyncHttpResponseHandler() {\n            @Override\n            public void onSuccess(int statusCode, Header[] headers,\n                                  byte[] responseByte) {\n                String successStr = new String(responseByte);\n                try {\n\n                    JSONObject jObject = new JSONObject(successStr)\n                            .getJSONArray(\"faces\").getJSONObject(0);\n                  //其他省略\n                } catch (JSONException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            @Override\n            public void onFailure(int statusCode, Header[] headers,\n                                  byte[] responseBody, Throwable error) {\n                // 上传失败\n            }\n        });\n    }\n```\n\n<!-- more -->\n\niOS NSMutableURLRequest上传图片，NSMutableURLRequest是oc自带库\n\n```objective-c\n- (void) uploadImage:(NSData *)imageData{\n    //字典里面装的是你要上传的内容\n    NSDictionary *parameters = @{@\"liveness\": @\"1\"};\n    //上传的接口\n    NSString* urlstring = @\"http://132.121.1.213:9000/faceid/v1/extract\";\n    //分界线的标识符\n    NSString *TWITTERFON_FORM_BOUNDARY = @\"AaB03x\";\n    //根据url初始化request\n    NSMutableURLRequest * request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:urlstring]\n                                                            cachePolicy:NSURLRequestReloadIgnoringLocalCacheData\n                                                        timeoutInterval:10];\n    //分界线 --AaB03x\n    NSString *MPboundary=[[NSString alloc]initWithFormat:@\"--%@\",TWITTERFON_FORM_BOUNDARY];\n    //结束符 AaB03x--\n    NSString *endMPboundary=[[NSString alloc]initWithFormat:@\"%@--\",MPboundary];\n    //\t//要上传的图片\n    //\tUIImage *image=[params objectForKey:@\"pic\"];\n    //得到图片的data\n    //    NSData *data = UIImagePNGRepresentation(self.image);\n    //http body的字符串\n    NSMutableString *body=[[NSMutableString alloc]init];\n    //参数的集合的所有key的集合\n    NSArray *keys= [parameters allKeys];\n    //遍历keys\n    for(int i=0;i<[keys count];i++)\n    {\n        //得到当前key\n        NSString *key=[keys objectAtIndex:i];\n        //如果key不是img，说明value是字符类型，比如name：Boris\n        if(![key isEqualToString:@\"img\"])\n        {\n            //添加分界线，换行\n            [body appendFormat:@\"%@\\r\\n\",MPboundary];\n            //添加字段名称，换2行\n            [body appendFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"\\r\\n\\r\\n\",key];\n            //添加字段的值\n            [body appendFormat:@\"%@\\r\\n\",[parameters objectForKey:key]];\n        }\n    }\n    ////添加分界线，换行\n    [body appendFormat:@\"%@\\r\\n\",MPboundary];\n    //声明img字段，文件名为boris.png\n    [body appendFormat:@\"Content-Disposition: form-data; name=\\\"img\\\"; filename=\\\"boris.png\\\"\\r\\n\"];\n    //声明上传文件的格式\n    [body appendFormat:@\"Content-Type: image/png\\r\\n\\r\\n\"];\n    //声明结束符：--AaB03x--\n    NSString *end=[[NSString alloc]initWithFormat:@\"\\r\\n%@\",endMPboundary];\n    //声明myRequestData，用来放入http body\n    NSMutableData *myRequestData=[NSMutableData data];\n    //将body字符串转化为UTF8格式的二进制\n    [myRequestData appendData:[body dataUsingEncoding:NSUTF8StringEncoding]];\n    //将image的data加入\n    [myRequestData appendData:imageData];\n    //加入结束符--AaB03x--\n    [myRequestData appendData:[end dataUsingEncoding:NSUTF8StringEncoding]];\n    //设置HTTPHeader中Content-Type的值\n    NSString *content=[[NSString alloc]initWithFormat:@\"multipart/form-data; boundary=%@\",TWITTERFON_FORM_BOUNDARY];\n    //设置HTTPHeader\n    [request setValue:content forHTTPHeaderField:@\"Content-Type\"];\n    //设置Content-Length\n    [request setValue:[NSString stringWithFormat:@\"%d\", (int)[myRequestData length]] forHTTPHeaderField:@\"Content-Length\"];\n    //设置http body\n    [request setHTTPBody:myRequestData];\n    //http method\n    [request setHTTPMethod:@\"POST\"];\n    [NSURLConnection sendAsynchronousRequest:request queue:[NSOperationQueue currentQueue] completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) {\n        if(data.length > 0)\n        {\n            \n        }\n    }];\n}\n```\n\njava中使用httpClient 上传文件\n\npom.xml 中添加 httpclient\n\n```xml\n<dependency>\n  <groupId>commons-httpclient</groupId>\n  <artifactId>commons-httpclient</artifactId>\n  <version>3.1</version>\n</dependency>\n```\n\n```java\n public static String postWithFormData(String url, Map map) {\n        HttpClient client = new HttpClient();\n        PostMethod postMethod = new PostMethod(url);\n        try {\n \t\t\tString imgPath = (String) map.get(\"img\");\n            FilePart imgpart = null;\n            if (imgPath != null && !imgPath.equals(\"\")) {\n               imgpart = new FilePart(\"img\", new File(imgPath));\n            }\n            StringPart stringPart = new StringPart(\"liveness\", \"1\");\n            Part[] parts = {imgpart, stringPart};\n          \n            MultipartRequestEntity multipartRequestEntity = new MultipartRequestEntity(parts, new HttpMethodParams());\n            postMethod.setRequestEntity(multipartRequestEntity);\n            int statusCode = client.executeMethod(postMethod);\n            if (statusCode != 200) {\n                Map map1 = new HashMap();\n                map1.put(\"msg\", \"http 请求错误\");\n                return new JSONObject(map1).toString();\n            }\n            InputStream inputStream = postMethod.getResponseBodyAsStream();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n            String line = \"\";\n            StringBuilder sb = new StringBuilder();\n            while ((line = reader.readLine()) != null) {\n                sb.append(line + \"\\n\");\n            }\n            inputStream.close();\n            return sb.toString();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return \"\";\n        }\n    }\n```\n\n","source":"_posts/各个平台上传图片.md","raw":"---\ntitle: 各个平台上传图片\ndate: 2017-06-13 10:47:00\ntags: 开发随笔\n---\n\n开发时常遇到的一些上传图片操作，这里记录一下。包括android，iOS，和java后端，后面还遇到的其他语言或平台时，会进行补充\n\nandroid AsyncHttpClient 上传图片,要使用[android-async-http](https://github.com/loopj/android-async-http)\n\n```java\npublic void uploadImg(String filePath) {\n        AsyncHttpClient asyncHttpclient = new AsyncHttpClient();\n        RequestParams params = new RequestParams();\n        try {\n            params.put(\"liveness\", \"1\");\n            params.put(\"img\", new File(filePath));// 传入照片路径\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        String url = \"\";\n        asyncHttpclient.post(url, params, new AsyncHttpResponseHandler() {\n            @Override\n            public void onSuccess(int statusCode, Header[] headers,\n                                  byte[] responseByte) {\n                String successStr = new String(responseByte);\n                try {\n\n                    JSONObject jObject = new JSONObject(successStr)\n                            .getJSONArray(\"faces\").getJSONObject(0);\n                  //其他省略\n                } catch (JSONException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            @Override\n            public void onFailure(int statusCode, Header[] headers,\n                                  byte[] responseBody, Throwable error) {\n                // 上传失败\n            }\n        });\n    }\n```\n\n<!-- more -->\n\niOS NSMutableURLRequest上传图片，NSMutableURLRequest是oc自带库\n\n```objective-c\n- (void) uploadImage:(NSData *)imageData{\n    //字典里面装的是你要上传的内容\n    NSDictionary *parameters = @{@\"liveness\": @\"1\"};\n    //上传的接口\n    NSString* urlstring = @\"http://132.121.1.213:9000/faceid/v1/extract\";\n    //分界线的标识符\n    NSString *TWITTERFON_FORM_BOUNDARY = @\"AaB03x\";\n    //根据url初始化request\n    NSMutableURLRequest * request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:urlstring]\n                                                            cachePolicy:NSURLRequestReloadIgnoringLocalCacheData\n                                                        timeoutInterval:10];\n    //分界线 --AaB03x\n    NSString *MPboundary=[[NSString alloc]initWithFormat:@\"--%@\",TWITTERFON_FORM_BOUNDARY];\n    //结束符 AaB03x--\n    NSString *endMPboundary=[[NSString alloc]initWithFormat:@\"%@--\",MPboundary];\n    //\t//要上传的图片\n    //\tUIImage *image=[params objectForKey:@\"pic\"];\n    //得到图片的data\n    //    NSData *data = UIImagePNGRepresentation(self.image);\n    //http body的字符串\n    NSMutableString *body=[[NSMutableString alloc]init];\n    //参数的集合的所有key的集合\n    NSArray *keys= [parameters allKeys];\n    //遍历keys\n    for(int i=0;i<[keys count];i++)\n    {\n        //得到当前key\n        NSString *key=[keys objectAtIndex:i];\n        //如果key不是img，说明value是字符类型，比如name：Boris\n        if(![key isEqualToString:@\"img\"])\n        {\n            //添加分界线，换行\n            [body appendFormat:@\"%@\\r\\n\",MPboundary];\n            //添加字段名称，换2行\n            [body appendFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"\\r\\n\\r\\n\",key];\n            //添加字段的值\n            [body appendFormat:@\"%@\\r\\n\",[parameters objectForKey:key]];\n        }\n    }\n    ////添加分界线，换行\n    [body appendFormat:@\"%@\\r\\n\",MPboundary];\n    //声明img字段，文件名为boris.png\n    [body appendFormat:@\"Content-Disposition: form-data; name=\\\"img\\\"; filename=\\\"boris.png\\\"\\r\\n\"];\n    //声明上传文件的格式\n    [body appendFormat:@\"Content-Type: image/png\\r\\n\\r\\n\"];\n    //声明结束符：--AaB03x--\n    NSString *end=[[NSString alloc]initWithFormat:@\"\\r\\n%@\",endMPboundary];\n    //声明myRequestData，用来放入http body\n    NSMutableData *myRequestData=[NSMutableData data];\n    //将body字符串转化为UTF8格式的二进制\n    [myRequestData appendData:[body dataUsingEncoding:NSUTF8StringEncoding]];\n    //将image的data加入\n    [myRequestData appendData:imageData];\n    //加入结束符--AaB03x--\n    [myRequestData appendData:[end dataUsingEncoding:NSUTF8StringEncoding]];\n    //设置HTTPHeader中Content-Type的值\n    NSString *content=[[NSString alloc]initWithFormat:@\"multipart/form-data; boundary=%@\",TWITTERFON_FORM_BOUNDARY];\n    //设置HTTPHeader\n    [request setValue:content forHTTPHeaderField:@\"Content-Type\"];\n    //设置Content-Length\n    [request setValue:[NSString stringWithFormat:@\"%d\", (int)[myRequestData length]] forHTTPHeaderField:@\"Content-Length\"];\n    //设置http body\n    [request setHTTPBody:myRequestData];\n    //http method\n    [request setHTTPMethod:@\"POST\"];\n    [NSURLConnection sendAsynchronousRequest:request queue:[NSOperationQueue currentQueue] completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) {\n        if(data.length > 0)\n        {\n            \n        }\n    }];\n}\n```\n\njava中使用httpClient 上传文件\n\npom.xml 中添加 httpclient\n\n```xml\n<dependency>\n  <groupId>commons-httpclient</groupId>\n  <artifactId>commons-httpclient</artifactId>\n  <version>3.1</version>\n</dependency>\n```\n\n```java\n public static String postWithFormData(String url, Map map) {\n        HttpClient client = new HttpClient();\n        PostMethod postMethod = new PostMethod(url);\n        try {\n \t\t\tString imgPath = (String) map.get(\"img\");\n            FilePart imgpart = null;\n            if (imgPath != null && !imgPath.equals(\"\")) {\n               imgpart = new FilePart(\"img\", new File(imgPath));\n            }\n            StringPart stringPart = new StringPart(\"liveness\", \"1\");\n            Part[] parts = {imgpart, stringPart};\n          \n            MultipartRequestEntity multipartRequestEntity = new MultipartRequestEntity(parts, new HttpMethodParams());\n            postMethod.setRequestEntity(multipartRequestEntity);\n            int statusCode = client.executeMethod(postMethod);\n            if (statusCode != 200) {\n                Map map1 = new HashMap();\n                map1.put(\"msg\", \"http 请求错误\");\n                return new JSONObject(map1).toString();\n            }\n            InputStream inputStream = postMethod.getResponseBodyAsStream();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n            String line = \"\";\n            StringBuilder sb = new StringBuilder();\n            while ((line = reader.readLine()) != null) {\n                sb.append(line + \"\\n\");\n            }\n            inputStream.close();\n            return sb.toString();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return \"\";\n        }\n    }\n```\n\n","slug":"各个平台上传图片","published":1,"updated":"2017-06-19T07:08:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy44000bi9s6pi1482nc","content":"<p>开发时常遇到的一些上传图片操作，这里记录一下。包括android，iOS，和java后端，后面还遇到的其他语言或平台时，会进行补充</p>\n<p>android AsyncHttpClient 上传图片,要使用\n  <a href=\"https://github.com/loopj/android-async-http\" target=\"_blank\" rel=\"external\">android-async-http</a>\n</p>\n<figure class=\"highlight java\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadImg</span><span class=\"params\">(String filePath)</span> </span>&#123;</div><div class=\"line\">        AsyncHttpClient asyncHttpclient = <span class=\"keyword\">new</span> AsyncHttpClient();</div><div class=\"line\">        RequestParams params = <span class=\"keyword\">new</span> RequestParams();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            params.put(<span class=\"string\">\"liveness\"</span>, <span class=\"string\">\"1\"</span>);</div><div class=\"line\">            params.put(<span class=\"string\">\"img\"</span>, <span class=\"keyword\">new</span> File(filePath));<span class=\"comment\">// 传入照片路径</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        String url = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        asyncHttpclient.post(url, params, <span class=\"keyword\">new</span> AsyncHttpResponseHandler() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers,</span></span></div><div class=\"line\">                                  <span class=\"keyword\">byte</span>[] responseByte) &#123;</div><div class=\"line\">                String successStr = <span class=\"keyword\">new</span> String(responseByte);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">                    JSONObject jObject = <span class=\"keyword\">new</span> JSONObject(successStr)</div><div class=\"line\">                            .getJSONArray(<span class=\"string\">\"faces\"</span>).getJSONObject(<span class=\"number\">0</span>);</div><div class=\"line\">                  <span class=\"comment\">//其他省略</span></div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers,</span></span></div><div class=\"line\">                                  <span class=\"keyword\">byte</span>[] responseBody, Throwable error) &#123;</div><div class=\"line\">                <span class=\"comment\">// 上传失败</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<a id=\"more\"></a>\n<p>iOS NSMutableURLRequest上传图片，NSMutableURLRequest是oc自带库</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">- (void) uploadImage:(NSData *)imageData&#123;</div><div class=\"line\">    //字典里面装的是你要上传的内容</div><div class=\"line\">    NSDictionary *parameters = @&#123;@&quot;liveness&quot;: @&quot;1&quot;&#125;;</div><div class=\"line\">    //上传的接口</div><div class=\"line\">    NSString* urlstring = @&quot;http://132.121.1.213:9000/faceid/v1/extract&quot;;</div><div class=\"line\">    //分界线的标识符</div><div class=\"line\">    NSString *TWITTERFON_FORM_BOUNDARY = @&quot;AaB03x&quot;;</div><div class=\"line\">    //根据url初始化request</div><div class=\"line\">    NSMutableURLRequest * request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:urlstring]</div><div class=\"line\">                                                            cachePolicy:NSURLRequestReloadIgnoringLocalCacheData</div><div class=\"line\">                                                        timeoutInterval:10];</div><div class=\"line\">    //分界线 --AaB03x</div><div class=\"line\">    NSString *MPboundary=[[NSString alloc]initWithFormat:@&quot;--%@&quot;,TWITTERFON_FORM_BOUNDARY];</div><div class=\"line\">    //结束符 AaB03x--</div><div class=\"line\">    NSString *endMPboundary=[[NSString alloc]initWithFormat:@&quot;%@--&quot;,MPboundary];</div><div class=\"line\">    //\t//要上传的图片</div><div class=\"line\">    //\tUIImage *image=[params objectForKey:@&quot;pic&quot;];</div><div class=\"line\">    //得到图片的data</div><div class=\"line\">    //    NSData *data = UIImagePNGRepresentation(self.image);</div><div class=\"line\">    //http body的字符串</div><div class=\"line\">    NSMutableString *body=[[NSMutableString alloc]init];</div><div class=\"line\">    //参数的集合的所有key的集合</div><div class=\"line\">    NSArray *keys= [parameters allKeys];</div><div class=\"line\">    //遍历keys</div><div class=\"line\">    for(int i=0;i&lt;[keys count];i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        //得到当前key</div><div class=\"line\">        NSString *key=[keys objectAtIndex:i];</div><div class=\"line\">        //如果key不是img，说明value是字符类型，比如name：Boris</div><div class=\"line\">        if(![key isEqualToString:@&quot;img&quot;])</div><div class=\"line\">        &#123;</div><div class=\"line\">            //添加分界线，换行</div><div class=\"line\">            [body appendFormat:@&quot;%@\\r\\n&quot;,MPboundary];</div><div class=\"line\">            //添加字段名称，换2行</div><div class=\"line\">            [body appendFormat:@&quot;Content-Disposition: form-data; name=\\&quot;%@\\&quot;\\r\\n\\r\\n&quot;,key];</div><div class=\"line\">            //添加字段的值</div><div class=\"line\">            [body appendFormat:@&quot;%@\\r\\n&quot;,[parameters objectForKey:key]];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ////添加分界线，换行</div><div class=\"line\">    [body appendFormat:@&quot;%@\\r\\n&quot;,MPboundary];</div><div class=\"line\">    //声明img字段，文件名为boris.png</div><div class=\"line\">    [body appendFormat:@&quot;Content-Disposition: form-data; name=\\&quot;img\\&quot;; filename=\\&quot;boris.png\\&quot;\\r\\n&quot;];</div><div class=\"line\">    //声明上传文件的格式</div><div class=\"line\">    [body appendFormat:@&quot;Content-Type: image/png\\r\\n\\r\\n&quot;];</div><div class=\"line\">    //声明结束符：--AaB03x--</div><div class=\"line\">    NSString *end=[[NSString alloc]initWithFormat:@&quot;\\r\\n%@&quot;,endMPboundary];</div><div class=\"line\">    //声明myRequestData，用来放入http body</div><div class=\"line\">    NSMutableData *myRequestData=[NSMutableData data];</div><div class=\"line\">    //将body字符串转化为UTF8格式的二进制</div><div class=\"line\">    [myRequestData appendData:[body dataUsingEncoding:NSUTF8StringEncoding]];</div><div class=\"line\">    //将image的data加入</div><div class=\"line\">    [myRequestData appendData:imageData];</div><div class=\"line\">    //加入结束符--AaB03x--</div><div class=\"line\">    [myRequestData appendData:[end dataUsingEncoding:NSUTF8StringEncoding]];</div><div class=\"line\">    //设置HTTPHeader中Content-Type的值</div><div class=\"line\">    NSString *content=[[NSString alloc]initWithFormat:@&quot;multipart/form-data; boundary=%@&quot;,TWITTERFON_FORM_BOUNDARY];</div><div class=\"line\">    //设置HTTPHeader</div><div class=\"line\">    [request setValue:content forHTTPHeaderField:@&quot;Content-Type&quot;];</div><div class=\"line\">    //设置Content-Length</div><div class=\"line\">    [request setValue:[NSString stringWithFormat:@&quot;%d&quot;, (int)[myRequestData length]] forHTTPHeaderField:@&quot;Content-Length&quot;];</div><div class=\"line\">    //设置http body</div><div class=\"line\">    [request setHTTPBody:myRequestData];</div><div class=\"line\">    //http method</div><div class=\"line\">    [request setHTTPMethod:@&quot;POST&quot;];</div><div class=\"line\">    [NSURLConnection sendAsynchronousRequest:request queue:[NSOperationQueue currentQueue] completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) &#123;</div><div class=\"line\">        if(data.length &gt; 0)</div><div class=\"line\">        &#123;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>java中使用httpClient 上传文件</p>\n<p>pom.xml 中添加 httpclient</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-httpclient<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<figure class=\"highlight java\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">postWithFormData</span><span class=\"params\">(String url, Map map)</span> </span>&#123;</div><div class=\"line\">       HttpClient client = <span class=\"keyword\">new</span> HttpClient();</div><div class=\"line\">       PostMethod postMethod = <span class=\"keyword\">new</span> PostMethod(url);</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tString imgPath = (String) map.get(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">           FilePart imgpart = <span class=\"keyword\">null</span>;</div><div class=\"line\">           <span class=\"keyword\">if</span> (imgPath != <span class=\"keyword\">null</span> &amp;&amp; !imgPath.equals(<span class=\"string\">\"\"</span>)) &#123;</div><div class=\"line\">              imgpart = <span class=\"keyword\">new</span> FilePart(<span class=\"string\">\"img\"</span>, <span class=\"keyword\">new</span> File(imgPath));</div><div class=\"line\">           &#125;</div><div class=\"line\">           StringPart stringPart = <span class=\"keyword\">new</span> StringPart(<span class=\"string\">\"liveness\"</span>, <span class=\"string\">\"1\"</span>);</div><div class=\"line\">           Part[] parts = &#123;imgpart, stringPart&#125;;</div><div class=\"line\">         </div><div class=\"line\">           MultipartRequestEntity multipartRequestEntity = <span class=\"keyword\">new</span> MultipartRequestEntity(parts, <span class=\"keyword\">new</span> HttpMethodParams());</div><div class=\"line\">           postMethod.setRequestEntity(multipartRequestEntity);</div><div class=\"line\">           <span class=\"keyword\">int</span> statusCode = client.executeMethod(postMethod);</div><div class=\"line\">           <span class=\"keyword\">if</span> (statusCode != <span class=\"number\">200</span>) &#123;</div><div class=\"line\">               Map map1 = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">               map1.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"http 请求错误\"</span>);</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JSONObject(map1).toString();</div><div class=\"line\">           &#125;</div><div class=\"line\">           InputStream inputStream = postMethod.getResponseBodyAsStream();</div><div class=\"line\">           BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(inputStream));</div><div class=\"line\">           String line = <span class=\"string\">\"\"</span>;</div><div class=\"line\">           StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">           <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               sb.append(line + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">           inputStream.close();</div><div class=\"line\">           <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n","site":{"data":{}},"excerpt":"<p>开发时常遇到的一些上传图片操作，这里记录一下。包括android，iOS，和java后端，后面还遇到的其他语言或平台时，会进行补充</p>\n<p>android AsyncHttpClient 上传图片,要使用\n  <a href=\"https://github.com/loopj/android-async-http\" target=\"_blank\" rel=\"external\">android-async-http</a>\n</p>\n<figure class=\"highlight java\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadImg</span><span class=\"params\">(String filePath)</span> </span>&#123;</div><div class=\"line\">        AsyncHttpClient asyncHttpclient = <span class=\"keyword\">new</span> AsyncHttpClient();</div><div class=\"line\">        RequestParams params = <span class=\"keyword\">new</span> RequestParams();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            params.put(<span class=\"string\">\"liveness\"</span>, <span class=\"string\">\"1\"</span>);</div><div class=\"line\">            params.put(<span class=\"string\">\"img\"</span>, <span class=\"keyword\">new</span> File(filePath));<span class=\"comment\">// 传入照片路径</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        String url = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        asyncHttpclient.post(url, params, <span class=\"keyword\">new</span> AsyncHttpResponseHandler() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers,</span></span></div><div class=\"line\">                                  <span class=\"keyword\">byte</span>[] responseByte) &#123;</div><div class=\"line\">                String successStr = <span class=\"keyword\">new</span> String(responseByte);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">                    JSONObject jObject = <span class=\"keyword\">new</span> JSONObject(successStr)</div><div class=\"line\">                            .getJSONArray(<span class=\"string\">\"faces\"</span>).getJSONObject(<span class=\"number\">0</span>);</div><div class=\"line\">                  <span class=\"comment\">//其他省略</span></div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers,</span></span></div><div class=\"line\">                                  <span class=\"keyword\">byte</span>[] responseBody, Throwable error) &#123;</div><div class=\"line\">                <span class=\"comment\">// 上传失败</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>","more":"<p>iOS NSMutableURLRequest上传图片，NSMutableURLRequest是oc自带库</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">- (void) uploadImage:(NSData *)imageData&#123;</div><div class=\"line\">    //字典里面装的是你要上传的内容</div><div class=\"line\">    NSDictionary *parameters = @&#123;@&quot;liveness&quot;: @&quot;1&quot;&#125;;</div><div class=\"line\">    //上传的接口</div><div class=\"line\">    NSString* urlstring = @&quot;http://132.121.1.213:9000/faceid/v1/extract&quot;;</div><div class=\"line\">    //分界线的标识符</div><div class=\"line\">    NSString *TWITTERFON_FORM_BOUNDARY = @&quot;AaB03x&quot;;</div><div class=\"line\">    //根据url初始化request</div><div class=\"line\">    NSMutableURLRequest * request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:urlstring]</div><div class=\"line\">                                                            cachePolicy:NSURLRequestReloadIgnoringLocalCacheData</div><div class=\"line\">                                                        timeoutInterval:10];</div><div class=\"line\">    //分界线 --AaB03x</div><div class=\"line\">    NSString *MPboundary=[[NSString alloc]initWithFormat:@&quot;--%@&quot;,TWITTERFON_FORM_BOUNDARY];</div><div class=\"line\">    //结束符 AaB03x--</div><div class=\"line\">    NSString *endMPboundary=[[NSString alloc]initWithFormat:@&quot;%@--&quot;,MPboundary];</div><div class=\"line\">    //\t//要上传的图片</div><div class=\"line\">    //\tUIImage *image=[params objectForKey:@&quot;pic&quot;];</div><div class=\"line\">    //得到图片的data</div><div class=\"line\">    //    NSData *data = UIImagePNGRepresentation(self.image);</div><div class=\"line\">    //http body的字符串</div><div class=\"line\">    NSMutableString *body=[[NSMutableString alloc]init];</div><div class=\"line\">    //参数的集合的所有key的集合</div><div class=\"line\">    NSArray *keys= [parameters allKeys];</div><div class=\"line\">    //遍历keys</div><div class=\"line\">    for(int i=0;i&lt;[keys count];i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        //得到当前key</div><div class=\"line\">        NSString *key=[keys objectAtIndex:i];</div><div class=\"line\">        //如果key不是img，说明value是字符类型，比如name：Boris</div><div class=\"line\">        if(![key isEqualToString:@&quot;img&quot;])</div><div class=\"line\">        &#123;</div><div class=\"line\">            //添加分界线，换行</div><div class=\"line\">            [body appendFormat:@&quot;%@\\r\\n&quot;,MPboundary];</div><div class=\"line\">            //添加字段名称，换2行</div><div class=\"line\">            [body appendFormat:@&quot;Content-Disposition: form-data; name=\\&quot;%@\\&quot;\\r\\n\\r\\n&quot;,key];</div><div class=\"line\">            //添加字段的值</div><div class=\"line\">            [body appendFormat:@&quot;%@\\r\\n&quot;,[parameters objectForKey:key]];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ////添加分界线，换行</div><div class=\"line\">    [body appendFormat:@&quot;%@\\r\\n&quot;,MPboundary];</div><div class=\"line\">    //声明img字段，文件名为boris.png</div><div class=\"line\">    [body appendFormat:@&quot;Content-Disposition: form-data; name=\\&quot;img\\&quot;; filename=\\&quot;boris.png\\&quot;\\r\\n&quot;];</div><div class=\"line\">    //声明上传文件的格式</div><div class=\"line\">    [body appendFormat:@&quot;Content-Type: image/png\\r\\n\\r\\n&quot;];</div><div class=\"line\">    //声明结束符：--AaB03x--</div><div class=\"line\">    NSString *end=[[NSString alloc]initWithFormat:@&quot;\\r\\n%@&quot;,endMPboundary];</div><div class=\"line\">    //声明myRequestData，用来放入http body</div><div class=\"line\">    NSMutableData *myRequestData=[NSMutableData data];</div><div class=\"line\">    //将body字符串转化为UTF8格式的二进制</div><div class=\"line\">    [myRequestData appendData:[body dataUsingEncoding:NSUTF8StringEncoding]];</div><div class=\"line\">    //将image的data加入</div><div class=\"line\">    [myRequestData appendData:imageData];</div><div class=\"line\">    //加入结束符--AaB03x--</div><div class=\"line\">    [myRequestData appendData:[end dataUsingEncoding:NSUTF8StringEncoding]];</div><div class=\"line\">    //设置HTTPHeader中Content-Type的值</div><div class=\"line\">    NSString *content=[[NSString alloc]initWithFormat:@&quot;multipart/form-data; boundary=%@&quot;,TWITTERFON_FORM_BOUNDARY];</div><div class=\"line\">    //设置HTTPHeader</div><div class=\"line\">    [request setValue:content forHTTPHeaderField:@&quot;Content-Type&quot;];</div><div class=\"line\">    //设置Content-Length</div><div class=\"line\">    [request setValue:[NSString stringWithFormat:@&quot;%d&quot;, (int)[myRequestData length]] forHTTPHeaderField:@&quot;Content-Length&quot;];</div><div class=\"line\">    //设置http body</div><div class=\"line\">    [request setHTTPBody:myRequestData];</div><div class=\"line\">    //http method</div><div class=\"line\">    [request setHTTPMethod:@&quot;POST&quot;];</div><div class=\"line\">    [NSURLConnection sendAsynchronousRequest:request queue:[NSOperationQueue currentQueue] completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) &#123;</div><div class=\"line\">        if(data.length &gt; 0)</div><div class=\"line\">        &#123;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>java中使用httpClient 上传文件</p>\n<p>pom.xml 中添加 httpclient</p>\n<figure class=\"highlight xml\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-httpclient<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<figure class=\"highlight java\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">postWithFormData</span><span class=\"params\">(String url, Map map)</span> </span>&#123;</div><div class=\"line\">       HttpClient client = <span class=\"keyword\">new</span> HttpClient();</div><div class=\"line\">       PostMethod postMethod = <span class=\"keyword\">new</span> PostMethod(url);</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tString imgPath = (String) map.get(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">           FilePart imgpart = <span class=\"keyword\">null</span>;</div><div class=\"line\">           <span class=\"keyword\">if</span> (imgPath != <span class=\"keyword\">null</span> &amp;&amp; !imgPath.equals(<span class=\"string\">\"\"</span>)) &#123;</div><div class=\"line\">              imgpart = <span class=\"keyword\">new</span> FilePart(<span class=\"string\">\"img\"</span>, <span class=\"keyword\">new</span> File(imgPath));</div><div class=\"line\">           &#125;</div><div class=\"line\">           StringPart stringPart = <span class=\"keyword\">new</span> StringPart(<span class=\"string\">\"liveness\"</span>, <span class=\"string\">\"1\"</span>);</div><div class=\"line\">           Part[] parts = &#123;imgpart, stringPart&#125;;</div><div class=\"line\">         </div><div class=\"line\">           MultipartRequestEntity multipartRequestEntity = <span class=\"keyword\">new</span> MultipartRequestEntity(parts, <span class=\"keyword\">new</span> HttpMethodParams());</div><div class=\"line\">           postMethod.setRequestEntity(multipartRequestEntity);</div><div class=\"line\">           <span class=\"keyword\">int</span> statusCode = client.executeMethod(postMethod);</div><div class=\"line\">           <span class=\"keyword\">if</span> (statusCode != <span class=\"number\">200</span>) &#123;</div><div class=\"line\">               Map map1 = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">               map1.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"http 请求错误\"</span>);</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JSONObject(map1).toString();</div><div class=\"line\">           &#125;</div><div class=\"line\">           InputStream inputStream = postMethod.getResponseBodyAsStream();</div><div class=\"line\">           BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(inputStream));</div><div class=\"line\">           String line = <span class=\"string\">\"\"</span>;</div><div class=\"line\">           StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">           <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               sb.append(line + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">           inputStream.close();</div><div class=\"line\">           <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>"},{"title":"python 开发服务端","date":"2017-06-19T02:19:31.000Z","_content":"\n最新在开发微信公众号，选择了python做为后端开发的语言。之所以选择python作为开发语言，是因为python开发起来比较快，而且也容易上手。选用的python版本是python2.7.13\n\n\n\n## 先了解下python的一些基本知识\n\n- 在mac 上执行  `pip install xxx`会把包安装到哪里？\n\n  如果Mac上装了多个版本的Python，可以同过`python  --version`查看，然后会将包安装到`/usr/local/lib/pythonxxx/site-packages`下\n\n- 创建虚拟开发环境\n\n  在使用Python开发的时候，各个应用所需的Python版本可能不同，这时我们就需要一个独立的Python开发环境。virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。\n\n  - 安装virtualenv\n\n    ```sh\n    pip install virtualenv\n    ```\n\n  - 创建一个目录并创建一个独立的Python环境venv\n\n    ```sh\n    mkdir testPython\n    cd testPython\n    virtualenv --no-site-packages venv\n    ```\n\n    **注：** 参数`--no-site-packages`，不会将系统已安装的第三方包复制过来，这样我们就得到一个干净的Python开发环境\n\n  - 使用这个venv环境\n\n    ```sh\n    source venv/bin/activate\n    ```\n\n    接下来`pip install xxx` 都会把Python包放在`testPython/venv/lib/python2.7/site-packages`目录下\n\n  - 离开venv 环境\n\n     ```sh\n     deactivte\n     ```\n\n  virtualenv是如何创建“独立”的Python运行环境的呢？原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令`source venv/bin/activate`进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令`python`和`pip`均指向当前的virtualenv环境。\n\n\n\n\n​\t**注：** 使用venv 环境之后，执行`pip install xxxx` ，它会把这些依赖包安装在`venv/lib/python2.7/site-packages`目录下\n\n- 依赖第三方库的统一配置文件 **requirements.txt**\n\n  ```text\n  Flask==0.12\n  ```\n\n  通过`pip install -r requirements.txt`来安装文件中依赖的一些第三方库\n\n\n\n\n<!-- more -->\n\n\n\n## 项目开发\n\nflask是python的一个轻量级Web应用框架，对于一些小的站点来说flask，已经能够满足需求了。执行`pip install flask`安装。[flask 官网](http://flask.pocoo.org/)\n\n创建一个run.py文件，写如以下代码。然后执行python run.py，一个简易的web服务就OK了。访问localhost:8080端口\n\n```python\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/test', methods=['GET', 'POST'])\ndef test():\n    return jsonify({'msg':'hello world'})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080)\n```\n\n\n\n链接数据库使用的sqlalchemy,\tsqlalchemy 是Python SQL工具包和对象关系映射器，为应用程序开发人员提供了SQL的全部功能和灵活性。[SQLAlchemy官网](http://www.sqlalchemy.org/)\n\n\n- 本地机器已经安装了mysql，但是在使用sqlalchemy 报No module named mysql。\n\n   ```python \n   pip install pymysql\n   ```\n\n- 链接数据库样例\n\n   ```python\n   from sqlalchemy import Column, String, create_engine\n\n   # 初始化数据库连接:\n   engine = create_engine('mysql+pymysql://'+username+':'+password+'@localhost:3306/doudouSpace')\n\n   def create_user_table():\n       connect = engine.connect()\n       try:\n           result = connect.execute('xxxx') #xxx 表示sql语句\n           result.close()\n       except Exception as e:\n           print e\n\n   ```\n\n   **注：**更多详细文档请参考官网\n\n\n\n日志模块也是开发工作中的一个重要部分，可以方便我们调试开发。我们使用python自带的logging模块，我们要将日志信息输出到文件中，而不是只输出到控制台中。\n\n- 封装下日志模块\n\n  ```python\n  import logging\n  from logging.handlers import RotatingFileHandler\n  from . import config\n\n  log_filename = 'output.log'\n  logging.basicConfig(level=logging.DEBUG,\n                      format='%(filename)s:%(lineno)s - %(asctime)s %(levelname)s %(message)s',\n                      filename=log_filename,\n                      filemode='a')\n\n  logger = logging.getLogger()\n  log_handler = logging.handlers.WatchedFileHandler(log_filename)\n  logger.addHandler(log_handler)\n\n\n  def debug(msg):\n      # logging.debug(msg)\n      logger.debug(msg)\n\n\n  def info(msg):\n      # logging.info(msg)\n      logger.info(msg)\n\n\n  def warning(msg):\n      # logging.warning(msg)\n      logger.warning(msg)\n\n\n  def error(msg):\n      # logging.error(msg)\n      logger.error(msg)\n  ```\n\n  ​\n\n其他的一些在这里就不在过多的介绍了，我做了一个python开发后端rest接口的模版工程，放在GitHub上，有兴趣的话可以看看[python_tmplate](https://github.com/Cocoon-break/python_tmplate)  \n\n\n\n","source":"_posts/python 开发服务端.md","raw":"---\ntitle: python 开发服务端\ndate: 2017-06-19 10:19:31\ntags: python\n---\n\n最新在开发微信公众号，选择了python做为后端开发的语言。之所以选择python作为开发语言，是因为python开发起来比较快，而且也容易上手。选用的python版本是python2.7.13\n\n\n\n## 先了解下python的一些基本知识\n\n- 在mac 上执行  `pip install xxx`会把包安装到哪里？\n\n  如果Mac上装了多个版本的Python，可以同过`python  --version`查看，然后会将包安装到`/usr/local/lib/pythonxxx/site-packages`下\n\n- 创建虚拟开发环境\n\n  在使用Python开发的时候，各个应用所需的Python版本可能不同，这时我们就需要一个独立的Python开发环境。virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。\n\n  - 安装virtualenv\n\n    ```sh\n    pip install virtualenv\n    ```\n\n  - 创建一个目录并创建一个独立的Python环境venv\n\n    ```sh\n    mkdir testPython\n    cd testPython\n    virtualenv --no-site-packages venv\n    ```\n\n    **注：** 参数`--no-site-packages`，不会将系统已安装的第三方包复制过来，这样我们就得到一个干净的Python开发环境\n\n  - 使用这个venv环境\n\n    ```sh\n    source venv/bin/activate\n    ```\n\n    接下来`pip install xxx` 都会把Python包放在`testPython/venv/lib/python2.7/site-packages`目录下\n\n  - 离开venv 环境\n\n     ```sh\n     deactivte\n     ```\n\n  virtualenv是如何创建“独立”的Python运行环境的呢？原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令`source venv/bin/activate`进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令`python`和`pip`均指向当前的virtualenv环境。\n\n\n\n\n​\t**注：** 使用venv 环境之后，执行`pip install xxxx` ，它会把这些依赖包安装在`venv/lib/python2.7/site-packages`目录下\n\n- 依赖第三方库的统一配置文件 **requirements.txt**\n\n  ```text\n  Flask==0.12\n  ```\n\n  通过`pip install -r requirements.txt`来安装文件中依赖的一些第三方库\n\n\n\n\n<!-- more -->\n\n\n\n## 项目开发\n\nflask是python的一个轻量级Web应用框架，对于一些小的站点来说flask，已经能够满足需求了。执行`pip install flask`安装。[flask 官网](http://flask.pocoo.org/)\n\n创建一个run.py文件，写如以下代码。然后执行python run.py，一个简易的web服务就OK了。访问localhost:8080端口\n\n```python\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/test', methods=['GET', 'POST'])\ndef test():\n    return jsonify({'msg':'hello world'})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080)\n```\n\n\n\n链接数据库使用的sqlalchemy,\tsqlalchemy 是Python SQL工具包和对象关系映射器，为应用程序开发人员提供了SQL的全部功能和灵活性。[SQLAlchemy官网](http://www.sqlalchemy.org/)\n\n\n- 本地机器已经安装了mysql，但是在使用sqlalchemy 报No module named mysql。\n\n   ```python \n   pip install pymysql\n   ```\n\n- 链接数据库样例\n\n   ```python\n   from sqlalchemy import Column, String, create_engine\n\n   # 初始化数据库连接:\n   engine = create_engine('mysql+pymysql://'+username+':'+password+'@localhost:3306/doudouSpace')\n\n   def create_user_table():\n       connect = engine.connect()\n       try:\n           result = connect.execute('xxxx') #xxx 表示sql语句\n           result.close()\n       except Exception as e:\n           print e\n\n   ```\n\n   **注：**更多详细文档请参考官网\n\n\n\n日志模块也是开发工作中的一个重要部分，可以方便我们调试开发。我们使用python自带的logging模块，我们要将日志信息输出到文件中，而不是只输出到控制台中。\n\n- 封装下日志模块\n\n  ```python\n  import logging\n  from logging.handlers import RotatingFileHandler\n  from . import config\n\n  log_filename = 'output.log'\n  logging.basicConfig(level=logging.DEBUG,\n                      format='%(filename)s:%(lineno)s - %(asctime)s %(levelname)s %(message)s',\n                      filename=log_filename,\n                      filemode='a')\n\n  logger = logging.getLogger()\n  log_handler = logging.handlers.WatchedFileHandler(log_filename)\n  logger.addHandler(log_handler)\n\n\n  def debug(msg):\n      # logging.debug(msg)\n      logger.debug(msg)\n\n\n  def info(msg):\n      # logging.info(msg)\n      logger.info(msg)\n\n\n  def warning(msg):\n      # logging.warning(msg)\n      logger.warning(msg)\n\n\n  def error(msg):\n      # logging.error(msg)\n      logger.error(msg)\n  ```\n\n  ​\n\n其他的一些在这里就不在过多的介绍了，我做了一个python开发后端rest接口的模版工程，放在GitHub上，有兴趣的话可以看看[python_tmplate](https://github.com/Cocoon-break/python_tmplate)  \n\n\n\n","slug":"python 开发服务端","published":1,"updated":"2017-06-19T07:08:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy45000di9s6wktpygy5","content":"<p>最新在开发微信公众号，选择了python做为后端开发的语言。之所以选择python作为开发语言，是因为python开发起来比较快，而且也容易上手。选用的python版本是python2.7.13</p>\n<h2 id=\"先了解下python的一些基本知识\">\n  <a href=\"#先了解下python的一些基本知识\" class=\"headerlink\" title=\"先了解下python的一些基本知识\"></a>先了解下python的一些基本知识</h2>\n<ul>\n  <li>\n    <p>在mac 上执行\n      <code>pip install xxx</code>会把包安装到哪里？</p>\n    <p>如果Mac上装了多个版本的Python，可以同过\n      <code>python --version</code>查看，然后会将包安装到\n      <code>/usr/local/lib/pythonxxx/site-packages</code>下</p>\n  </li>\n  <li>\n    <p>创建虚拟开发环境</p>\n    <p>在使用Python开发的时候，各个应用所需的Python版本可能不同，这时我们就需要一个独立的Python开发环境。virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。</p>\n    <ul>\n      <li>\n        <p>安装virtualenv</p>\n        <figure class=\"highlight sh\">\n          <table>\n            <tr>\n              <td class=\"gutter\">\n                <pre><div class=\"line\">1</div></pre>\n              </td>\n              <td class=\"code\">\n                <pre><div class=\"line\">pip install virtualenv</div></pre>\n              </td>\n            </tr>\n          </table>\n        </figure>\n      </li>\n      <li>\n        <p>创建一个目录并创建一个独立的Python环境venv</p>\n        <figure class=\"highlight sh\">\n          <table>\n            <tr>\n              <td class=\"gutter\">\n                <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre>\n              </td>\n              <td class=\"code\">\n                <pre><div class=\"line\">mkdir <span class=\"built_in\">test</span>Python</div><div class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">test</span>Python</div><div class=\"line\">virtualenv --no-site-packages venv</div></pre>\n              </td>\n            </tr>\n          </table>\n        </figure>\n        <p>\n          <strong>注：</strong> 参数\n          <code>--no-site-packages</code>，不会将系统已安装的第三方包复制过来，这样我们就得到一个干净的Python开发环境</p>\n      </li>\n      <li>\n        <p>使用这个venv环境</p>\n        <figure class=\"highlight sh\">\n          <table>\n            <tr>\n              <td class=\"gutter\">\n                <pre><div class=\"line\">1</div></pre>\n              </td>\n              <td class=\"code\">\n                <pre><div class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</div></pre>\n              </td>\n            </tr>\n          </table>\n        </figure>\n        <p>接下来\n          <code>pip install xxx</code> 都会把Python包放在\n          <code>testPython/venv/lib/python2.7/site-packages</code>目录下</p>\n      </li>\n      <li>\n        <p>离开venv 环境</p>\n        <figure class=\"highlight sh\">\n          <table>\n            <tr>\n              <td class=\"gutter\">\n                <pre><div class=\"line\">1</div></pre>\n              </td>\n              <td class=\"code\">\n                <pre><div class=\"line\">deactivte</div></pre>\n              </td>\n            </tr>\n          </table>\n        </figure>\n      </li>\n    </ul>\n    <p>virtualenv是如何创建“独立”的Python运行环境的呢？原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令\n      <code>source venv/bin/activate</code>进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令\n      <code>python</code>和\n      <code>pip</code>均指向当前的virtualenv环境。</p>\n  </li>\n</ul>\n<p>​\n  <strong>注：</strong> 使用venv 环境之后，执行\n  <code>pip install xxxx</code> ，它会把这些依赖包安装在\n  <code>venv/lib/python2.7/site-packages</code>目录下</p>\n<ul>\n  <li>\n    <p>依赖第三方库的统一配置文件\n      <strong>requirements.txt</strong>\n    </p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">Flask==0.12</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>通过\n      <code>pip install -r requirements.txt</code>来安装文件中依赖的一些第三方库</p>\n  </li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"项目开发\">\n  <a href=\"#项目开发\" class=\"headerlink\" title=\"项目开发\"></a>项目开发</h2>\n<p>flask是python的一个轻量级Web应用框架，对于一些小的站点来说flask，已经能够满足需求了。执行\n  <code>pip install flask</code>安装。\n  <a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"external\">flask 官网</a>\n</p>\n<p>创建一个run.py文件，写如以下代码。然后执行python run.py，一个简易的web服务就OK了。访问localhost:8080端口</p>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/test', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;<span class=\"string\">'msg'</span>:<span class=\"string\">'hello world'</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>, port=<span class=\"number\">8080</span>)</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>链接数据库使用的sqlalchemy, sqlalchemy 是Python SQL工具包和对象关系映射器，为应用程序开发人员提供了SQL的全部功能和灵活性。\n  <a href=\"http://www.sqlalchemy.org/\" target=\"_blank\" rel=\"external\">SQLAlchemy官网</a>\n</p>\n<ul>\n  <li>\n    <p>本地机器已经安装了mysql，但是在使用sqlalchemy 报No module named mysql。</p>\n    <figure class=\"highlight python\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">pip install pymysql</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>链接数据库样例</p>\n    <figure class=\"highlight python\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, String, create_engine</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 初始化数据库连接:</span></div><div class=\"line\">engine = create_engine(<span class=\"string\">'mysql+pymysql://'</span>+username+<span class=\"string\">':'</span>+password+<span class=\"string\">'@localhost:3306/doudouSpace'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_user_table</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    connect = engine.connect()</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        result = connect.execute(<span class=\"string\">'xxxx'</span>) <span class=\"comment\">#xxx 表示sql语句</span></div><div class=\"line\">        result.close()</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">        <span class=\"keyword\">print</span> e</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>\n      <strong>注：</strong>更多详细文档请参考官网</p>\n  </li>\n</ul>\n<p>日志模块也是开发工作中的一个重要部分，可以方便我们调试开发。我们使用python自带的logging模块，我们要将日志信息输出到文件中，而不是只输出到控制台中。</p>\n<ul>\n  <li>\n    <p>封装下日志模块</p>\n    <figure class=\"highlight python\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">from</span> logging.handlers <span class=\"keyword\">import</span> RotatingFileHandler</div><div class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> config</div><div class=\"line\"></div><div class=\"line\">log_filename = <span class=\"string\">'output.log'</span></div><div class=\"line\">logging.basicConfig(level=logging.DEBUG,</div><div class=\"line\">                    format=<span class=\"string\">'%(filename)s:%(lineno)s - %(asctime)s %(levelname)s %(message)s'</span>,</div><div class=\"line\">                    filename=log_filename,</div><div class=\"line\">                    filemode=<span class=\"string\">'a'</span>)</div><div class=\"line\"></div><div class=\"line\">logger = logging.getLogger()</div><div class=\"line\">log_handler = logging.handlers.WatchedFileHandler(log_filename)</div><div class=\"line\">logger.addHandler(log_handler)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">debug</span><span class=\"params\">(msg)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># logging.debug(msg)</span></div><div class=\"line\">    logger.debug(msg)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span><span class=\"params\">(msg)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># logging.info(msg)</span></div><div class=\"line\">    logger.info(msg)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">warning</span><span class=\"params\">(msg)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># logging.warning(msg)</span></div><div class=\"line\">    logger.warning(msg)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">error</span><span class=\"params\">(msg)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># logging.error(msg)</span></div><div class=\"line\">    logger.error(msg)</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>​</p>\n  </li>\n</ul>\n<p>其他的一些在这里就不在过多的介绍了，我做了一个python开发后端rest接口的模版工程，放在GitHub上，有兴趣的话可以看看\n  <a href=\"https://github.com/Cocoon-break/python_tmplate\" target=\"_blank\" rel=\"external\">python_tmplate</a>\n</p>\n","site":{"data":{}},"excerpt":"<p>最新在开发微信公众号，选择了python做为后端开发的语言。之所以选择python作为开发语言，是因为python开发起来比较快，而且也容易上手。选用的python版本是python2.7.13</p>\n<h2 id=\"先了解下python的一些基本知识\">\n  <a href=\"#先了解下python的一些基本知识\" class=\"headerlink\" title=\"先了解下python的一些基本知识\"></a>先了解下python的一些基本知识</h2>\n<ul>\n  <li>\n    <p>在mac 上执行\n      <code>pip install xxx</code>会把包安装到哪里？</p>\n    <p>如果Mac上装了多个版本的Python，可以同过\n      <code>python --version</code>查看，然后会将包安装到\n      <code>/usr/local/lib/pythonxxx/site-packages</code>下</p>\n  </li>\n  <li>\n    <p>创建虚拟开发环境</p>\n    <p>在使用Python开发的时候，各个应用所需的Python版本可能不同，这时我们就需要一个独立的Python开发环境。virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。</p>\n    <ul>\n      <li>\n        <p>安装virtualenv</p>\n        <figure class=\"highlight sh\">\n          <table>\n            <tr>\n              <td class=\"gutter\">\n                <pre><div class=\"line\">1</div></pre>\n              </td>\n              <td class=\"code\">\n                <pre><div class=\"line\">pip install virtualenv</div></pre>\n              </td>\n            </tr>\n          </table>\n        </figure>\n      </li>\n      <li>\n        <p>创建一个目录并创建一个独立的Python环境venv</p>\n        <figure class=\"highlight sh\">\n          <table>\n            <tr>\n              <td class=\"gutter\">\n                <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre>\n              </td>\n              <td class=\"code\">\n                <pre><div class=\"line\">mkdir <span class=\"built_in\">test</span>Python</div><div class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">test</span>Python</div><div class=\"line\">virtualenv --no-site-packages venv</div></pre>\n              </td>\n            </tr>\n          </table>\n        </figure>\n        <p>\n          <strong>注：</strong> 参数\n          <code>--no-site-packages</code>，不会将系统已安装的第三方包复制过来，这样我们就得到一个干净的Python开发环境</p>\n      </li>\n      <li>\n        <p>使用这个venv环境</p>\n        <figure class=\"highlight sh\">\n          <table>\n            <tr>\n              <td class=\"gutter\">\n                <pre><div class=\"line\">1</div></pre>\n              </td>\n              <td class=\"code\">\n                <pre><div class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</div></pre>\n              </td>\n            </tr>\n          </table>\n        </figure>\n        <p>接下来\n          <code>pip install xxx</code> 都会把Python包放在\n          <code>testPython/venv/lib/python2.7/site-packages</code>目录下</p>\n      </li>\n      <li>\n        <p>离开venv 环境</p>\n        <figure class=\"highlight sh\">\n          <table>\n            <tr>\n              <td class=\"gutter\">\n                <pre><div class=\"line\">1</div></pre>\n              </td>\n              <td class=\"code\">\n                <pre><div class=\"line\">deactivte</div></pre>\n              </td>\n            </tr>\n          </table>\n        </figure>\n      </li>\n    </ul>\n    <p>virtualenv是如何创建“独立”的Python运行环境的呢？原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令\n      <code>source venv/bin/activate</code>进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令\n      <code>python</code>和\n      <code>pip</code>均指向当前的virtualenv环境。</p>\n  </li>\n</ul>\n<p>​\n  <strong>注：</strong> 使用venv 环境之后，执行\n  <code>pip install xxxx</code> ，它会把这些依赖包安装在\n  <code>venv/lib/python2.7/site-packages</code>目录下</p>\n<ul>\n  <li>\n    <p>依赖第三方库的统一配置文件\n      <strong>requirements.txt</strong>\n    </p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">Flask==0.12</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>通过\n      <code>pip install -r requirements.txt</code>来安装文件中依赖的一些第三方库</p>\n  </li>\n</ul>","more":"<h2 id=\"项目开发\">\n  <a href=\"#项目开发\" class=\"headerlink\" title=\"项目开发\"></a>项目开发</h2>\n<p>flask是python的一个轻量级Web应用框架，对于一些小的站点来说flask，已经能够满足需求了。执行\n  <code>pip install flask</code>安装。\n  <a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"external\">flask 官网</a>\n</p>\n<p>创建一个run.py文件，写如以下代码。然后执行python run.py，一个简易的web服务就OK了。访问localhost:8080端口</p>\n<figure class=\"highlight python\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/test', methods=['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;<span class=\"string\">'msg'</span>:<span class=\"string\">'hello world'</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>, port=<span class=\"number\">8080</span>)</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<p>链接数据库使用的sqlalchemy, sqlalchemy 是Python SQL工具包和对象关系映射器，为应用程序开发人员提供了SQL的全部功能和灵活性。\n  <a href=\"http://www.sqlalchemy.org/\" target=\"_blank\" rel=\"external\">SQLAlchemy官网</a>\n</p>\n<ul>\n  <li>\n    <p>本地机器已经安装了mysql，但是在使用sqlalchemy 报No module named mysql。</p>\n    <figure class=\"highlight python\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">pip install pymysql</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>链接数据库样例</p>\n    <figure class=\"highlight python\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, String, create_engine</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 初始化数据库连接:</span></div><div class=\"line\">engine = create_engine(<span class=\"string\">'mysql+pymysql://'</span>+username+<span class=\"string\">':'</span>+password+<span class=\"string\">'@localhost:3306/doudouSpace'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_user_table</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    connect = engine.connect()</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        result = connect.execute(<span class=\"string\">'xxxx'</span>) <span class=\"comment\">#xxx 表示sql语句</span></div><div class=\"line\">        result.close()</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">        <span class=\"keyword\">print</span> e</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>\n      <strong>注：</strong>更多详细文档请参考官网</p>\n  </li>\n</ul>\n<p>日志模块也是开发工作中的一个重要部分，可以方便我们调试开发。我们使用python自带的logging模块，我们要将日志信息输出到文件中，而不是只输出到控制台中。</p>\n<ul>\n  <li>\n    <p>封装下日志模块</p>\n    <figure class=\"highlight python\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">from</span> logging.handlers <span class=\"keyword\">import</span> RotatingFileHandler</div><div class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> config</div><div class=\"line\"></div><div class=\"line\">log_filename = <span class=\"string\">'output.log'</span></div><div class=\"line\">logging.basicConfig(level=logging.DEBUG,</div><div class=\"line\">                    format=<span class=\"string\">'%(filename)s:%(lineno)s - %(asctime)s %(levelname)s %(message)s'</span>,</div><div class=\"line\">                    filename=log_filename,</div><div class=\"line\">                    filemode=<span class=\"string\">'a'</span>)</div><div class=\"line\"></div><div class=\"line\">logger = logging.getLogger()</div><div class=\"line\">log_handler = logging.handlers.WatchedFileHandler(log_filename)</div><div class=\"line\">logger.addHandler(log_handler)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">debug</span><span class=\"params\">(msg)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># logging.debug(msg)</span></div><div class=\"line\">    logger.debug(msg)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span><span class=\"params\">(msg)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># logging.info(msg)</span></div><div class=\"line\">    logger.info(msg)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">warning</span><span class=\"params\">(msg)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># logging.warning(msg)</span></div><div class=\"line\">    logger.warning(msg)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">error</span><span class=\"params\">(msg)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># logging.error(msg)</span></div><div class=\"line\">    logger.error(msg)</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>​</p>\n  </li>\n</ul>\n<p>其他的一些在这里就不在过多的介绍了，我做了一个python开发后端rest接口的模版工程，放在GitHub上，有兴趣的话可以看看\n  <a href=\"https://github.com/Cocoon-break/python_tmplate\" target=\"_blank\" rel=\"external\">python_tmplate</a>\n</p>"},{"title":"supervisor linux后台进程管理利器","date":"2017-04-28T03:24:12.000Z","_content":"\nsupervisor 是基于python的进程管理工具\n\n## install online\n\n- ubuntu 系统安装 apt-get install supervisor\n- 也可以通过pip install supervisor 但是需要手动启动\n## install offline\n\n- 下载安装包和依赖包详见官网 [https://pypi.python.org/pypi/supervisor] 3.3.1版本\n\n- 解压安装tar.gz  然后cd 到目录中执行 python setup.py install\n\n- 创建配置文件\n\n- 执行`echo_supervisord_conf > /etc/supervisor/supervisord.conf `创建配置文件\n\n- 创建supervisord 放在 init.d目录 下  **注：** prog_bin 为supervisors 可执行文件位置\n\n   <!-- more -->\n\n   ```ssh\n   #!/bin/sh\n   #\n   # /etc/rc.d/init.d/supervisord\n   #\n   # Supervisor is a client/server system that\n   # allows its users to monitor and control a\n   # number of processes on UNIX-like operating\n   # systems.\n   #\n   # chkconfig: - 64 36\n   # description: Supervisor Server\n   # processname: supervisord\n\n   # Source init functions\n   . /etc/rc.d/init.d/functions\n\n   prog=\"supervisord\"\n\n   prefix=\"/usr\"\n   exec_prefix=\"${prefix}\"\n   prog_bin=\"${exec_prefix}/bin/supervisord\"\n   PIDFILE=\"/var/run/$prog.pid\"\n\n   start()\n   {\n          echo -n $\"Starting $prog: \"\n          touch $PIDFILE\n          daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE\n          sleep 1\n          [ -f $PIDFILE ] && success $\"$prog startup\" || failure $\"$prog startup\"\n          echo\n   }\n   stop()\n   {\n          echo -n $\"Shutting down $prog: \"\n          [ -f $PIDFILE ] && killproc $prog || success $\"$prog shutdown\"\n          echo\n   }\n\n   case \"$1\" in\n\n    start)\n      start\n    ;;\n\n    stop)\n      stop\n    ;;\n\n    status)\n          status $prog\n    ;;\n\n    restart)\n      stop\n      start\n    ;;\n\n    *)\n      echo \"Usage: $0 {start|stop|restart|status}\"\n    ;;\n\n   esac\n   ```\n\n- 修改指定要运行程序配置文件\n\n   编辑supervisor.conf文件中的\n\n   ```\n   [include]\n   files = /etc/supervisord.conf.d/*.conf\n   ```\n\n ​\n\n## how to use\n\n在etc/supervisor.conf.d 目录下创建每个进程对应的配置文件 如：work.conf\n具体配置\n\tdirectory= /opt/faceid/worker            //工程文件目录\n\tcommand= /opt/faceid/worker/start.sh  //启动命令\n\tautostart=true                                           //是否自启\n\tautorestart=true                                        //是否自动重启\n\tstartretries= 10000                                  //重试时间\n\tstartsecs=1                                                //启动时间\n\tstopasgroup=true\n\tkillasgroup=true``\n\tstdout_logfile_maxbytes = 50MB\n\tstdout_logfile_backups = 10\n\tstdout_logfile = /var/log/megvii/%(program_name)s.log\n## common command\n\n- supervisorctl status 查看各个进程的状态\n- supervisorctl reload 重启supervisor 下的所有进程\n- supervisorctl stop name 停止指定进程\n- supervisorctl start name 启动指定进程\n- supervisorctl restart all  重启supervisor 下的所有进程\n\n\n## FAQ\n\n- Error: Another program is already listening on a port\n\n  ```ssh\n  find / -name supervisor.sock\n  unlink /***/supervisor.sock\n  ```\n\n- 文件找不到\n\n   `unix:///tmp/supervisor.sock no such file`\n\n  编辑文件/etc/supervisord.conf  中的\n\n  ```\n  file = /tmp/supervisor.sock ;改成file = /var/run/supervisor.sock\n  ```\n\n​\t然后执行\n\n```ssh\ntouch /var/run/supervisor.sock\nservice supervisord restart\n```\n\n-  ERROR (spawn error)\n\n  确认脚本文件能够正常使用\n\n- error while loading shared libraries: libpython2.7.so.1.0\n\n  找到libpython2.7.so.10点位置\n\n  ```ssh\n  [root@testlm01v ~]# locate libpython2.7.so.1.0\n  /usr/local/Python-2.7.11/libpython2.7.so.1.0\n  /usr/local/lib/libpython2.7.so.1.0\n  ```\n\n  把找到的位置复制到/etc/ld.so.conf.d/python.conf中如\n\n  ```\n  [root@testlm01v /etc/ld.so.conf.d]# cat python.conf \n  /usr/local/lib\n  ```\n","source":"_posts/supervisor 是基于python的进程管理工具.md","raw":"---\ntitle: supervisor linux后台进程管理利器\ndate: 2017-04-28 11:24:12\ntags: Linux\n---\n\nsupervisor 是基于python的进程管理工具\n\n## install online\n\n- ubuntu 系统安装 apt-get install supervisor\n- 也可以通过pip install supervisor 但是需要手动启动\n## install offline\n\n- 下载安装包和依赖包详见官网 [https://pypi.python.org/pypi/supervisor] 3.3.1版本\n\n- 解压安装tar.gz  然后cd 到目录中执行 python setup.py install\n\n- 创建配置文件\n\n- 执行`echo_supervisord_conf > /etc/supervisor/supervisord.conf `创建配置文件\n\n- 创建supervisord 放在 init.d目录 下  **注：** prog_bin 为supervisors 可执行文件位置\n\n   <!-- more -->\n\n   ```ssh\n   #!/bin/sh\n   #\n   # /etc/rc.d/init.d/supervisord\n   #\n   # Supervisor is a client/server system that\n   # allows its users to monitor and control a\n   # number of processes on UNIX-like operating\n   # systems.\n   #\n   # chkconfig: - 64 36\n   # description: Supervisor Server\n   # processname: supervisord\n\n   # Source init functions\n   . /etc/rc.d/init.d/functions\n\n   prog=\"supervisord\"\n\n   prefix=\"/usr\"\n   exec_prefix=\"${prefix}\"\n   prog_bin=\"${exec_prefix}/bin/supervisord\"\n   PIDFILE=\"/var/run/$prog.pid\"\n\n   start()\n   {\n          echo -n $\"Starting $prog: \"\n          touch $PIDFILE\n          daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE\n          sleep 1\n          [ -f $PIDFILE ] && success $\"$prog startup\" || failure $\"$prog startup\"\n          echo\n   }\n   stop()\n   {\n          echo -n $\"Shutting down $prog: \"\n          [ -f $PIDFILE ] && killproc $prog || success $\"$prog shutdown\"\n          echo\n   }\n\n   case \"$1\" in\n\n    start)\n      start\n    ;;\n\n    stop)\n      stop\n    ;;\n\n    status)\n          status $prog\n    ;;\n\n    restart)\n      stop\n      start\n    ;;\n\n    *)\n      echo \"Usage: $0 {start|stop|restart|status}\"\n    ;;\n\n   esac\n   ```\n\n- 修改指定要运行程序配置文件\n\n   编辑supervisor.conf文件中的\n\n   ```\n   [include]\n   files = /etc/supervisord.conf.d/*.conf\n   ```\n\n ​\n\n## how to use\n\n在etc/supervisor.conf.d 目录下创建每个进程对应的配置文件 如：work.conf\n具体配置\n\tdirectory= /opt/faceid/worker            //工程文件目录\n\tcommand= /opt/faceid/worker/start.sh  //启动命令\n\tautostart=true                                           //是否自启\n\tautorestart=true                                        //是否自动重启\n\tstartretries= 10000                                  //重试时间\n\tstartsecs=1                                                //启动时间\n\tstopasgroup=true\n\tkillasgroup=true``\n\tstdout_logfile_maxbytes = 50MB\n\tstdout_logfile_backups = 10\n\tstdout_logfile = /var/log/megvii/%(program_name)s.log\n## common command\n\n- supervisorctl status 查看各个进程的状态\n- supervisorctl reload 重启supervisor 下的所有进程\n- supervisorctl stop name 停止指定进程\n- supervisorctl start name 启动指定进程\n- supervisorctl restart all  重启supervisor 下的所有进程\n\n\n## FAQ\n\n- Error: Another program is already listening on a port\n\n  ```ssh\n  find / -name supervisor.sock\n  unlink /***/supervisor.sock\n  ```\n\n- 文件找不到\n\n   `unix:///tmp/supervisor.sock no such file`\n\n  编辑文件/etc/supervisord.conf  中的\n\n  ```\n  file = /tmp/supervisor.sock ;改成file = /var/run/supervisor.sock\n  ```\n\n​\t然后执行\n\n```ssh\ntouch /var/run/supervisor.sock\nservice supervisord restart\n```\n\n-  ERROR (spawn error)\n\n  确认脚本文件能够正常使用\n\n- error while loading shared libraries: libpython2.7.so.1.0\n\n  找到libpython2.7.so.10点位置\n\n  ```ssh\n  [root@testlm01v ~]# locate libpython2.7.so.1.0\n  /usr/local/Python-2.7.11/libpython2.7.so.1.0\n  /usr/local/lib/libpython2.7.so.1.0\n  ```\n\n  把找到的位置复制到/etc/ld.so.conf.d/python.conf中如\n\n  ```\n  [root@testlm01v /etc/ld.so.conf.d]# cat python.conf \n  /usr/local/lib\n  ```\n","slug":"supervisor 是基于python的进程管理工具","published":1,"updated":"2017-05-27T15:02:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy46000fi9s6q5kgzqap","content":"<p>supervisor 是基于python的进程管理工具</p>\n<h2 id=\"install-online\">\n  <a href=\"#install-online\" class=\"headerlink\" title=\"install online\"></a>install online</h2>\n<ul>\n  <li>ubuntu 系统安装 apt-get install supervisor</li>\n  <li>\n    <p>也可以通过pip install supervisor 但是需要手动启动</p>\n    <h2 id=\"install-offline\">\n      <a href=\"#install-offline\" class=\"headerlink\" title=\"install offline\"></a>install offline</h2>\n  </li>\n  <li>\n    <p>下载安装包和依赖包详见官网 [\n      <a href=\"https://pypi.python.org/pypi/supervisor\" target=\"_blank\" rel=\"external\">https://pypi.python.org/pypi/supervisor</a>] 3.3.1版本</p>\n  </li>\n  <li>\n    <p>解压安装tar.gz 然后cd 到目录中执行 python setup.py install</p>\n  </li>\n  <li>\n    <p>创建配置文件</p>\n  </li>\n  <li>\n    <p>执行\n      <code>echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</code>创建配置文件</p>\n  </li>\n  <li>\n    <p>创建supervisord 放在 init.d目录 下\n      <strong>注：</strong> prog_bin 为supervisors 可执行文件位置</p>\n    <a id=\"more\"></a>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">#</div><div class=\"line\"># /etc/rc.d/init.d/supervisord</div><div class=\"line\">#</div><div class=\"line\"># Supervisor is a client/server system that</div><div class=\"line\"># allows its users to monitor and control a</div><div class=\"line\"># number of processes on UNIX-like operating</div><div class=\"line\"># systems.</div><div class=\"line\">#</div><div class=\"line\"># chkconfig: - 64 36</div><div class=\"line\"># description: Supervisor Server</div><div class=\"line\"># processname: supervisord</div><div class=\"line\"></div><div class=\"line\"># Source init functions</div><div class=\"line\">. /etc/rc.d/init.d/functions</div><div class=\"line\"></div><div class=\"line\">prog=&quot;supervisord&quot;</div><div class=\"line\"></div><div class=\"line\">prefix=&quot;/usr&quot;</div><div class=\"line\">exec_prefix=&quot;$&#123;prefix&#125;&quot;</div><div class=\"line\">prog_bin=&quot;$&#123;exec_prefix&#125;/bin/supervisord&quot;</div><div class=\"line\">PIDFILE=&quot;/var/run/$prog.pid&quot;</div><div class=\"line\"></div><div class=\"line\">start()</div><div class=\"line\">&#123;</div><div class=\"line\">       echo -n $&quot;Starting $prog: &quot;</div><div class=\"line\">       touch $PIDFILE</div><div class=\"line\">       daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE</div><div class=\"line\">       sleep 1</div><div class=\"line\">       [ -f $PIDFILE ] &amp;&amp; success $&quot;$prog startup&quot; || failure $&quot;$prog startup&quot;</div><div class=\"line\">       echo</div><div class=\"line\">&#125;</div><div class=\"line\">stop()</div><div class=\"line\">&#123;</div><div class=\"line\">       echo -n $&quot;Shutting down $prog: &quot;</div><div class=\"line\">       [ -f $PIDFILE ] &amp;&amp; killproc $prog || success $&quot;$prog shutdown&quot;</div><div class=\"line\">       echo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">case &quot;$1&quot; in</div><div class=\"line\"></div><div class=\"line\"> start)</div><div class=\"line\">   start</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> stop)</div><div class=\"line\">   stop</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> status)</div><div class=\"line\">       status $prog</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> restart)</div><div class=\"line\">   stop</div><div class=\"line\">   start</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> *)</div><div class=\"line\">   echo &quot;Usage: $0 &#123;start|stop|restart|status&#125;&quot;</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\">esac</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>修改指定要运行程序配置文件</p>\n    <p> 编辑supervisor.conf文件中的</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">[include]</div><div class=\"line\">files = /etc/supervisord.conf.d/*.conf</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>​</p>\n  </li>\n</ul>\n<h2 id=\"how-to-use\">\n  <a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use\"></a>how to use</h2>\n<p>在etc/supervisor.conf.d 目录下创建每个进程对应的配置文件 如：work.conf\n  <br>具体配置\n  <br> directory= /opt/faceid/worker //工程文件目录\n  <br> command= /opt/faceid/worker/start.sh //启动命令\n  <br> autostart=true //是否自启\n  <br> autorestart=true //是否自动重启\n  <br> startretries= 10000 //重试时间\n  <br> startsecs=1 //启动时间\n  <br> stopasgroup=true\n  <br> killasgroup=true``\n  <br> stdout_logfile_maxbytes = 50MB\n  <br> stdout_logfile_backups = 10\n  <br> stdout_logfile = /var/log/megvii/%(program_name)s.log</p>\n<h2 id=\"common-command\">\n  <a href=\"#common-command\" class=\"headerlink\" title=\"common command\"></a>common command</h2>\n<ul>\n  <li>supervisorctl status 查看各个进程的状态</li>\n  <li>supervisorctl reload 重启supervisor 下的所有进程</li>\n  <li>supervisorctl stop name 停止指定进程</li>\n  <li>supervisorctl start name 启动指定进程</li>\n  <li>supervisorctl restart all 重启supervisor 下的所有进程</li>\n</ul>\n<h2 id=\"FAQ\">\n  <a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2>\n<ul>\n  <li>\n    <p>Error: Another program is already listening on a port</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">find / -name supervisor.sock</div><div class=\"line\">unlink /***/supervisor.sock</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>文件找不到</p>\n    <p>\n      <code>unix:///tmp/supervisor.sock no such file</code>\n    </p>\n    <p>编辑文件/etc/supervisord.conf 中的</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">file = /tmp/supervisor.sock ;改成file = /var/run/supervisor.sock</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ul>\n<p>​ 然后执行</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">touch /var/run/supervisor.sock</div><div class=\"line\">service supervisord restart</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ul>\n  <li>\n    <p>ERROR (spawn error)</p>\n    <p>确认脚本文件能够正常使用</p>\n  </li>\n  <li>\n    <p>error while loading shared libraries: libpython2.7.so.1.0</p>\n    <p>找到libpython2.7.so.10点位置</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">[root@testlm01v ~]# locate libpython2.7.so.1.0</div><div class=\"line\">/usr/local/Python-2.7.11/libpython2.7.so.1.0</div><div class=\"line\">/usr/local/lib/libpython2.7.so.1.0</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>把找到的位置复制到/etc/ld.so.conf.d/python.conf中如</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">[root@testlm01v /etc/ld.so.conf.d]# cat python.conf </div><div class=\"line\">/usr/local/lib</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>supervisor 是基于python的进程管理工具</p>\n<h2 id=\"install-online\">\n  <a href=\"#install-online\" class=\"headerlink\" title=\"install online\"></a>install online</h2>\n<ul>\n  <li>ubuntu 系统安装 apt-get install supervisor</li>\n  <li>\n    <p>也可以通过pip install supervisor 但是需要手动启动</p>\n    <h2 id=\"install-offline\">\n      <a href=\"#install-offline\" class=\"headerlink\" title=\"install offline\"></a>install offline</h2>\n  </li>\n  <li>\n    <p>下载安装包和依赖包详见官网 [\n      <a href=\"https://pypi.python.org/pypi/supervisor\" target=\"_blank\" rel=\"external\">https://pypi.python.org/pypi/supervisor</a>] 3.3.1版本</p>\n  </li>\n  <li>\n    <p>解压安装tar.gz 然后cd 到目录中执行 python setup.py install</p>\n  </li>\n  <li>\n    <p>创建配置文件</p>\n  </li>\n  <li>\n    <p>执行\n      <code>echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</code>创建配置文件</p>\n  </li>\n  <li>\n    <p>创建supervisord 放在 init.d目录 下\n      <strong>注：</strong> prog_bin 为supervisors 可执行文件位置</p>","more":"<figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">#</div><div class=\"line\"># /etc/rc.d/init.d/supervisord</div><div class=\"line\">#</div><div class=\"line\"># Supervisor is a client/server system that</div><div class=\"line\"># allows its users to monitor and control a</div><div class=\"line\"># number of processes on UNIX-like operating</div><div class=\"line\"># systems.</div><div class=\"line\">#</div><div class=\"line\"># chkconfig: - 64 36</div><div class=\"line\"># description: Supervisor Server</div><div class=\"line\"># processname: supervisord</div><div class=\"line\"></div><div class=\"line\"># Source init functions</div><div class=\"line\">. /etc/rc.d/init.d/functions</div><div class=\"line\"></div><div class=\"line\">prog=&quot;supervisord&quot;</div><div class=\"line\"></div><div class=\"line\">prefix=&quot;/usr&quot;</div><div class=\"line\">exec_prefix=&quot;$&#123;prefix&#125;&quot;</div><div class=\"line\">prog_bin=&quot;$&#123;exec_prefix&#125;/bin/supervisord&quot;</div><div class=\"line\">PIDFILE=&quot;/var/run/$prog.pid&quot;</div><div class=\"line\"></div><div class=\"line\">start()</div><div class=\"line\">&#123;</div><div class=\"line\">       echo -n $&quot;Starting $prog: &quot;</div><div class=\"line\">       touch $PIDFILE</div><div class=\"line\">       daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE</div><div class=\"line\">       sleep 1</div><div class=\"line\">       [ -f $PIDFILE ] &amp;&amp; success $&quot;$prog startup&quot; || failure $&quot;$prog startup&quot;</div><div class=\"line\">       echo</div><div class=\"line\">&#125;</div><div class=\"line\">stop()</div><div class=\"line\">&#123;</div><div class=\"line\">       echo -n $&quot;Shutting down $prog: &quot;</div><div class=\"line\">       [ -f $PIDFILE ] &amp;&amp; killproc $prog || success $&quot;$prog shutdown&quot;</div><div class=\"line\">       echo</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">case &quot;$1&quot; in</div><div class=\"line\"></div><div class=\"line\"> start)</div><div class=\"line\">   start</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> stop)</div><div class=\"line\">   stop</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> status)</div><div class=\"line\">       status $prog</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> restart)</div><div class=\"line\">   stop</div><div class=\"line\">   start</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\"> *)</div><div class=\"line\">   echo &quot;Usage: $0 &#123;start|stop|restart|status&#125;&quot;</div><div class=\"line\"> ;;</div><div class=\"line\"></div><div class=\"line\">esac</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>修改指定要运行程序配置文件</p>\n    <p> 编辑supervisor.conf文件中的</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">[include]</div><div class=\"line\">files = /etc/supervisord.conf.d/*.conf</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>​</p>\n  </li>\n</ul>\n<h2 id=\"how-to-use\">\n  <a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use\"></a>how to use</h2>\n<p>在etc/supervisor.conf.d 目录下创建每个进程对应的配置文件 如：work.conf\n  <br>具体配置\n  <br> directory= /opt/faceid/worker //工程文件目录\n  <br> command= /opt/faceid/worker/start.sh //启动命令\n  <br> autostart=true //是否自启\n  <br> autorestart=true //是否自动重启\n  <br> startretries= 10000 //重试时间\n  <br> startsecs=1 //启动时间\n  <br> stopasgroup=true\n  <br> killasgroup=true``\n  <br> stdout_logfile_maxbytes = 50MB\n  <br> stdout_logfile_backups = 10\n  <br> stdout_logfile = /var/log/megvii/%(program_name)s.log</p>\n<h2 id=\"common-command\">\n  <a href=\"#common-command\" class=\"headerlink\" title=\"common command\"></a>common command</h2>\n<ul>\n  <li>supervisorctl status 查看各个进程的状态</li>\n  <li>supervisorctl reload 重启supervisor 下的所有进程</li>\n  <li>supervisorctl stop name 停止指定进程</li>\n  <li>supervisorctl start name 启动指定进程</li>\n  <li>supervisorctl restart all 重启supervisor 下的所有进程</li>\n</ul>\n<h2 id=\"FAQ\">\n  <a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2>\n<ul>\n  <li>\n    <p>Error: Another program is already listening on a port</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">find / -name supervisor.sock</div><div class=\"line\">unlink /***/supervisor.sock</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>文件找不到</p>\n    <p>\n      <code>unix:///tmp/supervisor.sock no such file</code>\n    </p>\n    <p>编辑文件/etc/supervisord.conf 中的</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">file = /tmp/supervisor.sock ;改成file = /var/run/supervisor.sock</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ul>\n<p>​ 然后执行</p>\n<figure class=\"highlight plain\">\n  <table>\n    <tr>\n      <td class=\"gutter\">\n        <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n      </td>\n      <td class=\"code\">\n        <pre><div class=\"line\">touch /var/run/supervisor.sock</div><div class=\"line\">service supervisord restart</div></pre>\n      </td>\n    </tr>\n  </table>\n</figure>\n<ul>\n  <li>\n    <p>ERROR (spawn error)</p>\n    <p>确认脚本文件能够正常使用</p>\n  </li>\n  <li>\n    <p>error while loading shared libraries: libpython2.7.so.1.0</p>\n    <p>找到libpython2.7.so.10点位置</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">[root@testlm01v ~]# locate libpython2.7.so.1.0</div><div class=\"line\">/usr/local/Python-2.7.11/libpython2.7.so.1.0</div><div class=\"line\">/usr/local/lib/libpython2.7.so.1.0</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>把找到的位置复制到/etc/ld.so.conf.d/python.conf中如</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">[root@testlm01v /etc/ld.so.conf.d]# cat python.conf </div><div class=\"line\">/usr/local/lib</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n</ul>"},{"title":"shell 脚本中读取参数值","date":"2017-05-25T03:14:12.000Z","_content":"\nshell 脚本中读取参数值\n\n通常读取命令行中带过来的参数有两种方式，一直是直接根据参数位置直接获取，还有一种根据指定的key，去获取指定的值。第一种方式可以说是根本没有可读性，使用的人如果参数位置写错了，传入的值就全错了\n\n## 根据参数位置直接获取\n\n1. 先定义一个脚本test.sh，打印位置参数\n\n   ```ssh\n   #!/bin/bash\n\n   echo $1\n   echo $2\n   ```\n\n2. 执行test.sh脚本\n\n   ```ssh\n   ./test.sh haha hehehe\n   ```\n\n   执行的结果就是打印了两个参数，这个种方式的弊端就是，如果参数的位置传错了，那么$1 的值就不是haha了，当然可以使用这种方式写，就是可读性不太高 哈。\n\n   <!-- more -->\n\n## 指定key 获取参数\n\n1. 一样的我们先定义脚本test.sh，一会儿我们在解读shell脚本中的含义\n\n   ```ssh\n   #!/bin/bash\n\n   #先定义接收各个参数值的变量\n   IP_VALUE=\"\"; NODE_VALUE=\"\";VIP_VALUE=\"\";\n\n   while true;do \n   \tif [ ! $2 ]; then break; fi\n   \tcase $1 in\n   \t\t-i|--ip)\n   \t\t\tcase $2 in\n   \t\t\t\"\")IP_VALUE=\"\";shift 2;;\n   \t\t\t*)IP_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t-n|--node)\n   \t\t\tcase $2 in\n   \t\t\t\"\")NODE_VALUE=\"\";shift 2;;\n   \t\t\t*)NODE_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t-v|--vip)\n   \t\t\tcase $2 in\n   \t\t\t\"\")NODE_VALUE=\"\";shift 2;;\n   \t\t\t*)NODE_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t --) shift ;break ;;\n   \t\t *) break;;\n   \t\tesac\n   done\n\n   if [ -z \"${IP_VALUE}\" ];    then echo \"error: ip is not found.\";             exit 1; fi\n   if [ -z \"${NODE_VALUE}\" ];  then echo \"error: node is not found.\";           exit 1; fi\n   if [ -z \"${VIP_VALUE}\" ];   then echo \"error: vip is not found.\";            exit 1; fi\n   ```\n\n   - 通过while 循环参数的$1 和$2 取key 和 value。\n   - case $1取参数的key，case $2取其中的值，如果取到了，就通过shift 2，把最前面的两个位置给移除了比如:`./test.sh -v kkk -n bbbb` 读取到如果执行了 shift 2,它就会把-v kkk 给扔了\n   - 底下的if 是判断有没有读取到想要的值\n\n2. 其他的方式去根据key获取参数\n\n   - 一个是getopts 但是getopts不支持长选项，具体可以参考[getopts命令行参数处理](http://www.cnblogs.com/xiangzi888/archive/2012/04/03/2430736.html)\n   - 另一个是getopt，[shell中使用getopts 和 getopt](http://blog.csdn.net/wh211212/article/details/53750366)\n\n个人建议使用第一种方式去处理shell参数，不会有太多的局限性，唯一的问题就是代码会多一些哈！","source":"_posts/shell 脚本中读取参数值.md","raw":"---\ntitle: shell 脚本中读取参数值\ndate: 2017-05-25 11:14:12\ntags: Linux\n---\n\nshell 脚本中读取参数值\n\n通常读取命令行中带过来的参数有两种方式，一直是直接根据参数位置直接获取，还有一种根据指定的key，去获取指定的值。第一种方式可以说是根本没有可读性，使用的人如果参数位置写错了，传入的值就全错了\n\n## 根据参数位置直接获取\n\n1. 先定义一个脚本test.sh，打印位置参数\n\n   ```ssh\n   #!/bin/bash\n\n   echo $1\n   echo $2\n   ```\n\n2. 执行test.sh脚本\n\n   ```ssh\n   ./test.sh haha hehehe\n   ```\n\n   执行的结果就是打印了两个参数，这个种方式的弊端就是，如果参数的位置传错了，那么$1 的值就不是haha了，当然可以使用这种方式写，就是可读性不太高 哈。\n\n   <!-- more -->\n\n## 指定key 获取参数\n\n1. 一样的我们先定义脚本test.sh，一会儿我们在解读shell脚本中的含义\n\n   ```ssh\n   #!/bin/bash\n\n   #先定义接收各个参数值的变量\n   IP_VALUE=\"\"; NODE_VALUE=\"\";VIP_VALUE=\"\";\n\n   while true;do \n   \tif [ ! $2 ]; then break; fi\n   \tcase $1 in\n   \t\t-i|--ip)\n   \t\t\tcase $2 in\n   \t\t\t\"\")IP_VALUE=\"\";shift 2;;\n   \t\t\t*)IP_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t-n|--node)\n   \t\t\tcase $2 in\n   \t\t\t\"\")NODE_VALUE=\"\";shift 2;;\n   \t\t\t*)NODE_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t-v|--vip)\n   \t\t\tcase $2 in\n   \t\t\t\"\")NODE_VALUE=\"\";shift 2;;\n   \t\t\t*)NODE_VALUE=$2;shift 2;;\n   \t\t\tesac;;\n   \t\t --) shift ;break ;;\n   \t\t *) break;;\n   \t\tesac\n   done\n\n   if [ -z \"${IP_VALUE}\" ];    then echo \"error: ip is not found.\";             exit 1; fi\n   if [ -z \"${NODE_VALUE}\" ];  then echo \"error: node is not found.\";           exit 1; fi\n   if [ -z \"${VIP_VALUE}\" ];   then echo \"error: vip is not found.\";            exit 1; fi\n   ```\n\n   - 通过while 循环参数的$1 和$2 取key 和 value。\n   - case $1取参数的key，case $2取其中的值，如果取到了，就通过shift 2，把最前面的两个位置给移除了比如:`./test.sh -v kkk -n bbbb` 读取到如果执行了 shift 2,它就会把-v kkk 给扔了\n   - 底下的if 是判断有没有读取到想要的值\n\n2. 其他的方式去根据key获取参数\n\n   - 一个是getopts 但是getopts不支持长选项，具体可以参考[getopts命令行参数处理](http://www.cnblogs.com/xiangzi888/archive/2012/04/03/2430736.html)\n   - 另一个是getopt，[shell中使用getopts 和 getopt](http://blog.csdn.net/wh211212/article/details/53750366)\n\n个人建议使用第一种方式去处理shell参数，不会有太多的局限性，唯一的问题就是代码会多一些哈！","slug":"shell 脚本中读取参数值","published":1,"updated":"2017-05-27T15:01:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4jlcy48000hi9s6vwchh3ng","content":"<p>shell 脚本中读取参数值</p>\n<p>通常读取命令行中带过来的参数有两种方式，一直是直接根据参数位置直接获取，还有一种根据指定的key，去获取指定的值。第一种方式可以说是根本没有可读性，使用的人如果参数位置写错了，传入的值就全错了</p>\n<h2 id=\"根据参数位置直接获取\">\n  <a href=\"#根据参数位置直接获取\" class=\"headerlink\" title=\"根据参数位置直接获取\"></a>根据参数位置直接获取</h2>\n<ol>\n  <li>\n    <p>先定义一个脚本test.sh，打印位置参数</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">echo $1</div><div class=\"line\">echo $2</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>执行test.sh脚本</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">./test.sh haha hehehe</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>执行的结果就是打印了两个参数，这个种方式的弊端就是，如果参数的位置传错了，那么$1 的值就不是haha了，当然可以使用这种方式写，就是可读性不太高 哈。</p>\n    <a id=\"more\"></a>\n  </li>\n</ol>\n<h2 id=\"指定key-获取参数\">\n  <a href=\"#指定key-获取参数\" class=\"headerlink\" title=\"指定key 获取参数\"></a>指定key 获取参数</h2>\n<ol>\n  <li>\n    <p>一样的我们先定义脚本test.sh，一会儿我们在解读shell脚本中的含义</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">#先定义接收各个参数值的变量</div><div class=\"line\">IP_VALUE=&quot;&quot;; NODE_VALUE=&quot;&quot;;VIP_VALUE=&quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">while true;do </div><div class=\"line\">\tif [ ! $2 ]; then break; fi</div><div class=\"line\">\tcase $1 in</div><div class=\"line\">\t\t-i|--ip)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)IP_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)IP_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t-n|--node)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)NODE_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)NODE_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t-v|--vip)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)NODE_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)NODE_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t --) shift ;break ;;</div><div class=\"line\">\t\t *) break;;</div><div class=\"line\">\t\tesac</div><div class=\"line\">done</div><div class=\"line\"></div><div class=\"line\">if [ -z &quot;$&#123;IP_VALUE&#125;&quot; ];    then echo &quot;error: ip is not found.&quot;;             exit 1; fi</div><div class=\"line\">if [ -z &quot;$&#123;NODE_VALUE&#125;&quot; ];  then echo &quot;error: node is not found.&quot;;           exit 1; fi</div><div class=\"line\">if [ -z &quot;$&#123;VIP_VALUE&#125;&quot; ];   then echo &quot;error: vip is not found.&quot;;            exit 1; fi</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <ul>\n      <li>通过while 循环参数的$1 和$2 取key 和 value。</li>\n      <li>case $1取参数的key，case $2取其中的值，如果取到了，就通过shift 2，把最前面的两个位置给移除了比如:\n        <code>./test.sh -v kkk -n bbbb</code> 读取到如果执行了 shift 2,它就会把-v kkk 给扔了</li>\n      <li>底下的if 是判断有没有读取到想要的值</li>\n    </ul>\n  </li>\n  <li>\n    <p>其他的方式去根据key获取参数</p>\n    <ul>\n      <li>一个是getopts 但是getopts不支持长选项，具体可以参考\n        <a href=\"http://www.cnblogs.com/xiangzi888/archive/2012/04/03/2430736.html\" target=\"_blank\" rel=\"external\">getopts命令行参数处理</a>\n      </li>\n      <li>另一个是getopt，\n        <a href=\"http://blog.csdn.net/wh211212/article/details/53750366\" target=\"_blank\" rel=\"external\">shell中使用getopts 和 getopt</a>\n      </li>\n    </ul>\n  </li>\n</ol>\n<p>个人建议使用第一种方式去处理shell参数，不会有太多的局限性，唯一的问题就是代码会多一些哈！</p>\n","site":{"data":{}},"excerpt":"<p>shell 脚本中读取参数值</p>\n<p>通常读取命令行中带过来的参数有两种方式，一直是直接根据参数位置直接获取，还有一种根据指定的key，去获取指定的值。第一种方式可以说是根本没有可读性，使用的人如果参数位置写错了，传入的值就全错了</p>\n<h2 id=\"根据参数位置直接获取\">\n  <a href=\"#根据参数位置直接获取\" class=\"headerlink\" title=\"根据参数位置直接获取\"></a>根据参数位置直接获取</h2>\n<ol>\n  <li>\n    <p>先定义一个脚本test.sh，打印位置参数</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">echo $1</div><div class=\"line\">echo $2</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n  </li>\n  <li>\n    <p>执行test.sh脚本</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">./test.sh haha hehehe</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <p>执行的结果就是打印了两个参数，这个种方式的弊端就是，如果参数的位置传错了，那么$1 的值就不是haha了，当然可以使用这种方式写，就是可读性不太高 哈。</p>","more":"</li>\n</ol>\n<h2 id=\"指定key-获取参数\">\n  <a href=\"#指定key-获取参数\" class=\"headerlink\" title=\"指定key 获取参数\"></a>指定key 获取参数</h2>\n<ol>\n  <li>\n    <p>一样的我们先定义脚本test.sh，一会儿我们在解读shell脚本中的含义</p>\n    <figure class=\"highlight plain\">\n      <table>\n        <tr>\n          <td class=\"gutter\">\n            <pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre>\n          </td>\n          <td class=\"code\">\n            <pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">#先定义接收各个参数值的变量</div><div class=\"line\">IP_VALUE=&quot;&quot;; NODE_VALUE=&quot;&quot;;VIP_VALUE=&quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">while true;do </div><div class=\"line\">\tif [ ! $2 ]; then break; fi</div><div class=\"line\">\tcase $1 in</div><div class=\"line\">\t\t-i|--ip)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)IP_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)IP_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t-n|--node)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)NODE_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)NODE_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t-v|--vip)</div><div class=\"line\">\t\t\tcase $2 in</div><div class=\"line\">\t\t\t&quot;&quot;)NODE_VALUE=&quot;&quot;;shift 2;;</div><div class=\"line\">\t\t\t*)NODE_VALUE=$2;shift 2;;</div><div class=\"line\">\t\t\tesac;;</div><div class=\"line\">\t\t --) shift ;break ;;</div><div class=\"line\">\t\t *) break;;</div><div class=\"line\">\t\tesac</div><div class=\"line\">done</div><div class=\"line\"></div><div class=\"line\">if [ -z &quot;$&#123;IP_VALUE&#125;&quot; ];    then echo &quot;error: ip is not found.&quot;;             exit 1; fi</div><div class=\"line\">if [ -z &quot;$&#123;NODE_VALUE&#125;&quot; ];  then echo &quot;error: node is not found.&quot;;           exit 1; fi</div><div class=\"line\">if [ -z &quot;$&#123;VIP_VALUE&#125;&quot; ];   then echo &quot;error: vip is not found.&quot;;            exit 1; fi</div></pre>\n          </td>\n        </tr>\n      </table>\n    </figure>\n    <ul>\n      <li>通过while 循环参数的$1 和$2 取key 和 value。</li>\n      <li>case $1取参数的key，case $2取其中的值，如果取到了，就通过shift 2，把最前面的两个位置给移除了比如:\n        <code>./test.sh -v kkk -n bbbb</code> 读取到如果执行了 shift 2,它就会把-v kkk 给扔了</li>\n      <li>底下的if 是判断有没有读取到想要的值</li>\n    </ul>\n  </li>\n  <li>\n    <p>其他的方式去根据key获取参数</p>\n    <ul>\n      <li>一个是getopts 但是getopts不支持长选项，具体可以参考\n        <a href=\"http://www.cnblogs.com/xiangzi888/archive/2012/04/03/2430736.html\" target=\"_blank\" rel=\"external\">getopts命令行参数处理</a>\n      </li>\n      <li>另一个是getopt，\n        <a href=\"http://blog.csdn.net/wh211212/article/details/53750366\" target=\"_blank\" rel=\"external\">shell中使用getopts 和 getopt</a>\n      </li>\n    </ul>\n  </li>\n</ol>\n<p>个人建议使用第一种方式去处理shell参数，不会有太多的局限性，唯一的问题就是代码会多一些哈！</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj4jlcy3f0000i9s6muffc190","tag_id":"cj4jlcy3p0002i9s68fdhpx1z","_id":"cj4jlcy3w0007i9s66cf90yj7"},{"post_id":"cj4jlcy3m0001i9s6blhjo0wr","tag_id":"cj4jlcy3v0006i9s6fqskcqa5","_id":"cj4jlcy44000ci9s6mgsv719n"},{"post_id":"cj4jlcy3r0003i9s6me00m0j7","tag_id":"cj4jlcy3p0002i9s68fdhpx1z","_id":"cj4jlcy47000gi9s6nf3xfbw8"},{"post_id":"cj4jlcy46000fi9s6q5kgzqap","tag_id":"cj4jlcy3p0002i9s68fdhpx1z","_id":"cj4jlcy4a000ji9s6hvz209cq"},{"post_id":"cj4jlcy3t0004i9s6hnkxfwcl","tag_id":"cj4jlcy45000ei9s6bzc9yt99","_id":"cj4jlcy4b000ki9s6w3cazhuo"},{"post_id":"cj4jlcy48000hi9s6vwchh3ng","tag_id":"cj4jlcy3p0002i9s68fdhpx1z","_id":"cj4jlcy4b000li9s6lkxpbauj"},{"post_id":"cj4jlcy3u0005i9s6jwpifi9o","tag_id":"cj4jlcy49000ii9s6py2593m7","_id":"cj4jlcy4c000ni9s6gceobczo"},{"post_id":"cj4jlcy3w0008i9s6g8q0x96u","tag_id":"cj4jlcy49000ii9s6py2593m7","_id":"cj4jlcy4d000pi9s628dwej6b"},{"post_id":"cj4jlcy3z0009i9s6dbeplewm","tag_id":"cj4jlcy4d000oi9s68it9d0pn","_id":"cj4jlcy4f000ri9s674wp8wc7"},{"post_id":"cj4jlcy44000bi9s6pi1482nc","tag_id":"cj4jlcy4e000qi9s6fsyggkm8","_id":"cj4jlcy4g000ti9s69rocck9z"},{"post_id":"cj4jlcy45000di9s6wktpygy5","tag_id":"cj4jlcy4f000si9s6k9ow2f4c","_id":"cj4jlcy4g000ui9s6l6alsxh4"}],"Tag":[{"name":"Linux","_id":"cj4jlcy3p0002i9s68fdhpx1z"},{"name":"扩展","_id":"cj4jlcy3v0006i9s6fqskcqa5"},{"name":"react-native","_id":"cj4jlcy45000ei9s6bzc9yt99"},{"name":"技巧","_id":"cj4jlcy49000ii9s6py2593m7"},{"name":"前端","_id":"cj4jlcy4d000oi9s68it9d0pn"},{"name":"开发随笔","_id":"cj4jlcy4e000qi9s6fsyggkm8"},{"name":"python","_id":"cj4jlcy4f000si9s6k9ow2f4c"}]}}